
Buzzer_exam_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b77  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089a  00000000  00000000  00000e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a2  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002165  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	6d d0       	rcall	.+218    	; 0x174 <main>
  9a:	ad c0       	rjmp	.+346    	; 0x1f6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <buzzer_init>:

#include "Buzzer.h"

void buzzer_init()
{
	DDRB |= (1<<DDRB5); // OC1A, OC1B 쓸 거임
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	87 bb       	out	0x17, r24	; 23
	TCCR1B |= (0<<CS12) | (1<<CS11) | (0<<CS10); // 8분주
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (0<<WGM13) | (1<<WGM12); // Wave genetation : CTC mode
  aa:	8e b5       	in	r24, 0x2e	; 46
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (0<<WGM11) | (0<<WGM10);
  b0:	8f b5       	in	r24, 0x2f	; 47
  b2:	8f bd       	out	0x2f, r24	; 47
  b4:	08 95       	ret

000000b6 <no_buzzer>:
}

void no_buzzer()
{
	TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0)); // 출력x
  b6:	8f b5       	in	r24, 0x2f	; 47
  b8:	8f 73       	andi	r24, 0x3F	; 63
  ba:	8f bd       	out	0x2f, r24	; 47
  bc:	08 95       	ret

000000be <play_buzzer>:
}

void play_buzzer()
{
	TCCR1A |= (0<<COM1A1) | (1<<COM1A0); // 출력o
  be:	8f b5       	in	r24, 0x2f	; 47
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8f bd       	out	0x2f, r24	; 47
  c4:	08 95       	ret

000000c6 <set_buzzer>:
}

void set_buzzer(int note)
{
	OCR1A = 1000000 / note;
  c6:	9c 01       	movw	r18, r24
  c8:	99 0f       	add	r25, r25
  ca:	44 0b       	sbc	r20, r20
  cc:	55 0b       	sbc	r21, r21
  ce:	60 e4       	ldi	r22, 0x40	; 64
  d0:	72 e4       	ldi	r23, 0x42	; 66
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	51 d0       	rcall	.+162    	; 0x17a <__divmodsi4>
  d8:	3b bd       	out	0x2b, r19	; 43
  da:	2a bd       	out	0x2a, r18	; 42
  dc:	08 95       	ret

000000de <power_buzzer>:
}

void power_buzzer()
{
	play_buzzer();
  de:	ef df       	rcall	.-34     	; 0xbe <play_buzzer>
	set_buzzer(478); // OCR값을 조금씩 줄여가면서 측정
  e0:	8e ed       	ldi	r24, 0xDE	; 222
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	f0 df       	rcall	.-32     	; 0xc6 <set_buzzer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <power_buzzer+0xe>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <power_buzzer+0x18>
  f6:	00 00       	nop
	_delay_ms(1000);
	set_buzzer(451);
  f8:	83 ec       	ldi	r24, 0xC3	; 195
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	e4 df       	rcall	.-56     	; 0xc6 <set_buzzer>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	83 ed       	ldi	r24, 0xD3	; 211
 102:	90 e3       	ldi	r25, 0x30	; 48
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <power_buzzer+0x26>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <power_buzzer+0x30>
	_delay_ms(1000);
	set_buzzer(426);
 10e:	00 00       	nop
 110:	8a ea       	ldi	r24, 0xAA	; 170
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	d8 df       	rcall	.-80     	; 0xc6 <set_buzzer>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ed       	ldi	r24, 0xD3	; 211
 11a:	90 e3       	ldi	r25, 0x30	; 48
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <power_buzzer+0x3e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <power_buzzer+0x48>
	_delay_ms(1000);
	set_buzzer(402);
 126:	00 00       	nop
 128:	82 e9       	ldi	r24, 0x92	; 146
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	cc df       	rcall	.-104    	; 0xc6 <set_buzzer>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	83 ed       	ldi	r24, 0xD3	; 211
 132:	90 e3       	ldi	r25, 0x30	; 48
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <power_buzzer+0x56>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <power_buzzer+0x60>
	_delay_ms(1000);
	set_buzzer(379);
 13e:	00 00       	nop
 140:	8b e7       	ldi	r24, 0x7B	; 123
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	c0 df       	rcall	.-128    	; 0xc6 <set_buzzer>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	83 ed       	ldi	r24, 0xD3	; 211
 14a:	90 e3       	ldi	r25, 0x30	; 48
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <power_buzzer+0x6e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <power_buzzer+0x78>
	_delay_ms(1000);
	set_buzzer(358);
 156:	00 00       	nop
 158:	86 e6       	ldi	r24, 0x66	; 102
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	b4 df       	rcall	.-152    	; 0xc6 <set_buzzer>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	83 ed       	ldi	r24, 0xD3	; 211
 162:	90 e3       	ldi	r25, 0x30	; 48
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <power_buzzer+0x86>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <power_buzzer+0x90>
	_delay_ms(1000);
	no_buzzer();
 16e:	00 00       	nop
 170:	a2 cf       	rjmp	.-188    	; 0xb6 <no_buzzer>
 172:	08 95       	ret

00000174 <main>:
#include "Buzzer.h"


int main(void)
{
	buzzer_init();
 174:	94 df       	rcall	.-216    	; 0x9e <buzzer_init>
	//DDRB |= (1<<DDRB4);
//
	//
	while (1)
	{
		power_buzzer();
 176:	b3 df       	rcall	.-154    	; 0xde <power_buzzer>
 178:	fe cf       	rjmp	.-4      	; 0x176 <main+0x2>

0000017a <__divmodsi4>:
 17a:	05 2e       	mov	r0, r21
 17c:	97 fb       	bst	r25, 7
 17e:	16 f4       	brtc	.+4      	; 0x184 <__divmodsi4+0xa>
 180:	00 94       	com	r0
 182:	0f d0       	rcall	.+30     	; 0x1a2 <__negsi2>
 184:	57 fd       	sbrc	r21, 7
 186:	05 d0       	rcall	.+10     	; 0x192 <__divmodsi4_neg2>
 188:	14 d0       	rcall	.+40     	; 0x1b2 <__udivmodsi4>
 18a:	07 fc       	sbrc	r0, 7
 18c:	02 d0       	rcall	.+4      	; 0x192 <__divmodsi4_neg2>
 18e:	46 f4       	brtc	.+16     	; 0x1a0 <__divmodsi4_exit>
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <__negsi2>

00000192 <__divmodsi4_neg2>:
 192:	50 95       	com	r21
 194:	40 95       	com	r20
 196:	30 95       	com	r19
 198:	21 95       	neg	r18
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	4f 4f       	sbci	r20, 0xFF	; 255
 19e:	5f 4f       	sbci	r21, 0xFF	; 255

000001a0 <__divmodsi4_exit>:
 1a0:	08 95       	ret

000001a2 <__negsi2>:
 1a2:	90 95       	com	r25
 1a4:	80 95       	com	r24
 1a6:	70 95       	com	r23
 1a8:	61 95       	neg	r22
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	8f 4f       	sbci	r24, 0xFF	; 255
 1ae:	9f 4f       	sbci	r25, 0xFF	; 255
 1b0:	08 95       	ret

000001b2 <__udivmodsi4>:
 1b2:	a1 e2       	ldi	r26, 0x21	; 33
 1b4:	1a 2e       	mov	r1, r26
 1b6:	aa 1b       	sub	r26, r26
 1b8:	bb 1b       	sub	r27, r27
 1ba:	fd 01       	movw	r30, r26
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <__udivmodsi4_ep>

000001be <__udivmodsi4_loop>:
 1be:	aa 1f       	adc	r26, r26
 1c0:	bb 1f       	adc	r27, r27
 1c2:	ee 1f       	adc	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	a2 17       	cp	r26, r18
 1c8:	b3 07       	cpc	r27, r19
 1ca:	e4 07       	cpc	r30, r20
 1cc:	f5 07       	cpc	r31, r21
 1ce:	20 f0       	brcs	.+8      	; 0x1d8 <__udivmodsi4_ep>
 1d0:	a2 1b       	sub	r26, r18
 1d2:	b3 0b       	sbc	r27, r19
 1d4:	e4 0b       	sbc	r30, r20
 1d6:	f5 0b       	sbc	r31, r21

000001d8 <__udivmodsi4_ep>:
 1d8:	66 1f       	adc	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	88 1f       	adc	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	1a 94       	dec	r1
 1e2:	69 f7       	brne	.-38     	; 0x1be <__udivmodsi4_loop>
 1e4:	60 95       	com	r22
 1e6:	70 95       	com	r23
 1e8:	80 95       	com	r24
 1ea:	90 95       	com	r25
 1ec:	9b 01       	movw	r18, r22
 1ee:	ac 01       	movw	r20, r24
 1f0:	bd 01       	movw	r22, r26
 1f2:	cf 01       	movw	r24, r30
 1f4:	08 95       	ret

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
