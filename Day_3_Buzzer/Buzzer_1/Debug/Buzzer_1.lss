
Buzzer_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf2  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000918  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ad  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e d0       	rcall	.+28     	; 0xb6 <main>
  9a:	35 c0       	rjmp	.+106    	; 0x106 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <buzzer_init>:

#include "Buzzer.h"

void buzzer_init()
{
	DDRB |= (1<<DDRB5); // OC1A, OC1B 쓸 거임
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	87 bb       	out	0x17, r24	; 23
	TCCR1B |= (0<<CS12) | (1<<CS11) | (0<<CS10); // 8분주
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (0<<WGM13) | (1<<WGM12); // Wave genetation : CTC mode
  aa:	8e b5       	in	r24, 0x2e	; 46
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (0<<WGM11) | (0<<WGM10);
  b0:	8f b5       	in	r24, 0x2f	; 47
  b2:	8f bd       	out	0x2f, r24	; 47
  b4:	08 95       	ret

000000b6 <main>:
#include "Buzzer.h"


int main(void)
{
	buzzer_init();
  b6:	f3 df       	rcall	.-26     	; 0x9e <buzzer_init>
	DDRC = 0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
	TCCR0 |= (0<<CS02) | (1<<CS01) | (0<<CS00);
  bc:	83 b7       	in	r24, 0x33	; 51
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00);
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	88 64       	ori	r24, 0x48	; 72
  c6:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01) | (0<<COM00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	83 bf       	out	0x33, r24	; 51
	OCR0 = 100;
  ce:	84 e6       	ldi	r24, 0x64	; 100
  d0:	81 bf       	out	0x31, r24	; 49
	DDRB |= (1<<DDRB4);
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	87 bb       	out	0x17, r24	; 23

	
	while (1)
	{
		//power_buzzer();
		PORTC &= ~(1<<PINC5);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	85 bb       	out	0x15, r24	; 21
		PORTC |= (1<<PINC4);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	85 bb       	out	0x15, r24	; 21
		
		OCR0 += 10;
  e4:	81 b7       	in	r24, 0x31	; 49
  e6:	86 5f       	subi	r24, 0xF6	; 246
  e8:	81 bf       	out	0x31, r24	; 49
		if(OCR0 >= 250)
  ea:	81 b7       	in	r24, 0x31	; 49
  ec:	8a 3f       	cpi	r24, 0xFA	; 250
  ee:	08 f0       	brcs	.+2      	; 0xf2 <main+0x3c>
		{
			OCR0 = 0;
  f0:	11 be       	out	0x31, r1	; 49
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	83 ec       	ldi	r24, 0xC3	; 195
  f6:	99 e0       	ldi	r25, 0x09	; 9
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x42>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x4c>
 102:	00 00       	nop
 104:	e9 cf       	rjmp	.-46     	; 0xd8 <main+0x22>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
