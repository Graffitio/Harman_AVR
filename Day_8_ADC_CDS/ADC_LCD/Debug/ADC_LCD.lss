
ADC_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000008b4  00000948  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800116  00800116  0000095e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106b  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afb  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000735  00000000  00000000  00002632  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055d  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057b  00000000  00000000  00003451  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000039cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	df d0       	rcall	.+446    	; 0x282 <main>
  c4:	f5 c3       	rjmp	.+2026   	; 0x8b0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <I2C_Init>:
#include "I2C.h"


void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL) | (1<<I2C_SDA); // 출력 설정
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; // 100KHz
  ce:	88 e4       	ldi	r24, 0x48	; 72
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d4:	08 95       	ret

000000d6 <I2C_Start>:
	// TWBR = 12; // 400KHz
}

void I2C_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // 1을 보내는 것은, S/W적으로 플래그를 Clear해주는 것이다.
  d6:	84 ea       	ldi	r24, 0xA4	; 164
  d8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	                                            // 1 Set하여 인터럽트 발생시키는 것이 아님.
	while(!(TWCR & (1<<TWINT))); // 하드웨어적으로 TWINT 시점을 결정
  dc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  e0:	88 23       	and	r24, r24
  e2:	e4 f7       	brge	.-8      	; 0xdc <I2C_Start+0x6>
	                             // 기다렸다가 조건이 만족되면 while문 수행
}
  e4:	08 95       	ret

000000e6 <I2C_Stop>:

void I2C_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Stop 비트 설정
  e6:	84 e9       	ldi	r24, 0x94	; 148
  e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  ec:	08 95       	ret

000000ee <I2C_TxData>:
}

void I2C_TxData(uint8_t data) // data 1바이트 전송
{
	TWDR = data;
  ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT))); // 전송 완료 대기
  f8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  fc:	88 23       	and	r24, r24
  fe:	e4 f7       	brge	.-8      	; 0xf8 <I2C_TxData+0xa>
}
 100:	08 95       	ret

00000102 <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	d8 2f       	mov	r29, r24
 108:	c6 2f       	mov	r28, r22
	I2C_Start();
 10a:	e5 df       	rcall	.-54     	; 0xd6 <I2C_Start>
	I2C_TxData(devAddrRW); // 읽을 것이냐 쓸 것이냐
 10c:	8d 2f       	mov	r24, r29
 10e:	ef df       	rcall	.-34     	; 0xee <I2C_TxData>
	I2C_TxData(data); // 입/출력할 데이터 보냄
 110:	8c 2f       	mov	r24, r28
 112:	ed df       	rcall	.-38     	; 0xee <I2C_TxData>
	I2C_Stop();
 114:	e8 df       	rcall	.-48     	; 0xe6 <I2C_Stop>
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <LCD_EnablePin>:
 11c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <__data_end>
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 120:	6b 7f       	andi	r22, 0xFB	; 251
 122:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 126:	8e e4       	ldi	r24, 0x4E	; 78
 128:	ec df       	rcall	.-40     	; 0x102 <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E); // High 설정
 12a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <__data_end>
 12e:	64 60       	ori	r22, 0x04	; 4
 130:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 134:	8e e4       	ldi	r24, 0x4E	; 78
 136:	e5 df       	rcall	.-54     	; 0x102 <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 138:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <__data_end>
 13c:	6b 7f       	andi	r22, 0xFB	; 251
 13e:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 142:	8e e4       	ldi	r24, 0x4E	; 78
 144:	de df       	rcall	.-68     	; 0x102 <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	98 e1       	ldi	r25, 0x18	; 24
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_EnablePin+0x2e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_EnablePin+0x34>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0); // 상위 4bit 출력
 158:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	9c 2f       	mov	r25, r28
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	89 2b       	or	r24, r25
 164:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	// 이전 상위 비트는 다 날라감 | data의 상위 비트는 살림 
	LCD_EnablePin();
 168:	d9 df       	rcall	.-78     	; 0x11c <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f)<<4); // 하위 4bit
 16a:	20 e1       	ldi	r18, 0x10	; 16
 16c:	c2 9f       	mul	r28, r18
 16e:	c0 01       	movw	r24, r0
 170:	11 24       	eor	r1, r1
 172:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <__data_end>
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	89 2b       	or	r24, r25
 17a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	LCD_EnablePin();
 17e:	ce df       	rcall	.-100    	; 0x11c <LCD_EnablePin>
	// 상위 4bit 받고 -> Enable해서 출력하고 -> 하위 4bit 받고 상위로 시프트하고 -> Enabla해서 출력하고
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commandData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS); // Command일 때는 control register(TWCR)을 쓰고
 184:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <__data_end>
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 188:	9c 7f       	andi	r25, 0xFC	; 252
 18a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__data_end>
	LCD_Data4bit(commandData);
 18e:	e2 cf       	rjmp	.-60     	; 0x154 <LCD_Data4bit>
 190:	08 95       	ret

00000192 <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)
{
	I2C_LCD_Data |= (1<<LCD_RS); // Data받을 때는 Data Register(TWDR) 쓰고
 192:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <__data_end>
 196:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 198:	9d 7f       	andi	r25, 0xFD	; 253
 19a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__data_end>
	LCD_Data4bit(charData);
 19e:	da cf       	rjmp	.-76     	; 0x154 <LCD_Data4bit>
 1a0:	08 95       	ret

000001a2 <LCD_BackLight>:
}


void LCD_BackLight()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);
 1a2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <__data_end>
 1a6:	68 60       	ori	r22, 0x08	; 8
 1a8:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 1ac:	8e e4       	ldi	r24, 0x4E	; 78
 1ae:	a9 cf       	rjmp	.-174    	; 0x102 <I2C_TxByte>
 1b0:	08 95       	ret

000001b2 <LCD_gotoXY>:
}

void LCD_gotoXY(uint8_t row, uint8_t col) // LCD 화면의 커서를 지정된 행(row)과 열(col) 위치로 이동시키는 함수
{
	col %= 16; // 0~15 사이의 값 지정 가능
 1b2:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2; // 0~1 사이의 값 지정 가능
 1b4:	81 70       	andi	r24, 0x01	; 1
	uint8_t address = (0x40 * row) + col; // 주어진 row와 col 값을 이용하여 LCD 화면의 주소(address, 커서 위치)룰 계산한다.
 1b6:	90 e4       	ldi	r25, 0x40	; 64
 1b8:	89 9f       	mul	r24, r25
 1ba:	60 0d       	add	r22, r0
 1bc:	11 24       	eor	r1, r1
 1be:	86 2f       	mov	r24, r22
	// 두 번째 행(row 1)의 주소 범위는 0x40 ~ 0x4f(64~79)
	// 예시 : row 1, col 3 -> address = 0x43
	uint8_t command = 0x80 + address; // 계산된 주소를 이용하여 이동시키는 명령어 command 생성
	// 0x80을 사용하는 이유는 특정 주소값이 아닌, 첫 번째 행의 시작을 나타내는 상징적인 값으로 사용된다,
	// 이렇게 함으로써 코드의 가독성을 높이고, 행과 열 값을 쉽게 결합하여 원하는 주소 값을 계산할 수 있다.
	LCD_WriteCommand(command);
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	e0 cf       	rjmp	.-64     	; 0x184 <LCD_WriteCommand>
 1c4:	08 95       	ret

000001c6 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	8c 01       	movw	r16, r24
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 1d2:	df df       	rcall	.-66     	; 0x192 <LCD_WriteData>
	LCD_WriteCommand(command);
}

void LCD_WriteString(char *string)
{
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 1d4:	cf 5f       	subi	r28, 0xFF	; 255
 1d6:	f8 01       	movw	r30, r16
 1d8:	ec 0f       	add	r30, r28
 1da:	f1 1d       	adc	r31, r1
 1dc:	80 81       	ld	r24, Z
 1de:	81 11       	cpse	r24, r1
 1e0:	f8 cf       	rjmp	.-16     	; 0x1d2 <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col); // 행과 열의 위치를 받음. -> 어디서부터 쓸 것인지를 좌표를 받음
 1f0:	e0 df       	rcall	.-64     	; 0x1b2 <LCD_gotoXY>
	LCD_WriteString(string); // 문자열 입력을 받음
 1f2:	ce 01       	movw	r24, r28
 1f4:	e8 df       	rcall	.-48     	; 0x1c6 <LCD_WriteString>
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 1fc:	65 df       	rcall	.-310    	; 0xc8 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	89 ef       	ldi	r24, 0xF9	; 249
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <LCD_Init+0x8>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_Init+0x12>
 20e:	00 00       	nop
	
	_delay_ms(20);
	LCD_WriteCommand(0x03);
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	b8 df       	rcall	.-144    	; 0x184 <LCD_WriteCommand>
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	9c e9       	ldi	r25, 0x9C	; 156
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Init+0x1c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 21e:	00 00       	nop
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	b0 df       	rcall	.-160    	; 0x184 <LCD_WriteCommand>
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	9f e0       	ldi	r25, 0x0F	; 15
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x2c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 22e:	00 00       	nop
 230:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 232:	a8 df       	rcall	.-176    	; 0x184 <LCD_WriteCommand>
 234:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 236:	a6 df       	rcall	.-180    	; 0x184 <LCD_WriteCommand>
 238:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 23a:	a4 df       	rcall	.-184    	; 0x184 <LCD_WriteCommand>
 23c:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 23e:	a2 df       	rcall	.-188    	; 0x184 <LCD_WriteCommand>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	a0 df       	rcall	.-192    	; 0x184 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	9e df       	rcall	.-196    	; 0x184 <LCD_WriteCommand>
 248:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 24a:	9c df       	rcall	.-200    	; 0x184 <LCD_WriteCommand>
 24c:	aa cf       	rjmp	.-172    	; 0x1a2 <LCD_BackLight>
 24e:	08 95       	ret

00000250 <ADC_Init>:

#include "I2C_LCD.h"

void ADC_Init()
{
	ADMUX |= (1<<REFS0); // AVCC 기준 전압 설정
 250:	87 b1       	in	r24, 0x07	; 7
 252:	80 64       	ori	r24, 0x40	; 64
 254:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // 분주비 : 128
 256:	86 b1       	in	r24, 0x06	; 6
 258:	87 60       	ori	r24, 0x07	; 7
 25a:	86 b9       	out	0x06, r24	; 6
	// ADCSRA |= 0x07; // 이렇게 써줘도 됨
	ADCSRA |= (1<<ADEN); // ADC 활성화
 25c:	86 b1       	in	r24, 0x06	; 6
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	86 b9       	out	0x06, r24	; 6
	ADCSRA &= ~(1<<ADFR); // 단일 running mode
 262:	86 b1       	in	r24, 0x06	; 6
 264:	8f 7d       	andi	r24, 0xDF	; 223
 266:	86 b9       	out	0x06, r24	; 6
 268:	08 95       	ret

0000026a <read_ADC>:
}

int read_ADC(uint8_t channel)
{
	ADMUX = ((ADMUX & 0xE0) | channel); // 단일 입력 채널 선택
 26a:	97 b1       	in	r25, 0x07	; 7
 26c:	90 7e       	andi	r25, 0xE0	; 224
 26e:	89 2b       	or	r24, r25
 270:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); // 변환 시작
 272:	86 b1       	in	r24, 0x06	; 6
 274:	80 64       	ori	r24, 0x40	; 64
 276:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF))); // 변환 종료 대기
 278:	34 9b       	sbis	0x06, 4	; 6
 27a:	fe cf       	rjmp	.-4      	; 0x278 <read_ADC+0xe>
	
	return ADC; // 10 bit값 변환
 27c:	84 b1       	in	r24, 0x04	; 4
 27e:	95 b1       	in	r25, 0x05	; 5
}
 280:	08 95       	ret

00000282 <main>:


int main(void)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	6e 97       	sbiw	r28, 0x1e	; 30
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
	int read;
	char buff[30];
	
	ADC_Init();
 296:	dc df       	rcall	.-72     	; 0x250 <ADC_Init>
	LCD_Init();
 298:	b1 df       	rcall	.-158    	; 0x1fc <LCD_Init>
	
	while (1)
	{
		read = read_ADC(0);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	e6 df       	rcall	.-52     	; 0x26a <read_ADC>
 29e:	9f 93       	push	r25
		sprintf(buff, "CDS : %-5d", read);
 2a0:	8f 93       	push	r24
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	9f 93       	push	r25
 2a8:	8f 93       	push	r24
 2aa:	8e 01       	movw	r16, r28
 2ac:	0f 5f       	subi	r16, 0xFF	; 255
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	1f 93       	push	r17
 2b2:	0f 93       	push	r16
 2b4:	22 d0       	rcall	.+68     	; 0x2fa <sprintf>
 2b6:	a8 01       	movw	r20, r16
		LCD_WriteStringXY(0, 0, buff);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	96 df       	rcall	.-212    	; 0x1ea <LCD_WriteStringXY>
 2be:	81 e0       	ldi	r24, 0x01	; 1
		read = read_ADC(1);
 2c0:	d4 df       	rcall	.-88     	; 0x26a <read_ADC>
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
		sprintf(buff, "REG : %-5d", read);
 2c6:	8b e0       	ldi	r24, 0x0B	; 11
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	9f 93       	push	r25
 2cc:	8f 93       	push	r24
 2ce:	1f 93       	push	r17
 2d0:	0f 93       	push	r16
 2d2:	13 d0       	rcall	.+38     	; 0x2fa <sprintf>
 2d4:	a8 01       	movw	r20, r16
		LCD_WriteStringXY(1, 0, buff);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	87 df       	rcall	.-242    	; 0x1ea <LCD_WriteStringXY>
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	83 ed       	ldi	r24, 0xD3	; 211
 2e0:	90 e3       	ldi	r25, 0x30	; 48
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x60>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x6a>
 2ec:	00 00       	nop
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	d0 cf       	rjmp	.-96     	; 0x29a <main+0x18>

000002fa <sprintf>:
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	2e 97       	sbiw	r28, 0x0e	; 14
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
 312:	0d 89       	ldd	r16, Y+21	; 0x15
 314:	1e 89       	ldd	r17, Y+22	; 0x16
 316:	86 e0       	ldi	r24, 0x06	; 6
 318:	8c 83       	std	Y+4, r24	; 0x04
 31a:	1a 83       	std	Y+2, r17	; 0x02
 31c:	09 83       	std	Y+1, r16	; 0x01
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	9f e7       	ldi	r25, 0x7F	; 127
 322:	9e 83       	std	Y+6, r25	; 0x06
 324:	8d 83       	std	Y+5, r24	; 0x05
 326:	ae 01       	movw	r20, r28
 328:	47 5e       	subi	r20, 0xE7	; 231
 32a:	5f 4f       	sbci	r21, 0xFF	; 255
 32c:	6f 89       	ldd	r22, Y+23	; 0x17
 32e:	78 8d       	ldd	r23, Y+24	; 0x18
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	10 d0       	rcall	.+32     	; 0x356 <vfprintf>
 336:	ef 81       	ldd	r30, Y+7	; 0x07
 338:	f8 85       	ldd	r31, Y+8	; 0x08
 33a:	e0 0f       	add	r30, r16
 33c:	f1 1f       	adc	r31, r17
 33e:	10 82       	st	Z, r1
 340:	2e 96       	adiw	r28, 0x0e	; 14
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <vfprintf>:
 356:	2f 92       	push	r2
 358:	3f 92       	push	r3
 35a:	4f 92       	push	r4
 35c:	5f 92       	push	r5
 35e:	6f 92       	push	r6
 360:	7f 92       	push	r7
 362:	8f 92       	push	r8
 364:	9f 92       	push	r9
 366:	af 92       	push	r10
 368:	bf 92       	push	r11
 36a:	cf 92       	push	r12
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	2b 97       	sbiw	r28, 0x0b	; 11
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
 38a:	6c 01       	movw	r12, r24
 38c:	7b 01       	movw	r14, r22
 38e:	8a 01       	movw	r16, r20
 390:	fc 01       	movw	r30, r24
 392:	17 82       	std	Z+7, r1	; 0x07
 394:	16 82       	std	Z+6, r1	; 0x06
 396:	83 81       	ldd	r24, Z+3	; 0x03
 398:	81 ff       	sbrs	r24, 1
 39a:	bf c1       	rjmp	.+894    	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
 39c:	ce 01       	movw	r24, r28
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	3c 01       	movw	r6, r24
 3a2:	f6 01       	movw	r30, r12
 3a4:	93 81       	ldd	r25, Z+3	; 0x03
 3a6:	f7 01       	movw	r30, r14
 3a8:	93 fd       	sbrc	r25, 3
 3aa:	85 91       	lpm	r24, Z+
 3ac:	93 ff       	sbrs	r25, 3
 3ae:	81 91       	ld	r24, Z+
 3b0:	7f 01       	movw	r14, r30
 3b2:	88 23       	and	r24, r24
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <vfprintf+0x62>
 3b6:	ad c1       	rjmp	.+858    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 3b8:	85 32       	cpi	r24, 0x25	; 37
 3ba:	39 f4       	brne	.+14     	; 0x3ca <vfprintf+0x74>
 3bc:	93 fd       	sbrc	r25, 3
 3be:	85 91       	lpm	r24, Z+
 3c0:	93 ff       	sbrs	r25, 3
 3c2:	81 91       	ld	r24, Z+
 3c4:	7f 01       	movw	r14, r30
 3c6:	85 32       	cpi	r24, 0x25	; 37
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <vfprintf+0x7c>
 3ca:	b6 01       	movw	r22, r12
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	d6 d1       	rcall	.+940    	; 0x77c <fputc>
 3d0:	e8 cf       	rjmp	.-48     	; 0x3a2 <vfprintf+0x4c>
 3d2:	91 2c       	mov	r9, r1
 3d4:	21 2c       	mov	r2, r1
 3d6:	31 2c       	mov	r3, r1
 3d8:	ff e1       	ldi	r31, 0x1F	; 31
 3da:	f3 15       	cp	r31, r3
 3dc:	d8 f0       	brcs	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3de:	8b 32       	cpi	r24, 0x2B	; 43
 3e0:	79 f0       	breq	.+30     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e2:	38 f4       	brcc	.+14     	; 0x3f2 <vfprintf+0x9c>
 3e4:	80 32       	cpi	r24, 0x20	; 32
 3e6:	79 f0       	breq	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e8:	83 32       	cpi	r24, 0x23	; 35
 3ea:	a1 f4       	brne	.+40     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ec:	23 2d       	mov	r18, r3
 3ee:	20 61       	ori	r18, 0x10	; 16
 3f0:	1d c0       	rjmp	.+58     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3f2:	8d 32       	cpi	r24, 0x2D	; 45
 3f4:	61 f0       	breq	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f6:	80 33       	cpi	r24, 0x30	; 48
 3f8:	69 f4       	brne	.+26     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3fa:	23 2d       	mov	r18, r3
 3fc:	21 60       	ori	r18, 0x01	; 1
 3fe:	16 c0       	rjmp	.+44     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 400:	83 2d       	mov	r24, r3
 402:	82 60       	ori	r24, 0x02	; 2
 404:	38 2e       	mov	r3, r24
 406:	e3 2d       	mov	r30, r3
 408:	e4 60       	ori	r30, 0x04	; 4
 40a:	3e 2e       	mov	r3, r30
 40c:	2a c0       	rjmp	.+84     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 40e:	f3 2d       	mov	r31, r3
 410:	f8 60       	ori	r31, 0x08	; 8
 412:	1d c0       	rjmp	.+58     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 414:	37 fc       	sbrc	r3, 7
 416:	2d c0       	rjmp	.+90     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 418:	20 ed       	ldi	r18, 0xD0	; 208
 41a:	28 0f       	add	r18, r24
 41c:	2a 30       	cpi	r18, 0x0A	; 10
 41e:	40 f0       	brcs	.+16     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 420:	8e 32       	cpi	r24, 0x2E	; 46
 422:	b9 f4       	brne	.+46     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 424:	36 fc       	sbrc	r3, 6
 426:	75 c1       	rjmp	.+746    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 428:	23 2d       	mov	r18, r3
 42a:	20 64       	ori	r18, 0x40	; 64
 42c:	32 2e       	mov	r3, r18
 42e:	19 c0       	rjmp	.+50     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 430:	36 fe       	sbrs	r3, 6
 432:	06 c0       	rjmp	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 434:	8a e0       	ldi	r24, 0x0A	; 10
 436:	98 9e       	mul	r9, r24
 438:	20 0d       	add	r18, r0
 43a:	11 24       	eor	r1, r1
 43c:	92 2e       	mov	r9, r18
 43e:	11 c0       	rjmp	.+34     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 440:	ea e0       	ldi	r30, 0x0A	; 10
 442:	2e 9e       	mul	r2, r30
 444:	20 0d       	add	r18, r0
 446:	11 24       	eor	r1, r1
 448:	22 2e       	mov	r2, r18
 44a:	f3 2d       	mov	r31, r3
 44c:	f0 62       	ori	r31, 0x20	; 32
 44e:	3f 2e       	mov	r3, r31
 450:	08 c0       	rjmp	.+16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 452:	8c 36       	cpi	r24, 0x6C	; 108
 454:	21 f4       	brne	.+8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 456:	83 2d       	mov	r24, r3
 458:	80 68       	ori	r24, 0x80	; 128
 45a:	38 2e       	mov	r3, r24
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	88 36       	cpi	r24, 0x68	; 104
 460:	41 f4       	brne	.+16     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 462:	f7 01       	movw	r30, r14
 464:	93 fd       	sbrc	r25, 3
 466:	85 91       	lpm	r24, Z+
 468:	93 ff       	sbrs	r25, 3
 46a:	81 91       	ld	r24, Z+
 46c:	7f 01       	movw	r14, r30
 46e:	81 11       	cpse	r24, r1
 470:	b3 cf       	rjmp	.-154    	; 0x3d8 <vfprintf+0x82>
 472:	98 2f       	mov	r25, r24
 474:	9f 7d       	andi	r25, 0xDF	; 223
 476:	95 54       	subi	r25, 0x45	; 69
 478:	93 30       	cpi	r25, 0x03	; 3
 47a:	28 f4       	brcc	.+10     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 47c:	0c 5f       	subi	r16, 0xFC	; 252
 47e:	1f 4f       	sbci	r17, 0xFF	; 255
 480:	9f e3       	ldi	r25, 0x3F	; 63
 482:	99 83       	std	Y+1, r25	; 0x01
 484:	0d c0       	rjmp	.+26     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 486:	83 36       	cpi	r24, 0x63	; 99
 488:	31 f0       	breq	.+12     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 48a:	83 37       	cpi	r24, 0x73	; 115
 48c:	71 f0       	breq	.+28     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 48e:	83 35       	cpi	r24, 0x53	; 83
 490:	09 f0       	breq	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	55 c0       	rjmp	.+170    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 494:	20 c0       	rjmp	.+64     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 496:	f8 01       	movw	r30, r16
 498:	80 81       	ld	r24, Z
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	0e 5f       	subi	r16, 0xFE	; 254
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	88 24       	eor	r8, r8
 4a2:	83 94       	inc	r8
 4a4:	91 2c       	mov	r9, r1
 4a6:	53 01       	movw	r10, r6
 4a8:	12 c0       	rjmp	.+36     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4aa:	28 01       	movw	r4, r16
 4ac:	f2 e0       	ldi	r31, 0x02	; 2
 4ae:	4f 0e       	add	r4, r31
 4b0:	51 1c       	adc	r5, r1
 4b2:	f8 01       	movw	r30, r16
 4b4:	a0 80       	ld	r10, Z
 4b6:	b1 80       	ldd	r11, Z+1	; 0x01
 4b8:	36 fe       	sbrs	r3, 6
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4bc:	69 2d       	mov	r22, r9
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c2:	6f ef       	ldi	r22, 0xFF	; 255
 4c4:	7f ef       	ldi	r23, 0xFF	; 255
 4c6:	c5 01       	movw	r24, r10
 4c8:	4e d1       	rcall	.+668    	; 0x766 <strnlen>
 4ca:	4c 01       	movw	r8, r24
 4cc:	82 01       	movw	r16, r4
 4ce:	f3 2d       	mov	r31, r3
 4d0:	ff 77       	andi	r31, 0x7F	; 127
 4d2:	3f 2e       	mov	r3, r31
 4d4:	15 c0       	rjmp	.+42     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4d6:	28 01       	movw	r4, r16
 4d8:	22 e0       	ldi	r18, 0x02	; 2
 4da:	42 0e       	add	r4, r18
 4dc:	51 1c       	adc	r5, r1
 4de:	f8 01       	movw	r30, r16
 4e0:	a0 80       	ld	r10, Z
 4e2:	b1 80       	ldd	r11, Z+1	; 0x01
 4e4:	36 fe       	sbrs	r3, 6
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4e8:	69 2d       	mov	r22, r9
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ee:	6f ef       	ldi	r22, 0xFF	; 255
 4f0:	7f ef       	ldi	r23, 0xFF	; 255
 4f2:	c5 01       	movw	r24, r10
 4f4:	2d d1       	rcall	.+602    	; 0x750 <strnlen_P>
 4f6:	4c 01       	movw	r8, r24
 4f8:	f3 2d       	mov	r31, r3
 4fa:	f0 68       	ori	r31, 0x80	; 128
 4fc:	3f 2e       	mov	r3, r31
 4fe:	82 01       	movw	r16, r4
 500:	33 fc       	sbrc	r3, 3
 502:	19 c0       	rjmp	.+50     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 504:	82 2d       	mov	r24, r2
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	88 16       	cp	r8, r24
 50a:	99 06       	cpc	r9, r25
 50c:	a0 f4       	brcc	.+40     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 50e:	b6 01       	movw	r22, r12
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	33 d1       	rcall	.+614    	; 0x77c <fputc>
 516:	2a 94       	dec	r2
 518:	f5 cf       	rjmp	.-22     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 51a:	f5 01       	movw	r30, r10
 51c:	37 fc       	sbrc	r3, 7
 51e:	85 91       	lpm	r24, Z+
 520:	37 fe       	sbrs	r3, 7
 522:	81 91       	ld	r24, Z+
 524:	5f 01       	movw	r10, r30
 526:	b6 01       	movw	r22, r12
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	28 d1       	rcall	.+592    	; 0x77c <fputc>
 52c:	21 10       	cpse	r2, r1
 52e:	2a 94       	dec	r2
 530:	21 e0       	ldi	r18, 0x01	; 1
 532:	82 1a       	sub	r8, r18
 534:	91 08       	sbc	r9, r1
 536:	81 14       	cp	r8, r1
 538:	91 04       	cpc	r9, r1
 53a:	79 f7       	brne	.-34     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 53c:	e1 c0       	rjmp	.+450    	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 53e:	84 36       	cpi	r24, 0x64	; 100
 540:	11 f0       	breq	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 542:	89 36       	cpi	r24, 0x69	; 105
 544:	39 f5       	brne	.+78     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 546:	f8 01       	movw	r30, r16
 548:	37 fe       	sbrs	r3, 7
 54a:	07 c0       	rjmp	.+14     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 54c:	60 81       	ld	r22, Z
 54e:	71 81       	ldd	r23, Z+1	; 0x01
 550:	82 81       	ldd	r24, Z+2	; 0x02
 552:	93 81       	ldd	r25, Z+3	; 0x03
 554:	0c 5f       	subi	r16, 0xFC	; 252
 556:	1f 4f       	sbci	r17, 0xFF	; 255
 558:	08 c0       	rjmp	.+16     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 55a:	60 81       	ld	r22, Z
 55c:	71 81       	ldd	r23, Z+1	; 0x01
 55e:	07 2e       	mov	r0, r23
 560:	00 0c       	add	r0, r0
 562:	88 0b       	sbc	r24, r24
 564:	99 0b       	sbc	r25, r25
 566:	0e 5f       	subi	r16, 0xFE	; 254
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	f3 2d       	mov	r31, r3
 56c:	ff 76       	andi	r31, 0x6F	; 111
 56e:	3f 2e       	mov	r3, r31
 570:	97 ff       	sbrs	r25, 7
 572:	09 c0       	rjmp	.+18     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 574:	90 95       	com	r25
 576:	80 95       	com	r24
 578:	70 95       	com	r23
 57a:	61 95       	neg	r22
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	8f 4f       	sbci	r24, 0xFF	; 255
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	f0 68       	ori	r31, 0x80	; 128
 584:	3f 2e       	mov	r3, r31
 586:	2a e0       	ldi	r18, 0x0A	; 10
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	a3 01       	movw	r20, r6
 58c:	33 d1       	rcall	.+614    	; 0x7f4 <__ultoa_invert>
 58e:	88 2e       	mov	r8, r24
 590:	86 18       	sub	r8, r6
 592:	44 c0       	rjmp	.+136    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 594:	85 37       	cpi	r24, 0x75	; 117
 596:	31 f4       	brne	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 598:	23 2d       	mov	r18, r3
 59a:	2f 7e       	andi	r18, 0xEF	; 239
 59c:	b2 2e       	mov	r11, r18
 59e:	2a e0       	ldi	r18, 0x0A	; 10
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	25 c0       	rjmp	.+74     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5a4:	93 2d       	mov	r25, r3
 5a6:	99 7f       	andi	r25, 0xF9	; 249
 5a8:	b9 2e       	mov	r11, r25
 5aa:	8f 36       	cpi	r24, 0x6F	; 111
 5ac:	c1 f0       	breq	.+48     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5ae:	18 f4       	brcc	.+6      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5b0:	88 35       	cpi	r24, 0x58	; 88
 5b2:	79 f0       	breq	.+30     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5b4:	ae c0       	rjmp	.+348    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 5b6:	80 37       	cpi	r24, 0x70	; 112
 5b8:	19 f0       	breq	.+6      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5ba:	88 37       	cpi	r24, 0x78	; 120
 5bc:	21 f0       	breq	.+8      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5be:	a9 c0       	rjmp	.+338    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 5c0:	e9 2f       	mov	r30, r25
 5c2:	e0 61       	ori	r30, 0x10	; 16
 5c4:	be 2e       	mov	r11, r30
 5c6:	b4 fe       	sbrs	r11, 4
 5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5ca:	fb 2d       	mov	r31, r11
 5cc:	f4 60       	ori	r31, 0x04	; 4
 5ce:	bf 2e       	mov	r11, r31
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5d2:	34 fe       	sbrs	r3, 4
 5d4:	0a c0       	rjmp	.+20     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5d6:	29 2f       	mov	r18, r25
 5d8:	26 60       	ori	r18, 0x06	; 6
 5da:	b2 2e       	mov	r11, r18
 5dc:	06 c0       	rjmp	.+12     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5de:	28 e0       	ldi	r18, 0x08	; 8
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5e4:	20 e1       	ldi	r18, 0x10	; 16
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5ea:	20 e1       	ldi	r18, 0x10	; 16
 5ec:	32 e0       	ldi	r19, 0x02	; 2
 5ee:	f8 01       	movw	r30, r16
 5f0:	b7 fe       	sbrs	r11, 7
 5f2:	07 c0       	rjmp	.+14     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5f4:	60 81       	ld	r22, Z
 5f6:	71 81       	ldd	r23, Z+1	; 0x01
 5f8:	82 81       	ldd	r24, Z+2	; 0x02
 5fa:	93 81       	ldd	r25, Z+3	; 0x03
 5fc:	0c 5f       	subi	r16, 0xFC	; 252
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
 600:	06 c0       	rjmp	.+12     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 602:	60 81       	ld	r22, Z
 604:	71 81       	ldd	r23, Z+1	; 0x01
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 5f       	subi	r16, 0xFE	; 254
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	a3 01       	movw	r20, r6
 610:	f1 d0       	rcall	.+482    	; 0x7f4 <__ultoa_invert>
 612:	88 2e       	mov	r8, r24
 614:	86 18       	sub	r8, r6
 616:	fb 2d       	mov	r31, r11
 618:	ff 77       	andi	r31, 0x7F	; 127
 61a:	3f 2e       	mov	r3, r31
 61c:	36 fe       	sbrs	r3, 6
 61e:	0d c0       	rjmp	.+26     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 620:	23 2d       	mov	r18, r3
 622:	2e 7f       	andi	r18, 0xFE	; 254
 624:	a2 2e       	mov	r10, r18
 626:	89 14       	cp	r8, r9
 628:	58 f4       	brcc	.+22     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 62a:	34 fe       	sbrs	r3, 4
 62c:	0b c0       	rjmp	.+22     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 62e:	32 fc       	sbrc	r3, 2
 630:	09 c0       	rjmp	.+18     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 632:	83 2d       	mov	r24, r3
 634:	8e 7e       	andi	r24, 0xEE	; 238
 636:	a8 2e       	mov	r10, r24
 638:	05 c0       	rjmp	.+10     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 63a:	b8 2c       	mov	r11, r8
 63c:	a3 2c       	mov	r10, r3
 63e:	03 c0       	rjmp	.+6      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 640:	b8 2c       	mov	r11, r8
 642:	01 c0       	rjmp	.+2      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 644:	b9 2c       	mov	r11, r9
 646:	a4 fe       	sbrs	r10, 4
 648:	0f c0       	rjmp	.+30     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 64a:	fe 01       	movw	r30, r28
 64c:	e8 0d       	add	r30, r8
 64e:	f1 1d       	adc	r31, r1
 650:	80 81       	ld	r24, Z
 652:	80 33       	cpi	r24, 0x30	; 48
 654:	21 f4       	brne	.+8      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 656:	9a 2d       	mov	r25, r10
 658:	99 7e       	andi	r25, 0xE9	; 233
 65a:	a9 2e       	mov	r10, r25
 65c:	09 c0       	rjmp	.+18     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 65e:	a2 fe       	sbrs	r10, 2
 660:	06 c0       	rjmp	.+12     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 662:	b3 94       	inc	r11
 664:	b3 94       	inc	r11
 666:	04 c0       	rjmp	.+8      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 668:	8a 2d       	mov	r24, r10
 66a:	86 78       	andi	r24, 0x86	; 134
 66c:	09 f0       	breq	.+2      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 66e:	b3 94       	inc	r11
 670:	a3 fc       	sbrc	r10, 3
 672:	10 c0       	rjmp	.+32     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 674:	a0 fe       	sbrs	r10, 0
 676:	06 c0       	rjmp	.+12     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 678:	b2 14       	cp	r11, r2
 67a:	80 f4       	brcc	.+32     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 67c:	28 0c       	add	r2, r8
 67e:	92 2c       	mov	r9, r2
 680:	9b 18       	sub	r9, r11
 682:	0d c0       	rjmp	.+26     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 684:	b2 14       	cp	r11, r2
 686:	58 f4       	brcc	.+22     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 688:	b6 01       	movw	r22, r12
 68a:	80 e2       	ldi	r24, 0x20	; 32
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	76 d0       	rcall	.+236    	; 0x77c <fputc>
 690:	b3 94       	inc	r11
 692:	f8 cf       	rjmp	.-16     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 694:	b2 14       	cp	r11, r2
 696:	18 f4       	brcc	.+6      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 698:	2b 18       	sub	r2, r11
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 69c:	98 2c       	mov	r9, r8
 69e:	21 2c       	mov	r2, r1
 6a0:	a4 fe       	sbrs	r10, 4
 6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6a4:	b6 01       	movw	r22, r12
 6a6:	80 e3       	ldi	r24, 0x30	; 48
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	68 d0       	rcall	.+208    	; 0x77c <fputc>
 6ac:	a2 fe       	sbrs	r10, 2
 6ae:	16 c0       	rjmp	.+44     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6b0:	a1 fc       	sbrc	r10, 1
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 6b4:	88 e7       	ldi	r24, 0x78	; 120
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 6ba:	88 e5       	ldi	r24, 0x58	; 88
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	b6 01       	movw	r22, r12
 6c0:	0c c0       	rjmp	.+24     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6c2:	8a 2d       	mov	r24, r10
 6c4:	86 78       	andi	r24, 0x86	; 134
 6c6:	51 f0       	breq	.+20     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6c8:	a1 fe       	sbrs	r10, 1
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6cc:	8b e2       	ldi	r24, 0x2B	; 43
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6d0:	80 e2       	ldi	r24, 0x20	; 32
 6d2:	a7 fc       	sbrc	r10, 7
 6d4:	8d e2       	ldi	r24, 0x2D	; 45
 6d6:	b6 01       	movw	r22, r12
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	50 d0       	rcall	.+160    	; 0x77c <fputc>
 6dc:	89 14       	cp	r8, r9
 6de:	30 f4       	brcc	.+12     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6e0:	b6 01       	movw	r22, r12
 6e2:	80 e3       	ldi	r24, 0x30	; 48
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	4a d0       	rcall	.+148    	; 0x77c <fputc>
 6e8:	9a 94       	dec	r9
 6ea:	f8 cf       	rjmp	.-16     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6ec:	8a 94       	dec	r8
 6ee:	f3 01       	movw	r30, r6
 6f0:	e8 0d       	add	r30, r8
 6f2:	f1 1d       	adc	r31, r1
 6f4:	80 81       	ld	r24, Z
 6f6:	b6 01       	movw	r22, r12
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	40 d0       	rcall	.+128    	; 0x77c <fputc>
 6fc:	81 10       	cpse	r8, r1
 6fe:	f6 cf       	rjmp	.-20     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 700:	22 20       	and	r2, r2
 702:	09 f4       	brne	.+2      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 704:	4e ce       	rjmp	.-868    	; 0x3a2 <vfprintf+0x4c>
 706:	b6 01       	movw	r22, r12
 708:	80 e2       	ldi	r24, 0x20	; 32
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	37 d0       	rcall	.+110    	; 0x77c <fputc>
 70e:	2a 94       	dec	r2
 710:	f7 cf       	rjmp	.-18     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 712:	f6 01       	movw	r30, r12
 714:	86 81       	ldd	r24, Z+6	; 0x06
 716:	97 81       	ldd	r25, Z+7	; 0x07
 718:	02 c0       	rjmp	.+4      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 71e:	2b 96       	adiw	r28, 0x0b	; 11
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
 73a:	bf 90       	pop	r11
 73c:	af 90       	pop	r10
 73e:	9f 90       	pop	r9
 740:	8f 90       	pop	r8
 742:	7f 90       	pop	r7
 744:	6f 90       	pop	r6
 746:	5f 90       	pop	r5
 748:	4f 90       	pop	r4
 74a:	3f 90       	pop	r3
 74c:	2f 90       	pop	r2
 74e:	08 95       	ret

00000750 <strnlen_P>:
 750:	fc 01       	movw	r30, r24
 752:	05 90       	lpm	r0, Z+
 754:	61 50       	subi	r22, 0x01	; 1
 756:	70 40       	sbci	r23, 0x00	; 0
 758:	01 10       	cpse	r0, r1
 75a:	d8 f7       	brcc	.-10     	; 0x752 <strnlen_P+0x2>
 75c:	80 95       	com	r24
 75e:	90 95       	com	r25
 760:	8e 0f       	add	r24, r30
 762:	9f 1f       	adc	r25, r31
 764:	08 95       	ret

00000766 <strnlen>:
 766:	fc 01       	movw	r30, r24
 768:	61 50       	subi	r22, 0x01	; 1
 76a:	70 40       	sbci	r23, 0x00	; 0
 76c:	01 90       	ld	r0, Z+
 76e:	01 10       	cpse	r0, r1
 770:	d8 f7       	brcc	.-10     	; 0x768 <strnlen+0x2>
 772:	80 95       	com	r24
 774:	90 95       	com	r25
 776:	8e 0f       	add	r24, r30
 778:	9f 1f       	adc	r25, r31
 77a:	08 95       	ret

0000077c <fputc>:
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	fb 01       	movw	r30, r22
 786:	23 81       	ldd	r18, Z+3	; 0x03
 788:	21 fd       	sbrc	r18, 1
 78a:	03 c0       	rjmp	.+6      	; 0x792 <fputc+0x16>
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	9f ef       	ldi	r25, 0xFF	; 255
 790:	2c c0       	rjmp	.+88     	; 0x7ea <fputc+0x6e>
 792:	22 ff       	sbrs	r18, 2
 794:	16 c0       	rjmp	.+44     	; 0x7c2 <fputc+0x46>
 796:	46 81       	ldd	r20, Z+6	; 0x06
 798:	57 81       	ldd	r21, Z+7	; 0x07
 79a:	24 81       	ldd	r18, Z+4	; 0x04
 79c:	35 81       	ldd	r19, Z+5	; 0x05
 79e:	42 17       	cp	r20, r18
 7a0:	53 07       	cpc	r21, r19
 7a2:	44 f4       	brge	.+16     	; 0x7b4 <fputc+0x38>
 7a4:	a0 81       	ld	r26, Z
 7a6:	b1 81       	ldd	r27, Z+1	; 0x01
 7a8:	9d 01       	movw	r18, r26
 7aa:	2f 5f       	subi	r18, 0xFF	; 255
 7ac:	3f 4f       	sbci	r19, 0xFF	; 255
 7ae:	31 83       	std	Z+1, r19	; 0x01
 7b0:	20 83       	st	Z, r18
 7b2:	8c 93       	st	X, r24
 7b4:	26 81       	ldd	r18, Z+6	; 0x06
 7b6:	37 81       	ldd	r19, Z+7	; 0x07
 7b8:	2f 5f       	subi	r18, 0xFF	; 255
 7ba:	3f 4f       	sbci	r19, 0xFF	; 255
 7bc:	37 83       	std	Z+7, r19	; 0x07
 7be:	26 83       	std	Z+6, r18	; 0x06
 7c0:	14 c0       	rjmp	.+40     	; 0x7ea <fputc+0x6e>
 7c2:	8b 01       	movw	r16, r22
 7c4:	ec 01       	movw	r28, r24
 7c6:	fb 01       	movw	r30, r22
 7c8:	00 84       	ldd	r0, Z+8	; 0x08
 7ca:	f1 85       	ldd	r31, Z+9	; 0x09
 7cc:	e0 2d       	mov	r30, r0
 7ce:	09 95       	icall
 7d0:	89 2b       	or	r24, r25
 7d2:	e1 f6       	brne	.-72     	; 0x78c <fputc+0x10>
 7d4:	d8 01       	movw	r26, r16
 7d6:	16 96       	adiw	r26, 0x06	; 6
 7d8:	8d 91       	ld	r24, X+
 7da:	9c 91       	ld	r25, X
 7dc:	17 97       	sbiw	r26, 0x07	; 7
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	17 96       	adiw	r26, 0x07	; 7
 7e2:	9c 93       	st	X, r25
 7e4:	8e 93       	st	-X, r24
 7e6:	16 97       	sbiw	r26, 0x06	; 6
 7e8:	ce 01       	movw	r24, r28
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	08 95       	ret

000007f4 <__ultoa_invert>:
 7f4:	fa 01       	movw	r30, r20
 7f6:	aa 27       	eor	r26, r26
 7f8:	28 30       	cpi	r18, 0x08	; 8
 7fa:	51 f1       	breq	.+84     	; 0x850 <__ultoa_invert+0x5c>
 7fc:	20 31       	cpi	r18, 0x10	; 16
 7fe:	81 f1       	breq	.+96     	; 0x860 <__ultoa_invert+0x6c>
 800:	e8 94       	clt
 802:	6f 93       	push	r22
 804:	6e 7f       	andi	r22, 0xFE	; 254
 806:	6e 5f       	subi	r22, 0xFE	; 254
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	af 4f       	sbci	r26, 0xFF	; 255
 810:	b1 e0       	ldi	r27, 0x01	; 1
 812:	3e d0       	rcall	.+124    	; 0x890 <__ultoa_invert+0x9c>
 814:	b4 e0       	ldi	r27, 0x04	; 4
 816:	3c d0       	rcall	.+120    	; 0x890 <__ultoa_invert+0x9c>
 818:	67 0f       	add	r22, r23
 81a:	78 1f       	adc	r23, r24
 81c:	89 1f       	adc	r24, r25
 81e:	9a 1f       	adc	r25, r26
 820:	a1 1d       	adc	r26, r1
 822:	68 0f       	add	r22, r24
 824:	79 1f       	adc	r23, r25
 826:	8a 1f       	adc	r24, r26
 828:	91 1d       	adc	r25, r1
 82a:	a1 1d       	adc	r26, r1
 82c:	6a 0f       	add	r22, r26
 82e:	71 1d       	adc	r23, r1
 830:	81 1d       	adc	r24, r1
 832:	91 1d       	adc	r25, r1
 834:	a1 1d       	adc	r26, r1
 836:	20 d0       	rcall	.+64     	; 0x878 <__ultoa_invert+0x84>
 838:	09 f4       	brne	.+2      	; 0x83c <__ultoa_invert+0x48>
 83a:	68 94       	set
 83c:	3f 91       	pop	r19
 83e:	2a e0       	ldi	r18, 0x0A	; 10
 840:	26 9f       	mul	r18, r22
 842:	11 24       	eor	r1, r1
 844:	30 19       	sub	r19, r0
 846:	30 5d       	subi	r19, 0xD0	; 208
 848:	31 93       	st	Z+, r19
 84a:	de f6       	brtc	.-74     	; 0x802 <__ultoa_invert+0xe>
 84c:	cf 01       	movw	r24, r30
 84e:	08 95       	ret
 850:	46 2f       	mov	r20, r22
 852:	47 70       	andi	r20, 0x07	; 7
 854:	40 5d       	subi	r20, 0xD0	; 208
 856:	41 93       	st	Z+, r20
 858:	b3 e0       	ldi	r27, 0x03	; 3
 85a:	0f d0       	rcall	.+30     	; 0x87a <__ultoa_invert+0x86>
 85c:	c9 f7       	brne	.-14     	; 0x850 <__ultoa_invert+0x5c>
 85e:	f6 cf       	rjmp	.-20     	; 0x84c <__ultoa_invert+0x58>
 860:	46 2f       	mov	r20, r22
 862:	4f 70       	andi	r20, 0x0F	; 15
 864:	40 5d       	subi	r20, 0xD0	; 208
 866:	4a 33       	cpi	r20, 0x3A	; 58
 868:	18 f0       	brcs	.+6      	; 0x870 <__ultoa_invert+0x7c>
 86a:	49 5d       	subi	r20, 0xD9	; 217
 86c:	31 fd       	sbrc	r19, 1
 86e:	40 52       	subi	r20, 0x20	; 32
 870:	41 93       	st	Z+, r20
 872:	02 d0       	rcall	.+4      	; 0x878 <__ultoa_invert+0x84>
 874:	a9 f7       	brne	.-22     	; 0x860 <__ultoa_invert+0x6c>
 876:	ea cf       	rjmp	.-44     	; 0x84c <__ultoa_invert+0x58>
 878:	b4 e0       	ldi	r27, 0x04	; 4
 87a:	a6 95       	lsr	r26
 87c:	97 95       	ror	r25
 87e:	87 95       	ror	r24
 880:	77 95       	ror	r23
 882:	67 95       	ror	r22
 884:	ba 95       	dec	r27
 886:	c9 f7       	brne	.-14     	; 0x87a <__ultoa_invert+0x86>
 888:	00 97       	sbiw	r24, 0x00	; 0
 88a:	61 05       	cpc	r22, r1
 88c:	71 05       	cpc	r23, r1
 88e:	08 95       	ret
 890:	9b 01       	movw	r18, r22
 892:	ac 01       	movw	r20, r24
 894:	0a 2e       	mov	r0, r26
 896:	06 94       	lsr	r0
 898:	57 95       	ror	r21
 89a:	47 95       	ror	r20
 89c:	37 95       	ror	r19
 89e:	27 95       	ror	r18
 8a0:	ba 95       	dec	r27
 8a2:	c9 f7       	brne	.-14     	; 0x896 <__ultoa_invert+0xa2>
 8a4:	62 0f       	add	r22, r18
 8a6:	73 1f       	adc	r23, r19
 8a8:	84 1f       	adc	r24, r20
 8aa:	95 1f       	adc	r25, r21
 8ac:	a0 1d       	adc	r26, r0
 8ae:	08 95       	ret

000008b0 <_exit>:
 8b0:	f8 94       	cli

000008b2 <__stop_program>:
 8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <__stop_program>
