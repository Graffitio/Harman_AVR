
Real_Time_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000b94  00000c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080015a  0080015a  00000c82  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ce0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187c  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d87  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd5  00000000  00000000  000034b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00004088  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000723  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000853  00000000  00000000  00004adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000532e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 35       	cpi	r26, 0x5A	; 90
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e5       	ldi	r26, 0x5A	; 90
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 36       	cpi	r26, 0x61	; 97
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d5 d1       	rcall	.+938    	; 0x46e <main>
  c4:	65 c5       	rjmp	.+2762   	; 0xb90 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <DS1302_Init>:
	 * DS1302 초기화 함수
	 * 클럭 핀, 데이터 핀 출력 설정
	 * RST 핀 LOW로 설정
	 * 
	*/
	DS1302_CLK_DDR |= (1<<DS1302_CLK); // 2번 CLK 라인에 해당하는 PIN을 출력으로 설정
  c8:	e4 e6       	ldi	r30, 0x64	; 100
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	80 83       	st	Z, r24
	DS1302_DATA_DDR |= (1<<DS1302_DATA); // 3번
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	DS1302_RST_DDR |= (1<<DS1302_RST); // 4번
  d8:	80 81       	ld	r24, Z
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	80 83       	st	Z, r24
	
	DS1302_CLK_PORT &= ~(1<<DS1302_CLK); // 초기값은 Low
  de:	e5 e6       	ldi	r30, 0x65	; 101
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	80 83       	st	Z, r24
	DS1302_DATA_PORT |= (1<<DS1302_DATA); // 초기값 high
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	DS1302_RST_PORT &= ~(1<<DS1302_RST); // 셀렉트 핀 초기값 Low 
  ee:	80 81       	ld	r24, Z
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <DS1302_Selected>:
}


void DS1302_Selected()
{
	DS1302_RST_PORT |= (1<<DS1302_RST); // CE 핀을 High
  f6:	e5 e6       	ldi	r30, 0x65	; 101
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <DS1302_Deselected>:
}


void DS1302_Deselected()
{
	DS1302_RST_PORT &= ~(1<<DS1302_RST); // CE 핀을 Low
 102:	e5 e6       	ldi	r30, 0x65	; 101
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <DS1302_Clock>:
}


void DS1302_Clock() // 오실레이터에 달려 있는 클록 기준으로 clk 펄스 발생
{
	DS1302_CLK_PORT |= (1<<DS1302_CLK); // Clock High
 10e:	e5 e6       	ldi	r30, 0x65	; 101
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	84 60       	ori	r24, 0x04	; 4
 116:	80 83       	st	Z, r24
	DS1302_CLK_PORT &= ~(1<<DS1302_CLK); // Clock Low
 118:	80 81       	ld	r24, Z
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <DS1302_DataBitSet>:
}


void DS1302_DataBitSet()
{
	DS1302_DATA_PORT |= (1<<DS1302_DATA); // Data 핀 High
 120:	e5 e6       	ldi	r30, 0x65	; 101
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <DS13602_DataBitReset>:
}


void DS13602_DataBitReset()
{
	DS1302_DATA_PORT &= ~(1<<DS1302_DATA); // Data 핀 Low
 12c:	e5 e6       	ldi	r30, 0x65	; 101
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <DS1302_Change_ReadMode>:
}


void DS1302_Change_ReadMode()
{
	DS1302_DATA_DDR &= ~(1<<DS1302_DATA); // 읽기 모드에서 데이터 핀 출력 설정 변경
 138:	e4 e6       	ldi	r30, 0x64	; 100
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <DS1302_change_WriteMode>:
}


void DS1302_change_WriteMode()
{
	DS1302_DATA_DDR |= (1<<DS1302_DATA); // 쓰기모드에서 데이터 핀 출력 설정 변경
 144:	e4 e6       	ldi	r30, 0x64	; 100
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <Decimal_to_BCD>:

// 읽어와도 BCD값으로 읽어올 것이니까~
//DEC -> BCD, BCD->DEC로 바꿔주는 함수 필요
uint8_t Decimal_to_BCD(uint8_t decimal)
{
	return (((decimal/10) << 4) | (decimal%10));
 150:	9d ec       	ldi	r25, 0xCD	; 205
 152:	89 9f       	mul	r24, r25
 154:	91 2d       	mov	r25, r1
 156:	11 24       	eor	r1, r1
 158:	96 95       	lsr	r25
 15a:	96 95       	lsr	r25
 15c:	96 95       	lsr	r25
 15e:	20 e1       	ldi	r18, 0x10	; 16
 160:	92 9f       	mul	r25, r18
 162:	a0 01       	movw	r20, r0
 164:	11 24       	eor	r1, r1
 166:	99 0f       	add	r25, r25
 168:	29 2f       	mov	r18, r25
 16a:	22 0f       	add	r18, r18
 16c:	22 0f       	add	r18, r18
 16e:	92 0f       	add	r25, r18
 170:	89 1b       	sub	r24, r25
	// 10진값을 2진값으로 변환
	// 4bit씩 묶어서 1의 자리와 10의 자리로 각각 변환
	// ex) 59 = (50/10)<<9 | 9%10 = 0101 1001
}
 172:	84 2b       	or	r24, r20
 174:	08 95       	ret

00000176 <BCD_to_Decimal>:


uint8_t BCD_to_Decimal(uint8_t bcd)
{
	return (((bcd >> 4) * 10) + (bcd & 0x0f));
 176:	98 2f       	mov	r25, r24
 178:	92 95       	swap	r25
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	99 0f       	add	r25, r25
 17e:	29 2f       	mov	r18, r25
 180:	22 0f       	add	r18, r18
 182:	22 0f       	add	r18, r18
 184:	92 0f       	add	r25, r18
 186:	8f 70       	andi	r24, 0x0F	; 15
	// bcd 값을 4bit씩 묶어서 10의 자리와 1의자리로 각각 변환한 후 더함.
	// 0101 1001 = (0000 0101 * 10) + (0000 1001) = 5*10 + 9 = 59
}
 188:	89 0f       	add	r24, r25
 18a:	08 95       	ret

0000018c <DS1302_TxData>:


void DS1302_TxData(uint8_t txData)
{
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	18 2f       	mov	r17, r24
	// 데이터 하위비트부터 상위비트 순으로 보내고 (Lsb부터 날라간다.)
	// 클럭 신호를 발생시켜 데이터를 전송한다.
	DS1302_change_WriteMode(); // 쓰기 모드로 변경
 194:	d7 df       	rcall	.-82     	; 0x144 <DS1302_change_WriteMode>
	
	for (int i = 0 ; i < 8 ; i++)
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <DS1302_TxData+0x2e>
	{
		// 하위 비트 -> 상위 비트로
		// 1비트 출력하고 클럭 올렸다 내리고
		if (txData & (1<<i)) // 0번 bit부터 밀면서 7번까지 사용
 19c:	81 2f       	mov	r24, r17
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0c 2e       	mov	r0, r28
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DS1302_TxData+0x1c>
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DS1302_TxData+0x18>
 1ac:	80 ff       	sbrs	r24, 0
		DS1302_DataBitSet(); // 1이면, Data Pin High
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DS1302_TxData+0x28>
 1b0:	b7 df       	rcall	.-146    	; 0x120 <DS1302_DataBitSet>
		else
		DS13602_DataBitReset(); // 0 또는 그렇지 않으면, Data Pin Low
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <DS1302_TxData+0x2a>
 1b4:	bb df       	rcall	.-138    	; 0x12c <DS13602_DataBitReset>
		
		DS1302_Clock(); // 클럭 한 번 반복
 1b6:	ab df       	rcall	.-170    	; 0x10e <DS1302_Clock>
 1b8:	21 96       	adiw	r28, 0x01	; 1
{
	// 데이터 하위비트부터 상위비트 순으로 보내고 (Lsb부터 날라간다.)
	// 클럭 신호를 발생시켜 데이터를 전송한다.
	DS1302_change_WriteMode(); // 쓰기 모드로 변경
	
	for (int i = 0 ; i < 8 ; i++)
 1ba:	c8 30       	cpi	r28, 0x08	; 8
 1bc:	d1 05       	cpc	r29, r1
 1be:	74 f3       	brlt	.-36     	; 0x19c <DS1302_TxData+0x10>
 1c0:	df 91       	pop	r29
		else
		DS13602_DataBitReset(); // 0 또는 그렇지 않으면, Data Pin Low
		
		DS1302_Clock(); // 클럭 한 번 반복
	}
}
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	08 95       	ret

000001c8 <DS1302_WriteData>:
 1c8:	cf 93       	push	r28

void DS1302_WriteData(uint8_t address, uint8_t data)
{
 1ca:	df 93       	push	r29
 1cc:	d8 2f       	mov	r29, r24
 1ce:	c6 2f       	mov	r28, r22
	// 주소와 데이터를 전송하고
	// 다 끝났으면, RST 핀을 Low로 설정
	DS1302_Selected(); // RST 핀 High(CE = high)
 1d0:	92 df       	rcall	.-220    	; 0xf6 <DS1302_Selected>
	DS1302_TxData(address); // address send
 1d2:	8d 2f       	mov	r24, r29
 1d4:	db df       	rcall	.-74     	; 0x18c <DS1302_TxData>
	DS1302_TxData(Decimal_to_BCD(data)); // data를 BCD로 바꿔서 보냄 
 1d6:	8c 2f       	mov	r24, r28
 1d8:	bb df       	rcall	.-138    	; 0x150 <Decimal_to_BCD>
 1da:	d8 df       	rcall	.-80     	; 0x18c <DS1302_TxData>
	DS1302_Deselected(); // CE = Low
 1dc:	92 df       	rcall	.-220    	; 0x102 <DS1302_Deselected>
 1de:	df 91       	pop	r29
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <DS1302_SetTimeDate>:
 1e4:	cf 93       	push	r28


void DS1302_SetTimeDate(DS1302 timeDate) // 매개변수는 DS1302 구조체type의 timeDate
{
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	27 97       	sbiw	r28, 0x07	; 7
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	3a 83       	std	Y+2, r19	; 0x02
 1fa:	4b 83       	std	Y+3, r20	; 0x03
 1fc:	5c 83       	std	Y+4, r21	; 0x04
 1fe:	6d 83       	std	Y+5, r22	; 0x05
 200:	7e 83       	std	Y+6, r23	; 0x06
 202:	8f 83       	std	Y+7, r24	; 0x07
	DS1302_WriteData(ADDR_SEC, timeDate.sec);
 204:	62 2f       	mov	r22, r18
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	df df       	rcall	.-66     	; 0x1c8 <DS1302_WriteData>
	DS1302_WriteData(ADDR_MIN, timeDate.min);
 20a:	6a 81       	ldd	r22, Y+2	; 0x02
 20c:	82 e8       	ldi	r24, 0x82	; 130
 20e:	dc df       	rcall	.-72     	; 0x1c8 <DS1302_WriteData>
	DS1302_WriteData(ADDR_HOUR, timeDate.hour);
 210:	6b 81       	ldd	r22, Y+3	; 0x03
 212:	84 e8       	ldi	r24, 0x84	; 132
 214:	d9 df       	rcall	.-78     	; 0x1c8 <DS1302_WriteData>
	DS1302_WriteData(ADDR_DATE, timeDate.date);
 216:	6c 81       	ldd	r22, Y+4	; 0x04
 218:	86 e8       	ldi	r24, 0x86	; 134
 21a:	d6 df       	rcall	.-84     	; 0x1c8 <DS1302_WriteData>
	DS1302_WriteData(ADDR_MONTH, timeDate.month);
 21c:	6d 81       	ldd	r22, Y+5	; 0x05
 21e:	88 e8       	ldi	r24, 0x88	; 136
 220:	d3 df       	rcall	.-90     	; 0x1c8 <DS1302_WriteData>
	DS1302_WriteData(ADDR_DAYOFWEEK, timeDate.dayOfweek);
 222:	6e 81       	ldd	r22, Y+6	; 0x06
 224:	8a e8       	ldi	r24, 0x8A	; 138
 226:	d0 df       	rcall	.-96     	; 0x1c8 <DS1302_WriteData>
	DS1302_WriteData(ADDR_YEAR, timeDate.year);
 228:	6f 81       	ldd	r22, Y+7	; 0x07
 22a:	8c e8       	ldi	r24, 0x8C	; 140
 22c:	cd df       	rcall	.-102    	; 0x1c8 <DS1302_WriteData>
 22e:	27 96       	adiw	r28, 0x07	; 7
}
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <DS1302_RxData>:
 240:	1f 93       	push	r17


uint8_t DS1302_RxData()
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	// 데이터를 하위비트부터 상위비트 순으로 읽고
	// 클럭 신호를 발생시켜 데이터를 읽음
	uint8_t rxData = 0;
	DS1302_Change_ReadMode(); // Read mode로 바꾸고
 246:	78 df       	rcall	.-272    	; 0x138 <DS1302_Change_ReadMode>
	
	for (int i = 0 ; i < 8 ; i++)
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t DS1302_RxData()
{
	// 데이터를 하위비트부터 상위비트 순으로 읽고
	// 클럭 신호를 발생시켜 데이터를 읽음
	uint8_t rxData = 0;
 24c:	10 e0       	ldi	r17, 0x00	; 0
	DS1302_Change_ReadMode(); // Read mode로 바꾸고
	
	for (int i = 0 ; i < 8 ; i++)
 24e:	15 c0       	rjmp	.+42     	; 0x27a <DS1302_RxData+0x3a>
	{
		rxData |= (DS1302_DATA_PIN & (1<<DS1302_DATA)) ? (1<<i) : 0;
 250:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 254:	83 ff       	sbrs	r24, 3
 256:	09 c0       	rjmp	.+18     	; 0x26a <DS1302_RxData+0x2a>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0c 2e       	mov	r0, r28
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DS1302_RxData+0x24>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <DS1302_RxData+0x20>
 268:	02 c0       	rjmp	.+4      	; 0x26e <DS1302_RxData+0x2e>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	18 2b       	or	r17, r24
		if(i != 7) // (0~7까지 총 8번 rising edge)
 270:	c7 30       	cpi	r28, 0x07	; 7
 272:	d1 05       	cpc	r29, r1
		DS1302_Clock();
 274:	09 f0       	breq	.+2      	; 0x278 <DS1302_RxData+0x38>
 276:	4b df       	rcall	.-362    	; 0x10e <DS1302_Clock>
	// 데이터를 하위비트부터 상위비트 순으로 읽고
	// 클럭 신호를 발생시켜 데이터를 읽음
	uint8_t rxData = 0;
	DS1302_Change_ReadMode(); // Read mode로 바꾸고
	
	for (int i = 0 ; i < 8 ; i++)
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	c8 30       	cpi	r28, 0x08	; 8
 27c:	d1 05       	cpc	r29, r1
 27e:	44 f3       	brlt	.-48     	; 0x250 <DS1302_RxData+0x10>
		rxData |= (DS1302_DATA_PIN & (1<<DS1302_DATA)) ? (1<<i) : 0;
		if(i != 7) // (0~7까지 총 8번 rising edge)
		DS1302_Clock();
	}
	return rxData;
}
 280:	81 2f       	mov	r24, r17
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <DS1302_ReadData>:


uint8_t DS1302_ReadData(uint8_t address)
{
 28a:	cf 93       	push	r28
 28c:	c8 2f       	mov	r28, r24
	// 지정된 주소의 데이터를 읽어옴
	uint8_t rxData = 0; //  수신된 데이터를 저장할 변수
	DS1302_Selected(); // CE = high
 28e:	33 df       	rcall	.-410    	; 0xf6 <DS1302_Selected>
	DS1302_TxData(address+1); // 지정된 주소를 전송(Write에서 1을 더하면 Read주소)
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	8c 0f       	add	r24, r28
	rxData = DS1302_RxData(); // 수신된 데이터를 읽음
 294:	7b df       	rcall	.-266    	; 0x18c <DS1302_TxData>
 296:	d4 df       	rcall	.-88     	; 0x240 <DS1302_RxData>
	DS1302_Deselected(); // CE = Low
 298:	c8 2f       	mov	r28, r24
 29a:	33 df       	rcall	.-410    	; 0x102 <DS1302_Deselected>
	
	return BCD_to_Decimal(rxData);
 29c:	8c 2f       	mov	r24, r28
 29e:	6b df       	rcall	.-298    	; 0x176 <BCD_to_Decimal>
 2a0:	cf 91       	pop	r28
}
 2a2:	08 95       	ret

000002a4 <DS1302_GetTime>:
 2a4:	cf 93       	push	r28


void DS1302_GetTime(DS1302 *timeDate) // 매개변수는 DS1302 type의 timeDate 포인터 변수 
{
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
	timeDate->sec = DS1302_ReadData(ADDR_SEC);
 2aa:	80 e8       	ldi	r24, 0x80	; 128
 2ac:	ee df       	rcall	.-36     	; 0x28a <DS1302_ReadData>
 2ae:	88 83       	st	Y, r24
	timeDate->min = DS1302_ReadData(ADDR_MIN);
 2b0:	82 e8       	ldi	r24, 0x82	; 130
 2b2:	eb df       	rcall	.-42     	; 0x28a <DS1302_ReadData>
 2b4:	89 83       	std	Y+1, r24	; 0x01
	timeDate->hour = DS1302_ReadData(ADDR_HOUR);
 2b6:	84 e8       	ldi	r24, 0x84	; 132
 2b8:	e8 df       	rcall	.-48     	; 0x28a <DS1302_ReadData>
 2ba:	8a 83       	std	Y+2, r24	; 0x02
 2bc:	df 91       	pop	r29
}
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <DS1302_GetDate>:
 2c2:	cf 93       	push	r28


void DS1302_GetDate(DS1302 *timeDate)
{
 2c4:	df 93       	push	r29
 2c6:	ec 01       	movw	r28, r24
	timeDate->date = DS1302_ReadData(ADDR_DATE);
 2c8:	86 e8       	ldi	r24, 0x86	; 134
 2ca:	df df       	rcall	.-66     	; 0x28a <DS1302_ReadData>
 2cc:	8b 83       	std	Y+3, r24	; 0x03
	timeDate->month = DS1302_ReadData(ADDR_MONTH);
 2ce:	88 e8       	ldi	r24, 0x88	; 136
 2d0:	dc df       	rcall	.-72     	; 0x28a <DS1302_ReadData>
 2d2:	8c 83       	std	Y+4, r24	; 0x04
	timeDate->dayOfweek = DS1302_ReadData(ADDR_DAYOFWEEK);
 2d4:	8a e8       	ldi	r24, 0x8A	; 138
 2d6:	d9 df       	rcall	.-78     	; 0x28a <DS1302_ReadData>
 2d8:	8d 83       	std	Y+5, r24	; 0x05
	timeDate->year = DS1302_ReadData(ADDR_YEAR);
 2da:	8c e8       	ldi	r24, 0x8C	; 140
 2dc:	d6 df       	rcall	.-84     	; 0x28a <DS1302_ReadData>
 2de:	8e 83       	std	Y+6, r24	; 0x06
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <I2C_Init>:
#include "I2C.h"


void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL) | (1<<I2C_SDA); // 출력 설정
 2e6:	81 b3       	in	r24, 0x11	; 17
 2e8:	83 60       	ori	r24, 0x03	; 3
 2ea:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; // 100KHz
 2ec:	88 e4       	ldi	r24, 0x48	; 72
 2ee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2f2:	08 95       	ret

000002f4 <I2C_Start>:
	// TWBR = 12; // 400KHz
}

void I2C_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // 1을 보내는 것은, S/W적으로 플래그를 Clear해주는 것이다.
 2f4:	84 ea       	ldi	r24, 0xA4	; 164
 2f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	                                            // 1 Set하여 인터럽트 발생시키는 것이 아님.
	while(!(TWCR & (1<<TWINT))); // 하드웨어적으로 TWINT 시점을 결정
 2fa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2fe:	88 23       	and	r24, r24
 300:	e4 f7       	brge	.-8      	; 0x2fa <I2C_Start+0x6>
	                             // 기다렸다가 조건이 만족되면 while문 수행
}
 302:	08 95       	ret

00000304 <I2C_Stop>:

void I2C_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Stop 비트 설정
 304:	84 e9       	ldi	r24, 0x94	; 148
 306:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 30a:	08 95       	ret

0000030c <I2C_TxData>:
}

void I2C_TxData(uint8_t data) // data 1바이트 전송
{
	TWDR = data;
 30c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 310:	84 e8       	ldi	r24, 0x84	; 132
 312:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT))); // 전송 완료 대기
 316:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 31a:	88 23       	and	r24, r24
 31c:	e4 f7       	brge	.-8      	; 0x316 <I2C_TxData+0xa>
}
 31e:	08 95       	ret

00000320 <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	d8 2f       	mov	r29, r24
 326:	c6 2f       	mov	r28, r22
	I2C_Start();
 328:	e5 df       	rcall	.-54     	; 0x2f4 <I2C_Start>
	I2C_TxData(devAddrRW); // 읽을 것이냐 쓸 것이냐
 32a:	8d 2f       	mov	r24, r29
 32c:	ef df       	rcall	.-34     	; 0x30c <I2C_TxData>
	I2C_TxData(data); // 입/출력할 데이터 보냄
 32e:	8c 2f       	mov	r24, r28
 330:	ed df       	rcall	.-38     	; 0x30c <I2C_TxData>
	I2C_Stop();
 332:	e8 df       	rcall	.-48     	; 0x304 <I2C_Stop>
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <LCD_EnablePin>:
 33a:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 33e:	6b 7f       	andi	r22, 0xFB	; 251
 340:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 344:	8e e4       	ldi	r24, 0x4E	; 78
 346:	ec df       	rcall	.-40     	; 0x320 <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E); // High 설정
 348:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
 34c:	64 60       	ori	r22, 0x04	; 4
 34e:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 352:	8e e4       	ldi	r24, 0x4E	; 78
 354:	e5 df       	rcall	.-54     	; 0x320 <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 356:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
 35a:	6b 7f       	andi	r22, 0xFB	; 251
 35c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 360:	8e e4       	ldi	r24, 0x4E	; 78
 362:	de df       	rcall	.-68     	; 0x320 <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	98 e1       	ldi	r25, 0x18	; 24
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_EnablePin+0x2e>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_EnablePin+0x34>
 36e:	00 00       	nop
 370:	08 95       	ret

00000372 <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{
 372:	cf 93       	push	r28
 374:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0); // 상위 4bit 출력
 376:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
 37a:	8f 70       	andi	r24, 0x0F	; 15
 37c:	9c 2f       	mov	r25, r28
 37e:	90 7f       	andi	r25, 0xF0	; 240
 380:	89 2b       	or	r24, r25
 382:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
	// 이전 상위 비트는 다 날라감 | data의 상위 비트는 살림 
	LCD_EnablePin();
 386:	d9 df       	rcall	.-78     	; 0x33a <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f)<<4); // 하위 4bit
 388:	20 e1       	ldi	r18, 0x10	; 16
 38a:	c2 9f       	mul	r28, r18
 38c:	c0 01       	movw	r24, r0
 38e:	11 24       	eor	r1, r1
 390:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <__data_end>
 394:	9f 70       	andi	r25, 0x0F	; 15
 396:	89 2b       	or	r24, r25
 398:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
	LCD_EnablePin();
 39c:	ce df       	rcall	.-100    	; 0x33a <LCD_EnablePin>
	// 상위 4bit 받고 -> Enable해서 출력하고 -> 하위 4bit 받고 상위로 시프트하고 -> Enabla해서 출력하고
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commandData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS); // Command일 때는 control register(TWCR)을 쓰고
 3a2:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <__data_end>
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 3a6:	9c 7f       	andi	r25, 0xFC	; 252
 3a8:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <__data_end>
	LCD_Data4bit(commandData);
 3ac:	e2 cf       	rjmp	.-60     	; 0x372 <LCD_Data4bit>
 3ae:	08 95       	ret

000003b0 <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)
{
	I2C_LCD_Data |= (1<<LCD_RS); // Data받을 때는 Data Register(TWDR) 쓰고
 3b0:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <__data_end>
 3b4:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 3b6:	9d 7f       	andi	r25, 0xFD	; 253
 3b8:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <__data_end>
	LCD_Data4bit(charData);
 3bc:	da cf       	rjmp	.-76     	; 0x372 <LCD_Data4bit>
 3be:	08 95       	ret

000003c0 <LCD_BackLight>:
}


void LCD_BackLight()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);
 3c0:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
 3c4:	68 60       	ori	r22, 0x08	; 8
 3c6:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 3ca:	8e e4       	ldi	r24, 0x4E	; 78
 3cc:	a9 cf       	rjmp	.-174    	; 0x320 <I2C_TxByte>
 3ce:	08 95       	ret

000003d0 <LCD_gotoXY>:
}

void LCD_gotoXY(uint8_t row, uint8_t col) // LCD 화면의 커서를 지정된 행(row)과 열(col) 위치로 이동시키는 함수
{
	col %= 16; // 0~15 사이의 값 지정 가능
 3d0:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2; // 0~1 사이의 값 지정 가능
 3d2:	81 70       	andi	r24, 0x01	; 1
	uint8_t address = (0x40 * row) + col; // 주어진 row와 col 값을 이용하여 LCD 화면의 주소(address, 커서 위치)룰 계산한다.
 3d4:	90 e4       	ldi	r25, 0x40	; 64
 3d6:	89 9f       	mul	r24, r25
 3d8:	60 0d       	add	r22, r0
 3da:	11 24       	eor	r1, r1
 3dc:	86 2f       	mov	r24, r22
	// 두 번째 행(row 1)의 주소 범위는 0x40 ~ 0x4f(64~79)
	// 예시 : row 1, col 3 -> address = 0x43
	uint8_t command = 0x80 + address; // 계산된 주소를 이용하여 이동시키는 명령어 command 생성
	// 0x80을 사용하는 이유는 특정 주소값이 아닌, 첫 번째 행의 시작을 나타내는 상징적인 값으로 사용된다,
	// 이렇게 함으로써 코드의 가독성을 높이고, 행과 열 값을 쉽게 결합하여 원하는 주소 값을 계산할 수 있다.
	LCD_WriteCommand(command);
 3de:	80 58       	subi	r24, 0x80	; 128
 3e0:	e0 cf       	rjmp	.-64     	; 0x3a2 <LCD_WriteCommand>
 3e2:	08 95       	ret

000003e4 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	8c 01       	movw	r16, r24
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 3f0:	df df       	rcall	.-66     	; 0x3b0 <LCD_WriteData>
	LCD_WriteCommand(command);
}

void LCD_WriteString(char *string)
{
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 3f2:	cf 5f       	subi	r28, 0xFF	; 255
 3f4:	f8 01       	movw	r30, r16
 3f6:	ec 0f       	add	r30, r28
 3f8:	f1 1d       	adc	r31, r1
 3fa:	80 81       	ld	r24, Z
 3fc:	81 11       	cpse	r24, r1
 3fe:	f8 cf       	rjmp	.-16     	; 0x3f0 <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col); // 행과 열의 위치를 받음. -> 어디서부터 쓸 것인지를 좌표를 받음
 40e:	e0 df       	rcall	.-64     	; 0x3d0 <LCD_gotoXY>
	LCD_WriteString(string); // 문자열 입력을 받음
 410:	ce 01       	movw	r24, r28
 412:	e8 df       	rcall	.-48     	; 0x3e4 <LCD_WriteString>
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 41a:	65 df       	rcall	.-310    	; 0x2e6 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	89 ef       	ldi	r24, 0xF9	; 249
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <LCD_Init+0x8>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <LCD_Init+0x12>
 42c:	00 00       	nop
	
	_delay_ms(20);
	LCD_WriteCommand(0x03);
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	b8 df       	rcall	.-144    	; 0x3a2 <LCD_WriteCommand>
 432:	8f e3       	ldi	r24, 0x3F	; 63
 434:	9c e9       	ldi	r25, 0x9C	; 156
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <LCD_Init+0x1c>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 43c:	00 00       	nop
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	b0 df       	rcall	.-160    	; 0x3a2 <LCD_WriteCommand>
 442:	8f e9       	ldi	r24, 0x9F	; 159
 444:	9f e0       	ldi	r25, 0x0F	; 15
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <LCD_Init+0x2c>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 44c:	00 00       	nop
 44e:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 450:	a8 df       	rcall	.-176    	; 0x3a2 <LCD_WriteCommand>
 452:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 454:	a6 df       	rcall	.-180    	; 0x3a2 <LCD_WriteCommand>
 456:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 458:	a4 df       	rcall	.-184    	; 0x3a2 <LCD_WriteCommand>
 45a:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 45c:	a2 df       	rcall	.-188    	; 0x3a2 <LCD_WriteCommand>
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	a0 df       	rcall	.-192    	; 0x3a2 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	9e df       	rcall	.-196    	; 0x3a2 <LCD_WriteCommand>
 466:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 468:	9c df       	rcall	.-200    	; 0x3a2 <LCD_WriteCommand>
 46a:	aa cf       	rjmp	.-172    	; 0x3c0 <LCD_BackLight>
 46c:	08 95       	ret

0000046e <main>:
	LCD_BackLight();
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61




int main(void)
{
 474:	de b7       	in	r29, 0x3e	; 62
 476:	c3 54       	subi	r28, 0x43	; 67
 478:	d1 09       	sbc	r29, r1
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	de bf       	out	0x3e, r29	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	cd bf       	out	0x3d, r28	; 61
	stdout = &OUTPUT; // 출력 스트림 지정
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <__iob+0x3>
 48c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <__iob+0x2>
	UART0_Init();
 490:	7d d0       	rcall	.+250    	; 0x58c <UART0_Init>
	DS1302_Init();
 492:	1a de       	rcall	.-972    	; 0xc8 <DS1302_Init>
	LCD_Init();
 494:	c2 df       	rcall	.-124    	; 0x41a <LCD_Init>
 496:	87 e1       	ldi	r24, 0x17	; 23
	
    // RTC 시계 칩에 날짜와 시간을 설정
	DS1302 myTime;
	myTime.year = 23;
 498:	8f 83       	std	Y+7, r24	; 0x07
 49a:	87 e0       	ldi	r24, 0x07	; 7
	myTime.month = 7;
 49c:	8d 83       	std	Y+5, r24	; 0x05
 49e:	8a e1       	ldi	r24, 0x1A	; 26
	myTime.date = 26;
 4a0:	8c 83       	std	Y+4, r24	; 0x04
 4a2:	84 e0       	ldi	r24, 0x04	; 4
	myTime.dayOfweek = 4; // 일(1) 월(2) 화(3) 수(7) 목(5) 금(6) 토(7)
 4a4:	8e 83       	std	Y+6, r24	; 0x06
 4a6:	8e e0       	ldi	r24, 0x0E	; 14
	myTime.hour = 14;
 4a8:	8b 83       	std	Y+3, r24	; 0x03
 4aa:	85 e2       	ldi	r24, 0x25	; 37
	myTime.min = 37;
 4ac:	8a 83       	std	Y+2, r24	; 0x02
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
	myTime.sec = 10;
 4b0:	89 83       	std	Y+1, r24	; 0x01
 4b2:	2a e0       	ldi	r18, 0x0A	; 10
	
	DS1302_SetTimeDate(myTime);
 4b4:	35 e2       	ldi	r19, 0x25	; 37
 4b6:	4e e0       	ldi	r20, 0x0E	; 14
 4b8:	5a e1       	ldi	r21, 0x1A	; 26
 4ba:	67 e0       	ldi	r22, 0x07	; 7
 4bc:	74 e0       	ldi	r23, 0x04	; 4
 4be:	87 e1       	ldi	r24, 0x17	; 23
 4c0:	91 de       	rcall	.-734    	; 0x1e4 <DS1302_SetTimeDate>
	uint8_t buff_t[30];
	
	
    while (1) 
    {
		DS1302_GetDate(&myTime);
 4c2:	ce 01       	movw	r24, r28
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	fd de       	rcall	.-518    	; 0x2c2 <DS1302_GetDate>
		DS1302_GetTime(&myTime);
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	eb de       	rcall	.-554    	; 0x2a4 <DS1302_GetTime>
 4ce:	59 81       	ldd	r21, Y+1	; 0x01
		
		printf("20%02d.%02d.%02d  %02d:%02d:%02d \n",
				myTime.year, myTime.month, myTime.date,
				myTime.hour, myTime.min, myTime.sec);
 4d0:	4a 81       	ldd	r20, Y+2	; 0x02
 4d2:	3b 81       	ldd	r19, Y+3	; 0x03
 4d4:	2c 81       	ldd	r18, Y+4	; 0x04
    {
		DS1302_GetDate(&myTime);
		DS1302_GetTime(&myTime);
		
		printf("20%02d.%02d.%02d  %02d:%02d:%02d \n",
				myTime.year, myTime.month, myTime.date,
 4d6:	9d 81       	ldd	r25, Y+5	; 0x05
 4d8:	8f 81       	ldd	r24, Y+7	; 0x07
 4da:	1f 92       	push	r1
    while (1) 
    {
		DS1302_GetDate(&myTime);
		DS1302_GetTime(&myTime);
		
		printf("20%02d.%02d.%02d  %02d:%02d:%02d \n",
 4dc:	5f 93       	push	r21
 4de:	1f 92       	push	r1
 4e0:	4f 93       	push	r20
 4e2:	1f 92       	push	r1
 4e4:	3f 93       	push	r19
 4e6:	1f 92       	push	r1
 4e8:	2f 93       	push	r18
 4ea:	1f 92       	push	r1
 4ec:	9f 93       	push	r25
 4ee:	1f 92       	push	r1
 4f0:	8f 93       	push	r24
 4f2:	8e e0       	ldi	r24, 0x0E	; 14
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	9f 93       	push	r25
 4f8:	8f 93       	push	r24
 4fa:	5c d0       	rcall	.+184    	; 0x5b4 <printf>
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	89 e6       	ldi	r24, 0x69	; 105
 500:	98 e1       	ldi	r25, 0x18	; 24
 502:	21 50       	subi	r18, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <main+0x94>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <main+0x9e>
 50c:	00 00       	nop
 50e:	2c 81       	ldd	r18, Y+4	; 0x04
				myTime.year, myTime.month, myTime.date,
				myTime.hour, myTime.min, myTime.sec);
		_delay_ms(500);
		
		sprintf(buff, "DATE:%4d-%02d-%02d", 2000+myTime.year, myTime.month, myTime.date);
 510:	9d 81       	ldd	r25, Y+5	; 0x05
 512:	8f 81       	ldd	r24, Y+7	; 0x07
 514:	1f 92       	push	r1
 516:	2f 93       	push	r18
 518:	1f 92       	push	r1
 51a:	9f 93       	push	r25
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	80 53       	subi	r24, 0x30	; 48
 520:	98 4f       	sbci	r25, 0xF8	; 248
 522:	9f 93       	push	r25
 524:	8f 93       	push	r24
 526:	81 e3       	ldi	r24, 0x31	; 49
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	9f 93       	push	r25
 52c:	8f 93       	push	r24
 52e:	8e 01       	movw	r16, r28
 530:	08 5f       	subi	r16, 0xF8	; 248
 532:	1f 4f       	sbci	r17, 0xFF	; 255
 534:	1f 93       	push	r17
 536:	0f 93       	push	r16
 538:	50 d0       	rcall	.+160    	; 0x5da <sprintf>
		LCD_WriteStringXY(0,0,buff);
 53a:	a8 01       	movw	r20, r16
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	63 df       	rcall	.-314    	; 0x408 <LCD_WriteStringXY>
 542:	29 81       	ldd	r18, Y+1	; 0x01
		sprintf(buff_t, "TIME : %02d:%02d:%02d", myTime.hour, myTime.min, myTime.sec);
 544:	9a 81       	ldd	r25, Y+2	; 0x02
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	1f 92       	push	r1
 54a:	2f 93       	push	r18
 54c:	1f 92       	push	r1
 54e:	9f 93       	push	r25
 550:	1f 92       	push	r1
 552:	8f 93       	push	r24
 554:	84 e4       	ldi	r24, 0x44	; 68
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	9f 93       	push	r25
 55a:	8f 93       	push	r24
 55c:	02 5e       	subi	r16, 0xE2	; 226
 55e:	1f 4f       	sbci	r17, 0xFF	; 255
 560:	1f 93       	push	r17
 562:	0f 93       	push	r16
 564:	3a d0       	rcall	.+116    	; 0x5da <sprintf>
		LCD_WriteStringXY(1,0,buff_t);
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	a8 01       	movw	r20, r16
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	48 df       	rcall	.-368    	; 0x408 <LCD_WriteStringXY>
 578:	9f ef       	ldi	r25, 0xFF	; 255
 57a:	29 e6       	ldi	r18, 0x69	; 105
 57c:	88 e1       	ldi	r24, 0x18	; 24
 57e:	91 50       	subi	r25, 0x01	; 1
 580:	20 40       	sbci	r18, 0x00	; 0
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <main+0x110>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x11a>
 588:	00 00       	nop
 58a:	9b cf       	rjmp	.-202    	; 0x4c2 <main+0x54>

0000058c <UART0_Init>:
// 1. 프로그램 다운로드 해 -> 해당 창 close
// 2. 스위치 오른쪽으로 토글
// 3. compo 어쩌고 파일 열고
// 4. 프로그램 수정하려면, compo 어쩌고 파일 close하고 스위치 왼쪽으로 토글하고 1번
{
	UBRR0H = 0x00;
 58c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0xcf; // 9600bps, 2배속모드를 쓸 것이다.
 590:	8f ec       	ldi	r24, 0xCF	; 207
 592:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = (1<<U2X0); // 2배속 모드 셋
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	8b b9       	out	0x0b, r24	; 11
	// 비동기 모드, 8bit 데이터, 패리티비트 없음, 1비트 stop bit
	//UCSR0C |= (0<<UMSEL0); // 비동기 모드
	//UCSR0C |= (0<<UPM01) | (0<<UPM00); // 패리티 비트 없음
	//UCSR0C |= (0<<USBS0); // 1비트 stop mode
	
	UCSR0B |= (1<<RXEN0); // 수신 가능(RX PIN 허용)
 598:	8a b1       	in	r24, 0x0a	; 10
 59a:	80 61       	ori	r24, 0x10	; 16
 59c:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0); // 송신 가능(TX PIN 허용)
 59e:	8a b1       	in	r24, 0x0a	; 10
 5a0:	88 60       	ori	r24, 0x08	; 8
 5a2:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0B |= (1<<RXCIE0); // 수신 interrupt Enable
 5a4:	8a b1       	in	r24, 0x0a	; 10
 5a6:	80 68       	ori	r24, 0x80	; 128
 5a8:	8a b9       	out	0x0a, r24	; 10
 5aa:	08 95       	ret

000005ac <UART0_Transmit>:
}


void UART0_Transmit(char data)
{
	while (!(UCSR0A & (1<<UDRE0))); // 송신 가능 대기, UDR(송신버퍼)이 비어있는지 체크
 5ac:	5d 9b       	sbis	0x0b, 5	; 11
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <UART0_Transmit>
	// 비어있으면 UDRE0가 1로 세팅됨.
	// while 문 거짓되면, 빠져 나가서 다음 라인으로
	UDR0 = data; // 데이터 버퍼 레지스터에 데이터 전송
 5b0:	8c b9       	out	0x0c, r24	; 12
 5b2:	08 95       	ret

000005b4 <printf>:
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	ae 01       	movw	r20, r28
 5be:	4b 5f       	subi	r20, 0xFB	; 251
 5c0:	5f 4f       	sbci	r21, 0xFF	; 255
 5c2:	fa 01       	movw	r30, r20
 5c4:	61 91       	ld	r22, Z+
 5c6:	71 91       	ld	r23, Z+
 5c8:	af 01       	movw	r20, r30
 5ca:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <__iob+0x2>
 5ce:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <__iob+0x3>
 5d2:	31 d0       	rcall	.+98     	; 0x636 <vfprintf>
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <sprintf>:
 5da:	0f 93       	push	r16
 5dc:	1f 93       	push	r17
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	2e 97       	sbiw	r28, 0x0e	; 14
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	de bf       	out	0x3e, r29	; 62
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	cd bf       	out	0x3d, r28	; 61
 5f2:	0d 89       	ldd	r16, Y+21	; 0x15
 5f4:	1e 89       	ldd	r17, Y+22	; 0x16
 5f6:	86 e0       	ldi	r24, 0x06	; 6
 5f8:	8c 83       	std	Y+4, r24	; 0x04
 5fa:	1a 83       	std	Y+2, r17	; 0x02
 5fc:	09 83       	std	Y+1, r16	; 0x01
 5fe:	8f ef       	ldi	r24, 0xFF	; 255
 600:	9f e7       	ldi	r25, 0x7F	; 127
 602:	9e 83       	std	Y+6, r25	; 0x06
 604:	8d 83       	std	Y+5, r24	; 0x05
 606:	ae 01       	movw	r20, r28
 608:	47 5e       	subi	r20, 0xE7	; 231
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	6f 89       	ldd	r22, Y+23	; 0x17
 60e:	78 8d       	ldd	r23, Y+24	; 0x18
 610:	ce 01       	movw	r24, r28
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	10 d0       	rcall	.+32     	; 0x636 <vfprintf>
 616:	ef 81       	ldd	r30, Y+7	; 0x07
 618:	f8 85       	ldd	r31, Y+8	; 0x08
 61a:	e0 0f       	add	r30, r16
 61c:	f1 1f       	adc	r31, r17
 61e:	10 82       	st	Z, r1
 620:	2e 96       	adiw	r28, 0x0e	; 14
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	f8 94       	cli
 626:	de bf       	out	0x3e, r29	; 62
 628:	0f be       	out	0x3f, r0	; 63
 62a:	cd bf       	out	0x3d, r28	; 61
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	08 95       	ret

00000636 <vfprintf>:
 636:	2f 92       	push	r2
 638:	3f 92       	push	r3
 63a:	4f 92       	push	r4
 63c:	5f 92       	push	r5
 63e:	6f 92       	push	r6
 640:	7f 92       	push	r7
 642:	8f 92       	push	r8
 644:	9f 92       	push	r9
 646:	af 92       	push	r10
 648:	bf 92       	push	r11
 64a:	cf 92       	push	r12
 64c:	df 92       	push	r13
 64e:	ef 92       	push	r14
 650:	ff 92       	push	r15
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	2b 97       	sbiw	r28, 0x0b	; 11
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	de bf       	out	0x3e, r29	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	cd bf       	out	0x3d, r28	; 61
 66a:	6c 01       	movw	r12, r24
 66c:	7b 01       	movw	r14, r22
 66e:	8a 01       	movw	r16, r20
 670:	fc 01       	movw	r30, r24
 672:	17 82       	std	Z+7, r1	; 0x07
 674:	16 82       	std	Z+6, r1	; 0x06
 676:	83 81       	ldd	r24, Z+3	; 0x03
 678:	81 ff       	sbrs	r24, 1
 67a:	bf c1       	rjmp	.+894    	; 0x9fa <vfprintf+0x3c4>
 67c:	ce 01       	movw	r24, r28
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	3c 01       	movw	r6, r24
 682:	f6 01       	movw	r30, r12
 684:	93 81       	ldd	r25, Z+3	; 0x03
 686:	f7 01       	movw	r30, r14
 688:	93 fd       	sbrc	r25, 3
 68a:	85 91       	lpm	r24, Z+
 68c:	93 ff       	sbrs	r25, 3
 68e:	81 91       	ld	r24, Z+
 690:	7f 01       	movw	r14, r30
 692:	88 23       	and	r24, r24
 694:	09 f4       	brne	.+2      	; 0x698 <vfprintf+0x62>
 696:	ad c1       	rjmp	.+858    	; 0x9f2 <vfprintf+0x3bc>
 698:	85 32       	cpi	r24, 0x25	; 37
 69a:	39 f4       	brne	.+14     	; 0x6aa <vfprintf+0x74>
 69c:	93 fd       	sbrc	r25, 3
 69e:	85 91       	lpm	r24, Z+
 6a0:	93 ff       	sbrs	r25, 3
 6a2:	81 91       	ld	r24, Z+
 6a4:	7f 01       	movw	r14, r30
 6a6:	85 32       	cpi	r24, 0x25	; 37
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <vfprintf+0x7c>
 6aa:	b6 01       	movw	r22, r12
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	d6 d1       	rcall	.+940    	; 0xa5c <fputc>
 6b0:	e8 cf       	rjmp	.-48     	; 0x682 <vfprintf+0x4c>
 6b2:	91 2c       	mov	r9, r1
 6b4:	21 2c       	mov	r2, r1
 6b6:	31 2c       	mov	r3, r1
 6b8:	ff e1       	ldi	r31, 0x1F	; 31
 6ba:	f3 15       	cp	r31, r3
 6bc:	d8 f0       	brcs	.+54     	; 0x6f4 <vfprintf+0xbe>
 6be:	8b 32       	cpi	r24, 0x2B	; 43
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <vfprintf+0xaa>
 6c2:	38 f4       	brcc	.+14     	; 0x6d2 <vfprintf+0x9c>
 6c4:	80 32       	cpi	r24, 0x20	; 32
 6c6:	79 f0       	breq	.+30     	; 0x6e6 <vfprintf+0xb0>
 6c8:	83 32       	cpi	r24, 0x23	; 35
 6ca:	a1 f4       	brne	.+40     	; 0x6f4 <vfprintf+0xbe>
 6cc:	23 2d       	mov	r18, r3
 6ce:	20 61       	ori	r18, 0x10	; 16
 6d0:	1d c0       	rjmp	.+58     	; 0x70c <vfprintf+0xd6>
 6d2:	8d 32       	cpi	r24, 0x2D	; 45
 6d4:	61 f0       	breq	.+24     	; 0x6ee <vfprintf+0xb8>
 6d6:	80 33       	cpi	r24, 0x30	; 48
 6d8:	69 f4       	brne	.+26     	; 0x6f4 <vfprintf+0xbe>
 6da:	23 2d       	mov	r18, r3
 6dc:	21 60       	ori	r18, 0x01	; 1
 6de:	16 c0       	rjmp	.+44     	; 0x70c <vfprintf+0xd6>
 6e0:	83 2d       	mov	r24, r3
 6e2:	82 60       	ori	r24, 0x02	; 2
 6e4:	38 2e       	mov	r3, r24
 6e6:	e3 2d       	mov	r30, r3
 6e8:	e4 60       	ori	r30, 0x04	; 4
 6ea:	3e 2e       	mov	r3, r30
 6ec:	2a c0       	rjmp	.+84     	; 0x742 <vfprintf+0x10c>
 6ee:	f3 2d       	mov	r31, r3
 6f0:	f8 60       	ori	r31, 0x08	; 8
 6f2:	1d c0       	rjmp	.+58     	; 0x72e <vfprintf+0xf8>
 6f4:	37 fc       	sbrc	r3, 7
 6f6:	2d c0       	rjmp	.+90     	; 0x752 <vfprintf+0x11c>
 6f8:	20 ed       	ldi	r18, 0xD0	; 208
 6fa:	28 0f       	add	r18, r24
 6fc:	2a 30       	cpi	r18, 0x0A	; 10
 6fe:	40 f0       	brcs	.+16     	; 0x710 <vfprintf+0xda>
 700:	8e 32       	cpi	r24, 0x2E	; 46
 702:	b9 f4       	brne	.+46     	; 0x732 <vfprintf+0xfc>
 704:	36 fc       	sbrc	r3, 6
 706:	75 c1       	rjmp	.+746    	; 0x9f2 <vfprintf+0x3bc>
 708:	23 2d       	mov	r18, r3
 70a:	20 64       	ori	r18, 0x40	; 64
 70c:	32 2e       	mov	r3, r18
 70e:	19 c0       	rjmp	.+50     	; 0x742 <vfprintf+0x10c>
 710:	36 fe       	sbrs	r3, 6
 712:	06 c0       	rjmp	.+12     	; 0x720 <vfprintf+0xea>
 714:	8a e0       	ldi	r24, 0x0A	; 10
 716:	98 9e       	mul	r9, r24
 718:	20 0d       	add	r18, r0
 71a:	11 24       	eor	r1, r1
 71c:	92 2e       	mov	r9, r18
 71e:	11 c0       	rjmp	.+34     	; 0x742 <vfprintf+0x10c>
 720:	ea e0       	ldi	r30, 0x0A	; 10
 722:	2e 9e       	mul	r2, r30
 724:	20 0d       	add	r18, r0
 726:	11 24       	eor	r1, r1
 728:	22 2e       	mov	r2, r18
 72a:	f3 2d       	mov	r31, r3
 72c:	f0 62       	ori	r31, 0x20	; 32
 72e:	3f 2e       	mov	r3, r31
 730:	08 c0       	rjmp	.+16     	; 0x742 <vfprintf+0x10c>
 732:	8c 36       	cpi	r24, 0x6C	; 108
 734:	21 f4       	brne	.+8      	; 0x73e <vfprintf+0x108>
 736:	83 2d       	mov	r24, r3
 738:	80 68       	ori	r24, 0x80	; 128
 73a:	38 2e       	mov	r3, r24
 73c:	02 c0       	rjmp	.+4      	; 0x742 <vfprintf+0x10c>
 73e:	88 36       	cpi	r24, 0x68	; 104
 740:	41 f4       	brne	.+16     	; 0x752 <vfprintf+0x11c>
 742:	f7 01       	movw	r30, r14
 744:	93 fd       	sbrc	r25, 3
 746:	85 91       	lpm	r24, Z+
 748:	93 ff       	sbrs	r25, 3
 74a:	81 91       	ld	r24, Z+
 74c:	7f 01       	movw	r14, r30
 74e:	81 11       	cpse	r24, r1
 750:	b3 cf       	rjmp	.-154    	; 0x6b8 <vfprintf+0x82>
 752:	98 2f       	mov	r25, r24
 754:	9f 7d       	andi	r25, 0xDF	; 223
 756:	95 54       	subi	r25, 0x45	; 69
 758:	93 30       	cpi	r25, 0x03	; 3
 75a:	28 f4       	brcc	.+10     	; 0x766 <vfprintf+0x130>
 75c:	0c 5f       	subi	r16, 0xFC	; 252
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	9f e3       	ldi	r25, 0x3F	; 63
 762:	99 83       	std	Y+1, r25	; 0x01
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x14a>
 766:	83 36       	cpi	r24, 0x63	; 99
 768:	31 f0       	breq	.+12     	; 0x776 <vfprintf+0x140>
 76a:	83 37       	cpi	r24, 0x73	; 115
 76c:	71 f0       	breq	.+28     	; 0x78a <vfprintf+0x154>
 76e:	83 35       	cpi	r24, 0x53	; 83
 770:	09 f0       	breq	.+2      	; 0x774 <vfprintf+0x13e>
 772:	55 c0       	rjmp	.+170    	; 0x81e <vfprintf+0x1e8>
 774:	20 c0       	rjmp	.+64     	; 0x7b6 <vfprintf+0x180>
 776:	f8 01       	movw	r30, r16
 778:	80 81       	ld	r24, Z
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	0e 5f       	subi	r16, 0xFE	; 254
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	88 24       	eor	r8, r8
 782:	83 94       	inc	r8
 784:	91 2c       	mov	r9, r1
 786:	53 01       	movw	r10, r6
 788:	12 c0       	rjmp	.+36     	; 0x7ae <vfprintf+0x178>
 78a:	28 01       	movw	r4, r16
 78c:	f2 e0       	ldi	r31, 0x02	; 2
 78e:	4f 0e       	add	r4, r31
 790:	51 1c       	adc	r5, r1
 792:	f8 01       	movw	r30, r16
 794:	a0 80       	ld	r10, Z
 796:	b1 80       	ldd	r11, Z+1	; 0x01
 798:	36 fe       	sbrs	r3, 6
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x16c>
 79c:	69 2d       	mov	r22, r9
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0x170>
 7a2:	6f ef       	ldi	r22, 0xFF	; 255
 7a4:	7f ef       	ldi	r23, 0xFF	; 255
 7a6:	c5 01       	movw	r24, r10
 7a8:	4e d1       	rcall	.+668    	; 0xa46 <strnlen>
 7aa:	4c 01       	movw	r8, r24
 7ac:	82 01       	movw	r16, r4
 7ae:	f3 2d       	mov	r31, r3
 7b0:	ff 77       	andi	r31, 0x7F	; 127
 7b2:	3f 2e       	mov	r3, r31
 7b4:	15 c0       	rjmp	.+42     	; 0x7e0 <vfprintf+0x1aa>
 7b6:	28 01       	movw	r4, r16
 7b8:	22 e0       	ldi	r18, 0x02	; 2
 7ba:	42 0e       	add	r4, r18
 7bc:	51 1c       	adc	r5, r1
 7be:	f8 01       	movw	r30, r16
 7c0:	a0 80       	ld	r10, Z
 7c2:	b1 80       	ldd	r11, Z+1	; 0x01
 7c4:	36 fe       	sbrs	r3, 6
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <vfprintf+0x198>
 7c8:	69 2d       	mov	r22, r9
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <vfprintf+0x19c>
 7ce:	6f ef       	ldi	r22, 0xFF	; 255
 7d0:	7f ef       	ldi	r23, 0xFF	; 255
 7d2:	c5 01       	movw	r24, r10
 7d4:	2d d1       	rcall	.+602    	; 0xa30 <strnlen_P>
 7d6:	4c 01       	movw	r8, r24
 7d8:	f3 2d       	mov	r31, r3
 7da:	f0 68       	ori	r31, 0x80	; 128
 7dc:	3f 2e       	mov	r3, r31
 7de:	82 01       	movw	r16, r4
 7e0:	33 fc       	sbrc	r3, 3
 7e2:	19 c0       	rjmp	.+50     	; 0x816 <vfprintf+0x1e0>
 7e4:	82 2d       	mov	r24, r2
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	88 16       	cp	r8, r24
 7ea:	99 06       	cpc	r9, r25
 7ec:	a0 f4       	brcc	.+40     	; 0x816 <vfprintf+0x1e0>
 7ee:	b6 01       	movw	r22, r12
 7f0:	80 e2       	ldi	r24, 0x20	; 32
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	33 d1       	rcall	.+614    	; 0xa5c <fputc>
 7f6:	2a 94       	dec	r2
 7f8:	f5 cf       	rjmp	.-22     	; 0x7e4 <vfprintf+0x1ae>
 7fa:	f5 01       	movw	r30, r10
 7fc:	37 fc       	sbrc	r3, 7
 7fe:	85 91       	lpm	r24, Z+
 800:	37 fe       	sbrs	r3, 7
 802:	81 91       	ld	r24, Z+
 804:	5f 01       	movw	r10, r30
 806:	b6 01       	movw	r22, r12
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	28 d1       	rcall	.+592    	; 0xa5c <fputc>
 80c:	21 10       	cpse	r2, r1
 80e:	2a 94       	dec	r2
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	82 1a       	sub	r8, r18
 814:	91 08       	sbc	r9, r1
 816:	81 14       	cp	r8, r1
 818:	91 04       	cpc	r9, r1
 81a:	79 f7       	brne	.-34     	; 0x7fa <vfprintf+0x1c4>
 81c:	e1 c0       	rjmp	.+450    	; 0x9e0 <vfprintf+0x3aa>
 81e:	84 36       	cpi	r24, 0x64	; 100
 820:	11 f0       	breq	.+4      	; 0x826 <vfprintf+0x1f0>
 822:	89 36       	cpi	r24, 0x69	; 105
 824:	39 f5       	brne	.+78     	; 0x874 <vfprintf+0x23e>
 826:	f8 01       	movw	r30, r16
 828:	37 fe       	sbrs	r3, 7
 82a:	07 c0       	rjmp	.+14     	; 0x83a <vfprintf+0x204>
 82c:	60 81       	ld	r22, Z
 82e:	71 81       	ldd	r23, Z+1	; 0x01
 830:	82 81       	ldd	r24, Z+2	; 0x02
 832:	93 81       	ldd	r25, Z+3	; 0x03
 834:	0c 5f       	subi	r16, 0xFC	; 252
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	08 c0       	rjmp	.+16     	; 0x84a <vfprintf+0x214>
 83a:	60 81       	ld	r22, Z
 83c:	71 81       	ldd	r23, Z+1	; 0x01
 83e:	07 2e       	mov	r0, r23
 840:	00 0c       	add	r0, r0
 842:	88 0b       	sbc	r24, r24
 844:	99 0b       	sbc	r25, r25
 846:	0e 5f       	subi	r16, 0xFE	; 254
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	f3 2d       	mov	r31, r3
 84c:	ff 76       	andi	r31, 0x6F	; 111
 84e:	3f 2e       	mov	r3, r31
 850:	97 ff       	sbrs	r25, 7
 852:	09 c0       	rjmp	.+18     	; 0x866 <vfprintf+0x230>
 854:	90 95       	com	r25
 856:	80 95       	com	r24
 858:	70 95       	com	r23
 85a:	61 95       	neg	r22
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	f0 68       	ori	r31, 0x80	; 128
 864:	3f 2e       	mov	r3, r31
 866:	2a e0       	ldi	r18, 0x0A	; 10
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	a3 01       	movw	r20, r6
 86c:	33 d1       	rcall	.+614    	; 0xad4 <__ultoa_invert>
 86e:	88 2e       	mov	r8, r24
 870:	86 18       	sub	r8, r6
 872:	44 c0       	rjmp	.+136    	; 0x8fc <vfprintf+0x2c6>
 874:	85 37       	cpi	r24, 0x75	; 117
 876:	31 f4       	brne	.+12     	; 0x884 <vfprintf+0x24e>
 878:	23 2d       	mov	r18, r3
 87a:	2f 7e       	andi	r18, 0xEF	; 239
 87c:	b2 2e       	mov	r11, r18
 87e:	2a e0       	ldi	r18, 0x0A	; 10
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	25 c0       	rjmp	.+74     	; 0x8ce <vfprintf+0x298>
 884:	93 2d       	mov	r25, r3
 886:	99 7f       	andi	r25, 0xF9	; 249
 888:	b9 2e       	mov	r11, r25
 88a:	8f 36       	cpi	r24, 0x6F	; 111
 88c:	c1 f0       	breq	.+48     	; 0x8be <vfprintf+0x288>
 88e:	18 f4       	brcc	.+6      	; 0x896 <vfprintf+0x260>
 890:	88 35       	cpi	r24, 0x58	; 88
 892:	79 f0       	breq	.+30     	; 0x8b2 <vfprintf+0x27c>
 894:	ae c0       	rjmp	.+348    	; 0x9f2 <vfprintf+0x3bc>
 896:	80 37       	cpi	r24, 0x70	; 112
 898:	19 f0       	breq	.+6      	; 0x8a0 <vfprintf+0x26a>
 89a:	88 37       	cpi	r24, 0x78	; 120
 89c:	21 f0       	breq	.+8      	; 0x8a6 <vfprintf+0x270>
 89e:	a9 c0       	rjmp	.+338    	; 0x9f2 <vfprintf+0x3bc>
 8a0:	e9 2f       	mov	r30, r25
 8a2:	e0 61       	ori	r30, 0x10	; 16
 8a4:	be 2e       	mov	r11, r30
 8a6:	b4 fe       	sbrs	r11, 4
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <vfprintf+0x28e>
 8aa:	fb 2d       	mov	r31, r11
 8ac:	f4 60       	ori	r31, 0x04	; 4
 8ae:	bf 2e       	mov	r11, r31
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <vfprintf+0x28e>
 8b2:	34 fe       	sbrs	r3, 4
 8b4:	0a c0       	rjmp	.+20     	; 0x8ca <vfprintf+0x294>
 8b6:	29 2f       	mov	r18, r25
 8b8:	26 60       	ori	r18, 0x06	; 6
 8ba:	b2 2e       	mov	r11, r18
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x294>
 8be:	28 e0       	ldi	r18, 0x08	; 8
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <vfprintf+0x298>
 8c4:	20 e1       	ldi	r18, 0x10	; 16
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x298>
 8ca:	20 e1       	ldi	r18, 0x10	; 16
 8cc:	32 e0       	ldi	r19, 0x02	; 2
 8ce:	f8 01       	movw	r30, r16
 8d0:	b7 fe       	sbrs	r11, 7
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <vfprintf+0x2ac>
 8d4:	60 81       	ld	r22, Z
 8d6:	71 81       	ldd	r23, Z+1	; 0x01
 8d8:	82 81       	ldd	r24, Z+2	; 0x02
 8da:	93 81       	ldd	r25, Z+3	; 0x03
 8dc:	0c 5f       	subi	r16, 0xFC	; 252
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	06 c0       	rjmp	.+12     	; 0x8ee <vfprintf+0x2b8>
 8e2:	60 81       	ld	r22, Z
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 5f       	subi	r16, 0xFE	; 254
 8ec:	1f 4f       	sbci	r17, 0xFF	; 255
 8ee:	a3 01       	movw	r20, r6
 8f0:	f1 d0       	rcall	.+482    	; 0xad4 <__ultoa_invert>
 8f2:	88 2e       	mov	r8, r24
 8f4:	86 18       	sub	r8, r6
 8f6:	fb 2d       	mov	r31, r11
 8f8:	ff 77       	andi	r31, 0x7F	; 127
 8fa:	3f 2e       	mov	r3, r31
 8fc:	36 fe       	sbrs	r3, 6
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <vfprintf+0x2e4>
 900:	23 2d       	mov	r18, r3
 902:	2e 7f       	andi	r18, 0xFE	; 254
 904:	a2 2e       	mov	r10, r18
 906:	89 14       	cp	r8, r9
 908:	58 f4       	brcc	.+22     	; 0x920 <vfprintf+0x2ea>
 90a:	34 fe       	sbrs	r3, 4
 90c:	0b c0       	rjmp	.+22     	; 0x924 <vfprintf+0x2ee>
 90e:	32 fc       	sbrc	r3, 2
 910:	09 c0       	rjmp	.+18     	; 0x924 <vfprintf+0x2ee>
 912:	83 2d       	mov	r24, r3
 914:	8e 7e       	andi	r24, 0xEE	; 238
 916:	a8 2e       	mov	r10, r24
 918:	05 c0       	rjmp	.+10     	; 0x924 <vfprintf+0x2ee>
 91a:	b8 2c       	mov	r11, r8
 91c:	a3 2c       	mov	r10, r3
 91e:	03 c0       	rjmp	.+6      	; 0x926 <vfprintf+0x2f0>
 920:	b8 2c       	mov	r11, r8
 922:	01 c0       	rjmp	.+2      	; 0x926 <vfprintf+0x2f0>
 924:	b9 2c       	mov	r11, r9
 926:	a4 fe       	sbrs	r10, 4
 928:	0f c0       	rjmp	.+30     	; 0x948 <vfprintf+0x312>
 92a:	fe 01       	movw	r30, r28
 92c:	e8 0d       	add	r30, r8
 92e:	f1 1d       	adc	r31, r1
 930:	80 81       	ld	r24, Z
 932:	80 33       	cpi	r24, 0x30	; 48
 934:	21 f4       	brne	.+8      	; 0x93e <vfprintf+0x308>
 936:	9a 2d       	mov	r25, r10
 938:	99 7e       	andi	r25, 0xE9	; 233
 93a:	a9 2e       	mov	r10, r25
 93c:	09 c0       	rjmp	.+18     	; 0x950 <vfprintf+0x31a>
 93e:	a2 fe       	sbrs	r10, 2
 940:	06 c0       	rjmp	.+12     	; 0x94e <vfprintf+0x318>
 942:	b3 94       	inc	r11
 944:	b3 94       	inc	r11
 946:	04 c0       	rjmp	.+8      	; 0x950 <vfprintf+0x31a>
 948:	8a 2d       	mov	r24, r10
 94a:	86 78       	andi	r24, 0x86	; 134
 94c:	09 f0       	breq	.+2      	; 0x950 <vfprintf+0x31a>
 94e:	b3 94       	inc	r11
 950:	a3 fc       	sbrc	r10, 3
 952:	10 c0       	rjmp	.+32     	; 0x974 <vfprintf+0x33e>
 954:	a0 fe       	sbrs	r10, 0
 956:	06 c0       	rjmp	.+12     	; 0x964 <vfprintf+0x32e>
 958:	b2 14       	cp	r11, r2
 95a:	80 f4       	brcc	.+32     	; 0x97c <vfprintf+0x346>
 95c:	28 0c       	add	r2, r8
 95e:	92 2c       	mov	r9, r2
 960:	9b 18       	sub	r9, r11
 962:	0d c0       	rjmp	.+26     	; 0x97e <vfprintf+0x348>
 964:	b2 14       	cp	r11, r2
 966:	58 f4       	brcc	.+22     	; 0x97e <vfprintf+0x348>
 968:	b6 01       	movw	r22, r12
 96a:	80 e2       	ldi	r24, 0x20	; 32
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	76 d0       	rcall	.+236    	; 0xa5c <fputc>
 970:	b3 94       	inc	r11
 972:	f8 cf       	rjmp	.-16     	; 0x964 <vfprintf+0x32e>
 974:	b2 14       	cp	r11, r2
 976:	18 f4       	brcc	.+6      	; 0x97e <vfprintf+0x348>
 978:	2b 18       	sub	r2, r11
 97a:	02 c0       	rjmp	.+4      	; 0x980 <vfprintf+0x34a>
 97c:	98 2c       	mov	r9, r8
 97e:	21 2c       	mov	r2, r1
 980:	a4 fe       	sbrs	r10, 4
 982:	0f c0       	rjmp	.+30     	; 0x9a2 <vfprintf+0x36c>
 984:	b6 01       	movw	r22, r12
 986:	80 e3       	ldi	r24, 0x30	; 48
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	68 d0       	rcall	.+208    	; 0xa5c <fputc>
 98c:	a2 fe       	sbrs	r10, 2
 98e:	16 c0       	rjmp	.+44     	; 0x9bc <vfprintf+0x386>
 990:	a1 fc       	sbrc	r10, 1
 992:	03 c0       	rjmp	.+6      	; 0x99a <vfprintf+0x364>
 994:	88 e7       	ldi	r24, 0x78	; 120
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	02 c0       	rjmp	.+4      	; 0x99e <vfprintf+0x368>
 99a:	88 e5       	ldi	r24, 0x58	; 88
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	b6 01       	movw	r22, r12
 9a0:	0c c0       	rjmp	.+24     	; 0x9ba <vfprintf+0x384>
 9a2:	8a 2d       	mov	r24, r10
 9a4:	86 78       	andi	r24, 0x86	; 134
 9a6:	51 f0       	breq	.+20     	; 0x9bc <vfprintf+0x386>
 9a8:	a1 fe       	sbrs	r10, 1
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <vfprintf+0x37a>
 9ac:	8b e2       	ldi	r24, 0x2B	; 43
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <vfprintf+0x37c>
 9b0:	80 e2       	ldi	r24, 0x20	; 32
 9b2:	a7 fc       	sbrc	r10, 7
 9b4:	8d e2       	ldi	r24, 0x2D	; 45
 9b6:	b6 01       	movw	r22, r12
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	50 d0       	rcall	.+160    	; 0xa5c <fputc>
 9bc:	89 14       	cp	r8, r9
 9be:	30 f4       	brcc	.+12     	; 0x9cc <vfprintf+0x396>
 9c0:	b6 01       	movw	r22, r12
 9c2:	80 e3       	ldi	r24, 0x30	; 48
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	4a d0       	rcall	.+148    	; 0xa5c <fputc>
 9c8:	9a 94       	dec	r9
 9ca:	f8 cf       	rjmp	.-16     	; 0x9bc <vfprintf+0x386>
 9cc:	8a 94       	dec	r8
 9ce:	f3 01       	movw	r30, r6
 9d0:	e8 0d       	add	r30, r8
 9d2:	f1 1d       	adc	r31, r1
 9d4:	80 81       	ld	r24, Z
 9d6:	b6 01       	movw	r22, r12
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	40 d0       	rcall	.+128    	; 0xa5c <fputc>
 9dc:	81 10       	cpse	r8, r1
 9de:	f6 cf       	rjmp	.-20     	; 0x9cc <vfprintf+0x396>
 9e0:	22 20       	and	r2, r2
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <vfprintf+0x3b0>
 9e4:	4e ce       	rjmp	.-868    	; 0x682 <vfprintf+0x4c>
 9e6:	b6 01       	movw	r22, r12
 9e8:	80 e2       	ldi	r24, 0x20	; 32
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	37 d0       	rcall	.+110    	; 0xa5c <fputc>
 9ee:	2a 94       	dec	r2
 9f0:	f7 cf       	rjmp	.-18     	; 0x9e0 <vfprintf+0x3aa>
 9f2:	f6 01       	movw	r30, r12
 9f4:	86 81       	ldd	r24, Z+6	; 0x06
 9f6:	97 81       	ldd	r25, Z+7	; 0x07
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <vfprintf+0x3c8>
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	9f ef       	ldi	r25, 0xFF	; 255
 9fe:	2b 96       	adiw	r28, 0x0b	; 11
 a00:	0f b6       	in	r0, 0x3f	; 63
 a02:	f8 94       	cli
 a04:	de bf       	out	0x3e, r29	; 62
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	cd bf       	out	0x3d, r28	; 61
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	1f 91       	pop	r17
 a10:	0f 91       	pop	r16
 a12:	ff 90       	pop	r15
 a14:	ef 90       	pop	r14
 a16:	df 90       	pop	r13
 a18:	cf 90       	pop	r12
 a1a:	bf 90       	pop	r11
 a1c:	af 90       	pop	r10
 a1e:	9f 90       	pop	r9
 a20:	8f 90       	pop	r8
 a22:	7f 90       	pop	r7
 a24:	6f 90       	pop	r6
 a26:	5f 90       	pop	r5
 a28:	4f 90       	pop	r4
 a2a:	3f 90       	pop	r3
 a2c:	2f 90       	pop	r2
 a2e:	08 95       	ret

00000a30 <strnlen_P>:
 a30:	fc 01       	movw	r30, r24
 a32:	05 90       	lpm	r0, Z+
 a34:	61 50       	subi	r22, 0x01	; 1
 a36:	70 40       	sbci	r23, 0x00	; 0
 a38:	01 10       	cpse	r0, r1
 a3a:	d8 f7       	brcc	.-10     	; 0xa32 <strnlen_P+0x2>
 a3c:	80 95       	com	r24
 a3e:	90 95       	com	r25
 a40:	8e 0f       	add	r24, r30
 a42:	9f 1f       	adc	r25, r31
 a44:	08 95       	ret

00000a46 <strnlen>:
 a46:	fc 01       	movw	r30, r24
 a48:	61 50       	subi	r22, 0x01	; 1
 a4a:	70 40       	sbci	r23, 0x00	; 0
 a4c:	01 90       	ld	r0, Z+
 a4e:	01 10       	cpse	r0, r1
 a50:	d8 f7       	brcc	.-10     	; 0xa48 <strnlen+0x2>
 a52:	80 95       	com	r24
 a54:	90 95       	com	r25
 a56:	8e 0f       	add	r24, r30
 a58:	9f 1f       	adc	r25, r31
 a5a:	08 95       	ret

00000a5c <fputc>:
 a5c:	0f 93       	push	r16
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
 a64:	fb 01       	movw	r30, r22
 a66:	23 81       	ldd	r18, Z+3	; 0x03
 a68:	21 fd       	sbrc	r18, 1
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <fputc+0x16>
 a6c:	8f ef       	ldi	r24, 0xFF	; 255
 a6e:	9f ef       	ldi	r25, 0xFF	; 255
 a70:	2c c0       	rjmp	.+88     	; 0xaca <fputc+0x6e>
 a72:	22 ff       	sbrs	r18, 2
 a74:	16 c0       	rjmp	.+44     	; 0xaa2 <fputc+0x46>
 a76:	46 81       	ldd	r20, Z+6	; 0x06
 a78:	57 81       	ldd	r21, Z+7	; 0x07
 a7a:	24 81       	ldd	r18, Z+4	; 0x04
 a7c:	35 81       	ldd	r19, Z+5	; 0x05
 a7e:	42 17       	cp	r20, r18
 a80:	53 07       	cpc	r21, r19
 a82:	44 f4       	brge	.+16     	; 0xa94 <fputc+0x38>
 a84:	a0 81       	ld	r26, Z
 a86:	b1 81       	ldd	r27, Z+1	; 0x01
 a88:	9d 01       	movw	r18, r26
 a8a:	2f 5f       	subi	r18, 0xFF	; 255
 a8c:	3f 4f       	sbci	r19, 0xFF	; 255
 a8e:	31 83       	std	Z+1, r19	; 0x01
 a90:	20 83       	st	Z, r18
 a92:	8c 93       	st	X, r24
 a94:	26 81       	ldd	r18, Z+6	; 0x06
 a96:	37 81       	ldd	r19, Z+7	; 0x07
 a98:	2f 5f       	subi	r18, 0xFF	; 255
 a9a:	3f 4f       	sbci	r19, 0xFF	; 255
 a9c:	37 83       	std	Z+7, r19	; 0x07
 a9e:	26 83       	std	Z+6, r18	; 0x06
 aa0:	14 c0       	rjmp	.+40     	; 0xaca <fputc+0x6e>
 aa2:	8b 01       	movw	r16, r22
 aa4:	ec 01       	movw	r28, r24
 aa6:	fb 01       	movw	r30, r22
 aa8:	00 84       	ldd	r0, Z+8	; 0x08
 aaa:	f1 85       	ldd	r31, Z+9	; 0x09
 aac:	e0 2d       	mov	r30, r0
 aae:	09 95       	icall
 ab0:	89 2b       	or	r24, r25
 ab2:	e1 f6       	brne	.-72     	; 0xa6c <fputc+0x10>
 ab4:	d8 01       	movw	r26, r16
 ab6:	16 96       	adiw	r26, 0x06	; 6
 ab8:	8d 91       	ld	r24, X+
 aba:	9c 91       	ld	r25, X
 abc:	17 97       	sbiw	r26, 0x07	; 7
 abe:	01 96       	adiw	r24, 0x01	; 1
 ac0:	17 96       	adiw	r26, 0x07	; 7
 ac2:	9c 93       	st	X, r25
 ac4:	8e 93       	st	-X, r24
 ac6:	16 97       	sbiw	r26, 0x06	; 6
 ac8:	ce 01       	movw	r24, r28
 aca:	df 91       	pop	r29
 acc:	cf 91       	pop	r28
 ace:	1f 91       	pop	r17
 ad0:	0f 91       	pop	r16
 ad2:	08 95       	ret

00000ad4 <__ultoa_invert>:
 ad4:	fa 01       	movw	r30, r20
 ad6:	aa 27       	eor	r26, r26
 ad8:	28 30       	cpi	r18, 0x08	; 8
 ada:	51 f1       	breq	.+84     	; 0xb30 <__ultoa_invert+0x5c>
 adc:	20 31       	cpi	r18, 0x10	; 16
 ade:	81 f1       	breq	.+96     	; 0xb40 <__ultoa_invert+0x6c>
 ae0:	e8 94       	clt
 ae2:	6f 93       	push	r22
 ae4:	6e 7f       	andi	r22, 0xFE	; 254
 ae6:	6e 5f       	subi	r22, 0xFE	; 254
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	af 4f       	sbci	r26, 0xFF	; 255
 af0:	b1 e0       	ldi	r27, 0x01	; 1
 af2:	3e d0       	rcall	.+124    	; 0xb70 <__ultoa_invert+0x9c>
 af4:	b4 e0       	ldi	r27, 0x04	; 4
 af6:	3c d0       	rcall	.+120    	; 0xb70 <__ultoa_invert+0x9c>
 af8:	67 0f       	add	r22, r23
 afa:	78 1f       	adc	r23, r24
 afc:	89 1f       	adc	r24, r25
 afe:	9a 1f       	adc	r25, r26
 b00:	a1 1d       	adc	r26, r1
 b02:	68 0f       	add	r22, r24
 b04:	79 1f       	adc	r23, r25
 b06:	8a 1f       	adc	r24, r26
 b08:	91 1d       	adc	r25, r1
 b0a:	a1 1d       	adc	r26, r1
 b0c:	6a 0f       	add	r22, r26
 b0e:	71 1d       	adc	r23, r1
 b10:	81 1d       	adc	r24, r1
 b12:	91 1d       	adc	r25, r1
 b14:	a1 1d       	adc	r26, r1
 b16:	20 d0       	rcall	.+64     	; 0xb58 <__ultoa_invert+0x84>
 b18:	09 f4       	brne	.+2      	; 0xb1c <__ultoa_invert+0x48>
 b1a:	68 94       	set
 b1c:	3f 91       	pop	r19
 b1e:	2a e0       	ldi	r18, 0x0A	; 10
 b20:	26 9f       	mul	r18, r22
 b22:	11 24       	eor	r1, r1
 b24:	30 19       	sub	r19, r0
 b26:	30 5d       	subi	r19, 0xD0	; 208
 b28:	31 93       	st	Z+, r19
 b2a:	de f6       	brtc	.-74     	; 0xae2 <__ultoa_invert+0xe>
 b2c:	cf 01       	movw	r24, r30
 b2e:	08 95       	ret
 b30:	46 2f       	mov	r20, r22
 b32:	47 70       	andi	r20, 0x07	; 7
 b34:	40 5d       	subi	r20, 0xD0	; 208
 b36:	41 93       	st	Z+, r20
 b38:	b3 e0       	ldi	r27, 0x03	; 3
 b3a:	0f d0       	rcall	.+30     	; 0xb5a <__ultoa_invert+0x86>
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__ultoa_invert+0x5c>
 b3e:	f6 cf       	rjmp	.-20     	; 0xb2c <__ultoa_invert+0x58>
 b40:	46 2f       	mov	r20, r22
 b42:	4f 70       	andi	r20, 0x0F	; 15
 b44:	40 5d       	subi	r20, 0xD0	; 208
 b46:	4a 33       	cpi	r20, 0x3A	; 58
 b48:	18 f0       	brcs	.+6      	; 0xb50 <__ultoa_invert+0x7c>
 b4a:	49 5d       	subi	r20, 0xD9	; 217
 b4c:	31 fd       	sbrc	r19, 1
 b4e:	40 52       	subi	r20, 0x20	; 32
 b50:	41 93       	st	Z+, r20
 b52:	02 d0       	rcall	.+4      	; 0xb58 <__ultoa_invert+0x84>
 b54:	a9 f7       	brne	.-22     	; 0xb40 <__ultoa_invert+0x6c>
 b56:	ea cf       	rjmp	.-44     	; 0xb2c <__ultoa_invert+0x58>
 b58:	b4 e0       	ldi	r27, 0x04	; 4
 b5a:	a6 95       	lsr	r26
 b5c:	97 95       	ror	r25
 b5e:	87 95       	ror	r24
 b60:	77 95       	ror	r23
 b62:	67 95       	ror	r22
 b64:	ba 95       	dec	r27
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0x86>
 b68:	00 97       	sbiw	r24, 0x00	; 0
 b6a:	61 05       	cpc	r22, r1
 b6c:	71 05       	cpc	r23, r1
 b6e:	08 95       	ret
 b70:	9b 01       	movw	r18, r22
 b72:	ac 01       	movw	r20, r24
 b74:	0a 2e       	mov	r0, r26
 b76:	06 94       	lsr	r0
 b78:	57 95       	ror	r21
 b7a:	47 95       	ror	r20
 b7c:	37 95       	ror	r19
 b7e:	27 95       	ror	r18
 b80:	ba 95       	dec	r27
 b82:	c9 f7       	brne	.-14     	; 0xb76 <__ultoa_invert+0xa2>
 b84:	62 0f       	add	r22, r18
 b86:	73 1f       	adc	r23, r19
 b88:	84 1f       	adc	r24, r20
 b8a:	95 1f       	adc	r25, r21
 b8c:	a0 1d       	adc	r26, r0
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
