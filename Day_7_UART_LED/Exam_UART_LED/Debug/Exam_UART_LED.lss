
Exam_UART_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000008da  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080012e  0080012e  0000099c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001011  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b04  00000000  00000000  00001af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d0  00000000  00000000  000025fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d0  00000000  00000000  00003351  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	28 c1       	rjmp	.+592    	; 0x29a <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 33       	cpi	r26, 0x36	; 54
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fd d0       	rcall	.+506    	; 0x2be <main>
  c4:	08 c4       	rjmp	.+2064   	; 0x8d6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LED_Init>:
	{&PORTA, 7},
};


void LED_Init(LED *led)
{
  c8:	dc 01       	movw	r26, r24
	*(led->port - 1) |= (1<< led->pin);
  ca:	ed 91       	ld	r30, X+
  cc:	fc 91       	ld	r31, X
  ce:	11 97       	sbiw	r26, 0x01	; 1
  d0:	42 91       	ld	r20, -Z
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	c9 01       	movw	r24, r18
  d8:	12 96       	adiw	r26, 0x02	; 2
  da:	0c 90       	ld	r0, X
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <LED_Init+0x1a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <LED_Init+0x16>
  e6:	84 2b       	or	r24, r20
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <LED_BAR_Init>:
}


void LED_BAR_Init()
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	LED_BAR_DDR = 0xff;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a bb       	out	0x1a, r24	; 26
	LED_BAR_PORT = 0x00; // 꺼진 상태로 출발
  f4:	1b ba       	out	0x1b, r1	; 27
	
	for (int i = 0 ; i < LED_COUNT ; i++)
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	09 c0       	rjmp	.+18     	; 0x10e <LED_BAR_Init+0x22>
	{
		LED_Init(&leds[i]);
  fc:	ce 01       	movw	r24, r28
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	8c 0f       	add	r24, r28
 104:	9d 1f       	adc	r25, r29
 106:	80 50       	subi	r24, 0x00	; 0
 108:	9f 4f       	sbci	r25, 0xFF	; 255
 10a:	de df       	rcall	.-68     	; 0xc8 <LED_Init>
void LED_BAR_Init()
{
	LED_BAR_DDR = 0xff;
	LED_BAR_PORT = 0x00; // 꺼진 상태로 출발
	
	for (int i = 0 ; i < LED_COUNT ; i++)
 10c:	21 96       	adiw	r28, 0x01	; 1
 10e:	c8 30       	cpi	r28, 0x08	; 8
 110:	d1 05       	cpc	r29, r1
 112:	a4 f3       	brlt	.-24     	; 0xfc <LED_BAR_Init+0x10>
	{
		LED_Init(&leds[i]);
	}
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <LED_On>:


void LED_On(LED *led)
{
 11a:	dc 01       	movw	r26, r24
	*(led->port) |= (1<<led->pin);
 11c:	ed 91       	ld	r30, X+
 11e:	fc 91       	ld	r31, X
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	40 81       	ld	r20, Z
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	c9 01       	movw	r24, r18
 12a:	12 96       	adiw	r26, 0x02	; 2
 12c:	0c 90       	ld	r0, X
 12e:	02 c0       	rjmp	.+4      	; 0x134 <LED_On+0x1a>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <LED_On+0x16>
 138:	84 2b       	or	r24, r20
 13a:	80 83       	st	Z, r24
 13c:	08 95       	ret

0000013e <LED_Off>:
}

void LED_Off(LED *led)
{
	*(led->port) &= ~(1<<led->pin);
 13e:	dc 01       	movw	r26, r24
 140:	ed 91       	ld	r30, X+
 142:	fc 91       	ld	r31, X
 144:	11 97       	sbiw	r26, 0x01	; 1
 146:	40 81       	ld	r20, Z
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	b9 01       	movw	r22, r18
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	0c 90       	ld	r0, X
 152:	02 c0       	rjmp	.+4      	; 0x158 <LED_Off+0x1a>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <LED_Off+0x16>
 15c:	cb 01       	movw	r24, r22
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <LED_Left_Shift>:
}


void LED_Left_Shift(LED *leds)
{
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	8c 01       	movw	r16, r24
	for (int i = 0 ; i < LED_COUNT ; i++)
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
 174:	12 c0       	rjmp	.+36     	; 0x19a <LED_Left_Shift+0x34>
	{
		LED_On(&leds[i]);
 176:	ce 01       	movw	r24, r28
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	8c 0f       	add	r24, r28
 17e:	9d 1f       	adc	r25, r29
 180:	80 0f       	add	r24, r16
 182:	91 1f       	adc	r25, r17
 184:	ca df       	rcall	.-108    	; 0x11a <LED_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	83 ec       	ldi	r24, 0xC3	; 195
 18a:	99 e0       	ldi	r25, 0x09	; 9
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <LED_Left_Shift+0x26>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LED_Left_Shift+0x30>
 196:	00 00       	nop
}


void LED_Left_Shift(LED *leds)
{
	for (int i = 0 ; i < LED_COUNT ; i++)
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	c8 30       	cpi	r28, 0x08	; 8
 19c:	d1 05       	cpc	r29, r1
 19e:	5c f3       	brlt	.-42     	; 0x176 <LED_Left_Shift+0x10>
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	12 c0       	rjmp	.+36     	; 0x1ca <LED_Left_Shift+0x64>
		LED_On(&leds[i]);
		_delay_ms(200);
	}
	for (int i = 0 ; i < LED_COUNT ; i++)
	{
		LED_Off(&leds[i]);
 1a6:	ce 01       	movw	r24, r28
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	8c 0f       	add	r24, r28
 1ae:	9d 1f       	adc	r25, r29
 1b0:	80 0f       	add	r24, r16
 1b2:	91 1f       	adc	r25, r17
 1b4:	c4 df       	rcall	.-120    	; 0x13e <LED_Off>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	83 ec       	ldi	r24, 0xC3	; 195
 1ba:	99 e0       	ldi	r25, 0x09	; 9
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <LED_Left_Shift+0x56>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LED_Left_Shift+0x60>
 1c6:	00 00       	nop
	for (int i = 0 ; i < LED_COUNT ; i++)
	{
		LED_On(&leds[i]);
		_delay_ms(200);
	}
	for (int i = 0 ; i < LED_COUNT ; i++)
 1c8:	21 96       	adiw	r28, 0x01	; 1
 1ca:	c8 30       	cpi	r28, 0x08	; 8
 1cc:	d1 05       	cpc	r29, r1
 1ce:	5c f3       	brlt	.-42     	; 0x1a6 <LED_Left_Shift+0x40>
	{
		LED_Off(&leds[i]);
		_delay_ms(200);
	}
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <LED_Right_Shift>:

void LED_Right_Shift(LED *leds)
{
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	8c 01       	movw	r16, r24
	for (int i = 7 ; i >= 0 ; i--)
 1e4:	c7 e0       	ldi	r28, 0x07	; 7
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	12 c0       	rjmp	.+36     	; 0x20e <LED_Right_Shift+0x34>
	{
		LED_On(&leds[i]);
 1ea:	ce 01       	movw	r24, r28
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	8c 0f       	add	r24, r28
 1f2:	9d 1f       	adc	r25, r29
 1f4:	80 0f       	add	r24, r16
 1f6:	91 1f       	adc	r25, r17
 1f8:	90 df       	rcall	.-224    	; 0x11a <LED_On>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	83 ec       	ldi	r24, 0xC3	; 195
 1fe:	99 e0       	ldi	r25, 0x09	; 9
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <LED_Right_Shift+0x26>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LED_Right_Shift+0x30>
 20a:	00 00       	nop
	}
}

void LED_Right_Shift(LED *leds)
{
	for (int i = 7 ; i >= 0 ; i--)
 20c:	21 97       	sbiw	r28, 0x01	; 1
 20e:	dd 23       	and	r29, r29
 210:	64 f7       	brge	.-40     	; 0x1ea <LED_Right_Shift+0x10>
 212:	c7 e0       	ldi	r28, 0x07	; 7
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	12 c0       	rjmp	.+36     	; 0x23c <LED_Right_Shift+0x62>
		LED_On(&leds[i]);
		_delay_ms(200);
	}
	for (int i = 7 ; i >= 0 ; i--)
	{
		LED_Off(&leds[i]);
 218:	ce 01       	movw	r24, r28
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	8c 0f       	add	r24, r28
 220:	9d 1f       	adc	r25, r29
 222:	80 0f       	add	r24, r16
 224:	91 1f       	adc	r25, r17
 226:	8b df       	rcall	.-234    	; 0x13e <LED_Off>
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	83 ec       	ldi	r24, 0xC3	; 195
 22c:	99 e0       	ldi	r25, 0x09	; 9
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <LED_Right_Shift+0x54>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LED_Right_Shift+0x5e>
 238:	00 00       	nop
	for (int i = 7 ; i >= 0 ; i--)
	{
		LED_On(&leds[i]);
		_delay_ms(200);
	}
	for (int i = 7 ; i >= 0 ; i--)
 23a:	21 97       	sbiw	r28, 0x01	; 1
 23c:	dd 23       	and	r29, r29
 23e:	64 f7       	brge	.-40     	; 0x218 <LED_Right_Shift+0x3e>
	{
		LED_Off(&leds[i]);
		_delay_ms(200);
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <LED_Blink>:


void LED_Blink(uint8_t *LED_Data)
{
	LED_BAR_PORT = 0xaa;
 24a:	8a ea       	ldi	r24, 0xAA	; 170
 24c:	8b bb       	out	0x1b, r24	; 27
	for (int i = 0 ; i < 15 ; i++)
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	0e c0       	rjmp	.+28     	; 0x270 <LED_Blink+0x26>
	{
		LED_BAR_PORT = ~LED_BAR_PORT;
 254:	8b b3       	in	r24, 0x1b	; 27
 256:	80 95       	com	r24
 258:	8b bb       	out	0x1b, r24	; 27
 25a:	4f ef       	ldi	r20, 0xFF	; 255
 25c:	85 ea       	ldi	r24, 0xA5	; 165
 25e:	9e e0       	ldi	r25, 0x0E	; 14
 260:	41 50       	subi	r20, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <LED_Blink+0x16>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LED_Blink+0x20>
 26a:	00 00       	nop


void LED_Blink(uint8_t *LED_Data)
{
	LED_BAR_PORT = 0xaa;
	for (int i = 0 ; i < 15 ; i++)
 26c:	2e 5f       	subi	r18, 0xFE	; 254
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	2f 30       	cpi	r18, 0x0F	; 15
 272:	31 05       	cpc	r19, r1
 274:	7c f3       	brlt	.-34     	; 0x254 <LED_Blink+0xa>
	{
		LED_BAR_PORT = ~LED_BAR_PORT;
		_delay_ms(300);
		i++;
	}
	LED_BAR_PORT = 0x00;
 276:	1b ba       	out	0x1b, r1	; 27
 278:	08 95       	ret

0000027a <LED_Single_On>:
}

void LED_Single_On()
{
	PORTD |= (1<<PIND2);
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	84 60       	ori	r24, 0x04	; 4
 27e:	82 bb       	out	0x12, r24	; 18
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	83 ed       	ldi	r24, 0xD3	; 211
 284:	90 e3       	ldi	r25, 0x30	; 48
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <LED_Single_On+0xc>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LED_Single_On+0x16>
 290:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<PIND2);
 292:	82 b3       	in	r24, 0x12	; 18
 294:	8b 7f       	andi	r24, 0xFB	; 251
 296:	82 bb       	out	0x12, r24	; 18
 298:	08 95       	ret

0000029a <__vector_18>:
char rxBuff;
uint8_t rxFlag = 0;


ISR(USART0_RX_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	8f 93       	push	r24
	rxBuff = UDR0;
 2a6:	8c b1       	in	r24, 0x0c	; 12
 2a8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rxBuff>
	rxFlag = 1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
}
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <main>:

int main(void)
{
	
	UART_Init();
 2be:	32 d0       	rcall	.+100    	; 0x324 <UART_Init>
	LED_BAR_Init();
 2c0:	15 df       	rcall	.-470    	; 0xec <LED_BAR_Init>
 2c2:	88 e1       	ldi	r24, 0x18	; 24
	//uint8_t LED_Data = 0x01;
	stdout = &OUTPUT;
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__iob+0x3>
 2ca:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__iob+0x2>
 2ce:	78 94       	sei
	sei();
 2d0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
	
	while (1)
	{
		if (rxFlag == 1)
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x12>
 2d8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
		{
			rxFlag = 0;
 2dc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rxBuff>
			//{
				//printf("Finish");
				//LED_Single_On();
			//}
						
			switch(rxBuff)
 2e0:	8c 34       	cpi	r24, 0x4C	; 76
 2e2:	59 f0       	breq	.+22     	; 0x2fa <main+0x3c>
 2e4:	82 35       	cpi	r24, 0x52	; 82
 2e6:	19 f0       	breq	.+6      	; 0x2ee <main+0x30>
 2e8:	82 34       	cpi	r24, 0x42	; 66
 2ea:	99 f4       	brne	.+38     	; 0x312 <main+0x54>
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <main+0x48>
			{
				case 'R' :
				printf("%c", rxBuff);
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	40 d0       	rcall	.+128    	; 0x372 <putchar>
				LED_Right_Shift(&leds);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	71 df       	rcall	.-286    	; 0x1da <LED_Right_Shift>
				break;
 2f8:	eb cf       	rjmp	.-42     	; 0x2d0 <main+0x12>
				
				case 'L' :
				printf("%c", rxBuff);
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	3a d0       	rcall	.+116    	; 0x372 <putchar>
				LED_Left_Shift(&leds);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	31 df       	rcall	.-414    	; 0x166 <LED_Left_Shift>
				break;
 304:	e5 cf       	rjmp	.-54     	; 0x2d0 <main+0x12>
				
				case 'B' :
				printf("%c", rxBuff);
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	34 d0       	rcall	.+104    	; 0x372 <putchar>
 30a:	80 e0       	ldi	r24, 0x00	; 0
				LED_Blink(&leds);
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	9d df       	rcall	.-198    	; 0x24a <LED_Blink>
				break;
 310:	df cf       	rjmp	.-66     	; 0x2d0 <main+0x12>
				
				default:
				printf("Finish");
 312:	86 e2       	ldi	r24, 0x26	; 38
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	9f 93       	push	r25
 318:	8f 93       	push	r24
 31a:	18 d0       	rcall	.+48     	; 0x34c <printf>
 31c:	ae df       	rcall	.-164    	; 0x27a <LED_Single_On>
				LED_Single_On();
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
				break;
 322:	d6 cf       	rjmp	.-84     	; 0x2d0 <main+0x12>

00000324 <UART_Init>:
#include "UART.h"


void UART_Init()
{
	UBRR0H = 0x00;
 324:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0xcf; // 9600bps, 2배속
 328:	8f ec       	ldi	r24, 0xCF	; 207
 32a:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = (1<<U2X0); // 2배속 모드 set
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	8b b9       	out	0x0b, r24	; 11
	
	UCSR0B |= (1<<RXEN0); // 수신 가능(RX PIN 허용)
 330:	8a b1       	in	r24, 0x0a	; 10
 332:	80 61       	ori	r24, 0x10	; 16
 334:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0); // 송신 가능(TX PIN 허용)
 336:	8a b1       	in	r24, 0x0a	; 10
 338:	88 60       	ori	r24, 0x08	; 8
 33a:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<RXCIE0); // 수신 Interrupt Enable
 33c:	8a b1       	in	r24, 0x0a	; 10
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	8a b9       	out	0x0a, r24	; 10
 342:	08 95       	ret

00000344 <UART_Transmit>:
}


void UART_Transmit(char data)
{
	while(!((UCSR0A) & (1<<UDRE0))); // UDR이 비어있다면, 다음 문장으로 넘어감
 344:	5d 9b       	sbis	0x0b, 5	; 11
 346:	fe cf       	rjmp	.-4      	; 0x344 <UART_Transmit>
	UDR0 = data;
 348:	8c b9       	out	0x0c, r24	; 12
 34a:	08 95       	ret

0000034c <printf>:
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	ae 01       	movw	r20, r28
 356:	4b 5f       	subi	r20, 0xFB	; 251
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	fa 01       	movw	r30, r20
 35c:	61 91       	ld	r22, Z+
 35e:	71 91       	ld	r23, Z+
 360:	af 01       	movw	r20, r30
 362:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__iob+0x2>
 366:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__iob+0x3>
 36a:	08 d0       	rcall	.+16     	; 0x37c <vfprintf>
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <putchar>:
 372:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__iob+0x2>
 376:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <__iob+0x3>
 37a:	13 c2       	rjmp	.+1062   	; 0x7a2 <fputc>

0000037c <vfprintf>:
 37c:	2f 92       	push	r2
 37e:	3f 92       	push	r3
 380:	4f 92       	push	r4
 382:	5f 92       	push	r5
 384:	6f 92       	push	r6
 386:	7f 92       	push	r7
 388:	8f 92       	push	r8
 38a:	9f 92       	push	r9
 38c:	af 92       	push	r10
 38e:	bf 92       	push	r11
 390:	cf 92       	push	r12
 392:	df 92       	push	r13
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	2b 97       	sbiw	r28, 0x0b	; 11
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	6c 01       	movw	r12, r24
 3b2:	7b 01       	movw	r14, r22
 3b4:	8a 01       	movw	r16, r20
 3b6:	fc 01       	movw	r30, r24
 3b8:	17 82       	std	Z+7, r1	; 0x07
 3ba:	16 82       	std	Z+6, r1	; 0x06
 3bc:	83 81       	ldd	r24, Z+3	; 0x03
 3be:	81 ff       	sbrs	r24, 1
 3c0:	bf c1       	rjmp	.+894    	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	3c 01       	movw	r6, r24
 3c8:	f6 01       	movw	r30, r12
 3ca:	93 81       	ldd	r25, Z+3	; 0x03
 3cc:	f7 01       	movw	r30, r14
 3ce:	93 fd       	sbrc	r25, 3
 3d0:	85 91       	lpm	r24, Z+
 3d2:	93 ff       	sbrs	r25, 3
 3d4:	81 91       	ld	r24, Z+
 3d6:	7f 01       	movw	r14, r30
 3d8:	88 23       	and	r24, r24
 3da:	09 f4       	brne	.+2      	; 0x3de <vfprintf+0x62>
 3dc:	ad c1       	rjmp	.+858    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 3de:	85 32       	cpi	r24, 0x25	; 37
 3e0:	39 f4       	brne	.+14     	; 0x3f0 <vfprintf+0x74>
 3e2:	93 fd       	sbrc	r25, 3
 3e4:	85 91       	lpm	r24, Z+
 3e6:	93 ff       	sbrs	r25, 3
 3e8:	81 91       	ld	r24, Z+
 3ea:	7f 01       	movw	r14, r30
 3ec:	85 32       	cpi	r24, 0x25	; 37
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <vfprintf+0x7c>
 3f0:	b6 01       	movw	r22, r12
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	d6 d1       	rcall	.+940    	; 0x7a2 <fputc>
 3f6:	e8 cf       	rjmp	.-48     	; 0x3c8 <vfprintf+0x4c>
 3f8:	91 2c       	mov	r9, r1
 3fa:	21 2c       	mov	r2, r1
 3fc:	31 2c       	mov	r3, r1
 3fe:	ff e1       	ldi	r31, 0x1F	; 31
 400:	f3 15       	cp	r31, r3
 402:	d8 f0       	brcs	.+54     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 404:	8b 32       	cpi	r24, 0x2B	; 43
 406:	79 f0       	breq	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 408:	38 f4       	brcc	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40a:	80 32       	cpi	r24, 0x20	; 32
 40c:	79 f0       	breq	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40e:	83 32       	cpi	r24, 0x23	; 35
 410:	a1 f4       	brne	.+40     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 412:	23 2d       	mov	r18, r3
 414:	20 61       	ori	r18, 0x10	; 16
 416:	1d c0       	rjmp	.+58     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 418:	8d 32       	cpi	r24, 0x2D	; 45
 41a:	61 f0       	breq	.+24     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 41c:	80 33       	cpi	r24, 0x30	; 48
 41e:	69 f4       	brne	.+26     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 420:	23 2d       	mov	r18, r3
 422:	21 60       	ori	r18, 0x01	; 1
 424:	16 c0       	rjmp	.+44     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 426:	83 2d       	mov	r24, r3
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	38 2e       	mov	r3, r24
 42c:	e3 2d       	mov	r30, r3
 42e:	e4 60       	ori	r30, 0x04	; 4
 430:	3e 2e       	mov	r3, r30
 432:	2a c0       	rjmp	.+84     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 434:	f3 2d       	mov	r31, r3
 436:	f8 60       	ori	r31, 0x08	; 8
 438:	1d c0       	rjmp	.+58     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 43a:	37 fc       	sbrc	r3, 7
 43c:	2d c0       	rjmp	.+90     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 43e:	20 ed       	ldi	r18, 0xD0	; 208
 440:	28 0f       	add	r18, r24
 442:	2a 30       	cpi	r18, 0x0A	; 10
 444:	40 f0       	brcs	.+16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 446:	8e 32       	cpi	r24, 0x2E	; 46
 448:	b9 f4       	brne	.+46     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 44a:	36 fc       	sbrc	r3, 6
 44c:	75 c1       	rjmp	.+746    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 44e:	23 2d       	mov	r18, r3
 450:	20 64       	ori	r18, 0x40	; 64
 452:	32 2e       	mov	r3, r18
 454:	19 c0       	rjmp	.+50     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 456:	36 fe       	sbrs	r3, 6
 458:	06 c0       	rjmp	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45a:	8a e0       	ldi	r24, 0x0A	; 10
 45c:	98 9e       	mul	r9, r24
 45e:	20 0d       	add	r18, r0
 460:	11 24       	eor	r1, r1
 462:	92 2e       	mov	r9, r18
 464:	11 c0       	rjmp	.+34     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 466:	ea e0       	ldi	r30, 0x0A	; 10
 468:	2e 9e       	mul	r2, r30
 46a:	20 0d       	add	r18, r0
 46c:	11 24       	eor	r1, r1
 46e:	22 2e       	mov	r2, r18
 470:	f3 2d       	mov	r31, r3
 472:	f0 62       	ori	r31, 0x20	; 32
 474:	3f 2e       	mov	r3, r31
 476:	08 c0       	rjmp	.+16     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 478:	8c 36       	cpi	r24, 0x6C	; 108
 47a:	21 f4       	brne	.+8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47c:	83 2d       	mov	r24, r3
 47e:	80 68       	ori	r24, 0x80	; 128
 480:	38 2e       	mov	r3, r24
 482:	02 c0       	rjmp	.+4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 484:	88 36       	cpi	r24, 0x68	; 104
 486:	41 f4       	brne	.+16     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 488:	f7 01       	movw	r30, r14
 48a:	93 fd       	sbrc	r25, 3
 48c:	85 91       	lpm	r24, Z+
 48e:	93 ff       	sbrs	r25, 3
 490:	81 91       	ld	r24, Z+
 492:	7f 01       	movw	r14, r30
 494:	81 11       	cpse	r24, r1
 496:	b3 cf       	rjmp	.-154    	; 0x3fe <vfprintf+0x82>
 498:	98 2f       	mov	r25, r24
 49a:	9f 7d       	andi	r25, 0xDF	; 223
 49c:	95 54       	subi	r25, 0x45	; 69
 49e:	93 30       	cpi	r25, 0x03	; 3
 4a0:	28 f4       	brcc	.+10     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a2:	0c 5f       	subi	r16, 0xFC	; 252
 4a4:	1f 4f       	sbci	r17, 0xFF	; 255
 4a6:	9f e3       	ldi	r25, 0x3F	; 63
 4a8:	99 83       	std	Y+1, r25	; 0x01
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ac:	83 36       	cpi	r24, 0x63	; 99
 4ae:	31 f0       	breq	.+12     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b0:	83 37       	cpi	r24, 0x73	; 115
 4b2:	71 f0       	breq	.+28     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4b4:	83 35       	cpi	r24, 0x53	; 83
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	55 c0       	rjmp	.+170    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 4ba:	20 c0       	rjmp	.+64     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4bc:	f8 01       	movw	r30, r16
 4be:	80 81       	ld	r24, Z
 4c0:	89 83       	std	Y+1, r24	; 0x01
 4c2:	0e 5f       	subi	r16, 0xFE	; 254
 4c4:	1f 4f       	sbci	r17, 0xFF	; 255
 4c6:	88 24       	eor	r8, r8
 4c8:	83 94       	inc	r8
 4ca:	91 2c       	mov	r9, r1
 4cc:	53 01       	movw	r10, r6
 4ce:	12 c0       	rjmp	.+36     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4d0:	28 01       	movw	r4, r16
 4d2:	f2 e0       	ldi	r31, 0x02	; 2
 4d4:	4f 0e       	add	r4, r31
 4d6:	51 1c       	adc	r5, r1
 4d8:	f8 01       	movw	r30, r16
 4da:	a0 80       	ld	r10, Z
 4dc:	b1 80       	ldd	r11, Z+1	; 0x01
 4de:	36 fe       	sbrs	r3, 6
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e2:	69 2d       	mov	r22, r9
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e8:	6f ef       	ldi	r22, 0xFF	; 255
 4ea:	7f ef       	ldi	r23, 0xFF	; 255
 4ec:	c5 01       	movw	r24, r10
 4ee:	4e d1       	rcall	.+668    	; 0x78c <strnlen>
 4f0:	4c 01       	movw	r8, r24
 4f2:	82 01       	movw	r16, r4
 4f4:	f3 2d       	mov	r31, r3
 4f6:	ff 77       	andi	r31, 0x7F	; 127
 4f8:	3f 2e       	mov	r3, r31
 4fa:	15 c0       	rjmp	.+42     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 4fc:	28 01       	movw	r4, r16
 4fe:	22 e0       	ldi	r18, 0x02	; 2
 500:	42 0e       	add	r4, r18
 502:	51 1c       	adc	r5, r1
 504:	f8 01       	movw	r30, r16
 506:	a0 80       	ld	r10, Z
 508:	b1 80       	ldd	r11, Z+1	; 0x01
 50a:	36 fe       	sbrs	r3, 6
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50e:	69 2d       	mov	r22, r9
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 514:	6f ef       	ldi	r22, 0xFF	; 255
 516:	7f ef       	ldi	r23, 0xFF	; 255
 518:	c5 01       	movw	r24, r10
 51a:	2d d1       	rcall	.+602    	; 0x776 <strnlen_P>
 51c:	4c 01       	movw	r8, r24
 51e:	f3 2d       	mov	r31, r3
 520:	f0 68       	ori	r31, 0x80	; 128
 522:	3f 2e       	mov	r3, r31
 524:	82 01       	movw	r16, r4
 526:	33 fc       	sbrc	r3, 3
 528:	19 c0       	rjmp	.+50     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 52a:	82 2d       	mov	r24, r2
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	88 16       	cp	r8, r24
 530:	99 06       	cpc	r9, r25
 532:	a0 f4       	brcc	.+40     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 534:	b6 01       	movw	r22, r12
 536:	80 e2       	ldi	r24, 0x20	; 32
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	33 d1       	rcall	.+614    	; 0x7a2 <fputc>
 53c:	2a 94       	dec	r2
 53e:	f5 cf       	rjmp	.-22     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 540:	f5 01       	movw	r30, r10
 542:	37 fc       	sbrc	r3, 7
 544:	85 91       	lpm	r24, Z+
 546:	37 fe       	sbrs	r3, 7
 548:	81 91       	ld	r24, Z+
 54a:	5f 01       	movw	r10, r30
 54c:	b6 01       	movw	r22, r12
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	28 d1       	rcall	.+592    	; 0x7a2 <fputc>
 552:	21 10       	cpse	r2, r1
 554:	2a 94       	dec	r2
 556:	21 e0       	ldi	r18, 0x01	; 1
 558:	82 1a       	sub	r8, r18
 55a:	91 08       	sbc	r9, r1
 55c:	81 14       	cp	r8, r1
 55e:	91 04       	cpc	r9, r1
 560:	79 f7       	brne	.-34     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 562:	e1 c0       	rjmp	.+450    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 564:	84 36       	cpi	r24, 0x64	; 100
 566:	11 f0       	breq	.+4      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 568:	89 36       	cpi	r24, 0x69	; 105
 56a:	39 f5       	brne	.+78     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 56c:	f8 01       	movw	r30, r16
 56e:	37 fe       	sbrs	r3, 7
 570:	07 c0       	rjmp	.+14     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 572:	60 81       	ld	r22, Z
 574:	71 81       	ldd	r23, Z+1	; 0x01
 576:	82 81       	ldd	r24, Z+2	; 0x02
 578:	93 81       	ldd	r25, Z+3	; 0x03
 57a:	0c 5f       	subi	r16, 0xFC	; 252
 57c:	1f 4f       	sbci	r17, 0xFF	; 255
 57e:	08 c0       	rjmp	.+16     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 580:	60 81       	ld	r22, Z
 582:	71 81       	ldd	r23, Z+1	; 0x01
 584:	07 2e       	mov	r0, r23
 586:	00 0c       	add	r0, r0
 588:	88 0b       	sbc	r24, r24
 58a:	99 0b       	sbc	r25, r25
 58c:	0e 5f       	subi	r16, 0xFE	; 254
 58e:	1f 4f       	sbci	r17, 0xFF	; 255
 590:	f3 2d       	mov	r31, r3
 592:	ff 76       	andi	r31, 0x6F	; 111
 594:	3f 2e       	mov	r3, r31
 596:	97 ff       	sbrs	r25, 7
 598:	09 c0       	rjmp	.+18     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 59a:	90 95       	com	r25
 59c:	80 95       	com	r24
 59e:	70 95       	com	r23
 5a0:	61 95       	neg	r22
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	8f 4f       	sbci	r24, 0xFF	; 255
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	f0 68       	ori	r31, 0x80	; 128
 5aa:	3f 2e       	mov	r3, r31
 5ac:	2a e0       	ldi	r18, 0x0A	; 10
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	a3 01       	movw	r20, r6
 5b2:	33 d1       	rcall	.+614    	; 0x81a <__ultoa_invert>
 5b4:	88 2e       	mov	r8, r24
 5b6:	86 18       	sub	r8, r6
 5b8:	44 c0       	rjmp	.+136    	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 5ba:	85 37       	cpi	r24, 0x75	; 117
 5bc:	31 f4       	brne	.+12     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5be:	23 2d       	mov	r18, r3
 5c0:	2f 7e       	andi	r18, 0xEF	; 239
 5c2:	b2 2e       	mov	r11, r18
 5c4:	2a e0       	ldi	r18, 0x0A	; 10
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	25 c0       	rjmp	.+74     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 5ca:	93 2d       	mov	r25, r3
 5cc:	99 7f       	andi	r25, 0xF9	; 249
 5ce:	b9 2e       	mov	r11, r25
 5d0:	8f 36       	cpi	r24, 0x6F	; 111
 5d2:	c1 f0       	breq	.+48     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5d4:	18 f4       	brcc	.+6      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d6:	88 35       	cpi	r24, 0x58	; 88
 5d8:	79 f0       	breq	.+30     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5da:	ae c0       	rjmp	.+348    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 5dc:	80 37       	cpi	r24, 0x70	; 112
 5de:	19 f0       	breq	.+6      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5e0:	88 37       	cpi	r24, 0x78	; 120
 5e2:	21 f0       	breq	.+8      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5e4:	a9 c0       	rjmp	.+338    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 5e6:	e9 2f       	mov	r30, r25
 5e8:	e0 61       	ori	r30, 0x10	; 16
 5ea:	be 2e       	mov	r11, r30
 5ec:	b4 fe       	sbrs	r11, 4
 5ee:	0d c0       	rjmp	.+26     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5f0:	fb 2d       	mov	r31, r11
 5f2:	f4 60       	ori	r31, 0x04	; 4
 5f4:	bf 2e       	mov	r11, r31
 5f6:	09 c0       	rjmp	.+18     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5f8:	34 fe       	sbrs	r3, 4
 5fa:	0a c0       	rjmp	.+20     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5fc:	29 2f       	mov	r18, r25
 5fe:	26 60       	ori	r18, 0x06	; 6
 600:	b2 2e       	mov	r11, r18
 602:	06 c0       	rjmp	.+12     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 604:	28 e0       	ldi	r18, 0x08	; 8
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	05 c0       	rjmp	.+10     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 60a:	20 e1       	ldi	r18, 0x10	; 16
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 610:	20 e1       	ldi	r18, 0x10	; 16
 612:	32 e0       	ldi	r19, 0x02	; 2
 614:	f8 01       	movw	r30, r16
 616:	b7 fe       	sbrs	r11, 7
 618:	07 c0       	rjmp	.+14     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 61a:	60 81       	ld	r22, Z
 61c:	71 81       	ldd	r23, Z+1	; 0x01
 61e:	82 81       	ldd	r24, Z+2	; 0x02
 620:	93 81       	ldd	r25, Z+3	; 0x03
 622:	0c 5f       	subi	r16, 0xFC	; 252
 624:	1f 4f       	sbci	r17, 0xFF	; 255
 626:	06 c0       	rjmp	.+12     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 628:	60 81       	ld	r22, Z
 62a:	71 81       	ldd	r23, Z+1	; 0x01
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 5f       	subi	r16, 0xFE	; 254
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	a3 01       	movw	r20, r6
 636:	f1 d0       	rcall	.+482    	; 0x81a <__ultoa_invert>
 638:	88 2e       	mov	r8, r24
 63a:	86 18       	sub	r8, r6
 63c:	fb 2d       	mov	r31, r11
 63e:	ff 77       	andi	r31, 0x7F	; 127
 640:	3f 2e       	mov	r3, r31
 642:	36 fe       	sbrs	r3, 6
 644:	0d c0       	rjmp	.+26     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 646:	23 2d       	mov	r18, r3
 648:	2e 7f       	andi	r18, 0xFE	; 254
 64a:	a2 2e       	mov	r10, r18
 64c:	89 14       	cp	r8, r9
 64e:	58 f4       	brcc	.+22     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 650:	34 fe       	sbrs	r3, 4
 652:	0b c0       	rjmp	.+22     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 654:	32 fc       	sbrc	r3, 2
 656:	09 c0       	rjmp	.+18     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 658:	83 2d       	mov	r24, r3
 65a:	8e 7e       	andi	r24, 0xEE	; 238
 65c:	a8 2e       	mov	r10, r24
 65e:	05 c0       	rjmp	.+10     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 660:	b8 2c       	mov	r11, r8
 662:	a3 2c       	mov	r10, r3
 664:	03 c0       	rjmp	.+6      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 666:	b8 2c       	mov	r11, r8
 668:	01 c0       	rjmp	.+2      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 66a:	b9 2c       	mov	r11, r9
 66c:	a4 fe       	sbrs	r10, 4
 66e:	0f c0       	rjmp	.+30     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 670:	fe 01       	movw	r30, r28
 672:	e8 0d       	add	r30, r8
 674:	f1 1d       	adc	r31, r1
 676:	80 81       	ld	r24, Z
 678:	80 33       	cpi	r24, 0x30	; 48
 67a:	21 f4       	brne	.+8      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 67c:	9a 2d       	mov	r25, r10
 67e:	99 7e       	andi	r25, 0xE9	; 233
 680:	a9 2e       	mov	r10, r25
 682:	09 c0       	rjmp	.+18     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 684:	a2 fe       	sbrs	r10, 2
 686:	06 c0       	rjmp	.+12     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 688:	b3 94       	inc	r11
 68a:	b3 94       	inc	r11
 68c:	04 c0       	rjmp	.+8      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 68e:	8a 2d       	mov	r24, r10
 690:	86 78       	andi	r24, 0x86	; 134
 692:	09 f0       	breq	.+2      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 694:	b3 94       	inc	r11
 696:	a3 fc       	sbrc	r10, 3
 698:	10 c0       	rjmp	.+32     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 69a:	a0 fe       	sbrs	r10, 0
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 69e:	b2 14       	cp	r11, r2
 6a0:	80 f4       	brcc	.+32     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6a2:	28 0c       	add	r2, r8
 6a4:	92 2c       	mov	r9, r2
 6a6:	9b 18       	sub	r9, r11
 6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6aa:	b2 14       	cp	r11, r2
 6ac:	58 f4       	brcc	.+22     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6ae:	b6 01       	movw	r22, r12
 6b0:	80 e2       	ldi	r24, 0x20	; 32
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	76 d0       	rcall	.+236    	; 0x7a2 <fputc>
 6b6:	b3 94       	inc	r11
 6b8:	f8 cf       	rjmp	.-16     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6ba:	b2 14       	cp	r11, r2
 6bc:	18 f4       	brcc	.+6      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6be:	2b 18       	sub	r2, r11
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6c2:	98 2c       	mov	r9, r8
 6c4:	21 2c       	mov	r2, r1
 6c6:	a4 fe       	sbrs	r10, 4
 6c8:	0f c0       	rjmp	.+30     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
 6ca:	b6 01       	movw	r22, r12
 6cc:	80 e3       	ldi	r24, 0x30	; 48
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	68 d0       	rcall	.+208    	; 0x7a2 <fputc>
 6d2:	a2 fe       	sbrs	r10, 2
 6d4:	16 c0       	rjmp	.+44     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6d6:	a1 fc       	sbrc	r10, 1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6da:	88 e7       	ldi	r24, 0x78	; 120
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
 6e0:	88 e5       	ldi	r24, 0x58	; 88
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	b6 01       	movw	r22, r12
 6e6:	0c c0       	rjmp	.+24     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6e8:	8a 2d       	mov	r24, r10
 6ea:	86 78       	andi	r24, 0x86	; 134
 6ec:	51 f0       	breq	.+20     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6ee:	a1 fe       	sbrs	r10, 1
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6f2:	8b e2       	ldi	r24, 0x2B	; 43
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6f6:	80 e2       	ldi	r24, 0x20	; 32
 6f8:	a7 fc       	sbrc	r10, 7
 6fa:	8d e2       	ldi	r24, 0x2D	; 45
 6fc:	b6 01       	movw	r22, r12
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	50 d0       	rcall	.+160    	; 0x7a2 <fputc>
 702:	89 14       	cp	r8, r9
 704:	30 f4       	brcc	.+12     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 706:	b6 01       	movw	r22, r12
 708:	80 e3       	ldi	r24, 0x30	; 48
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	4a d0       	rcall	.+148    	; 0x7a2 <fputc>
 70e:	9a 94       	dec	r9
 710:	f8 cf       	rjmp	.-16     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 712:	8a 94       	dec	r8
 714:	f3 01       	movw	r30, r6
 716:	e8 0d       	add	r30, r8
 718:	f1 1d       	adc	r31, r1
 71a:	80 81       	ld	r24, Z
 71c:	b6 01       	movw	r22, r12
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	40 d0       	rcall	.+128    	; 0x7a2 <fputc>
 722:	81 10       	cpse	r8, r1
 724:	f6 cf       	rjmp	.-20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 726:	22 20       	and	r2, r2
 728:	09 f4       	brne	.+2      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 72a:	4e ce       	rjmp	.-868    	; 0x3c8 <vfprintf+0x4c>
 72c:	b6 01       	movw	r22, r12
 72e:	80 e2       	ldi	r24, 0x20	; 32
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	37 d0       	rcall	.+110    	; 0x7a2 <fputc>
 734:	2a 94       	dec	r2
 736:	f7 cf       	rjmp	.-18     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 738:	f6 01       	movw	r30, r12
 73a:	86 81       	ldd	r24, Z+6	; 0x06
 73c:	97 81       	ldd	r25, Z+7	; 0x07
 73e:	02 c0       	rjmp	.+4      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	9f ef       	ldi	r25, 0xFF	; 255
 744:	2b 96       	adiw	r28, 0x0b	; 11
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	ff 90       	pop	r15
 75a:	ef 90       	pop	r14
 75c:	df 90       	pop	r13
 75e:	cf 90       	pop	r12
 760:	bf 90       	pop	r11
 762:	af 90       	pop	r10
 764:	9f 90       	pop	r9
 766:	8f 90       	pop	r8
 768:	7f 90       	pop	r7
 76a:	6f 90       	pop	r6
 76c:	5f 90       	pop	r5
 76e:	4f 90       	pop	r4
 770:	3f 90       	pop	r3
 772:	2f 90       	pop	r2
 774:	08 95       	ret

00000776 <strnlen_P>:
 776:	fc 01       	movw	r30, r24
 778:	05 90       	lpm	r0, Z+
 77a:	61 50       	subi	r22, 0x01	; 1
 77c:	70 40       	sbci	r23, 0x00	; 0
 77e:	01 10       	cpse	r0, r1
 780:	d8 f7       	brcc	.-10     	; 0x778 <strnlen_P+0x2>
 782:	80 95       	com	r24
 784:	90 95       	com	r25
 786:	8e 0f       	add	r24, r30
 788:	9f 1f       	adc	r25, r31
 78a:	08 95       	ret

0000078c <strnlen>:
 78c:	fc 01       	movw	r30, r24
 78e:	61 50       	subi	r22, 0x01	; 1
 790:	70 40       	sbci	r23, 0x00	; 0
 792:	01 90       	ld	r0, Z+
 794:	01 10       	cpse	r0, r1
 796:	d8 f7       	brcc	.-10     	; 0x78e <strnlen+0x2>
 798:	80 95       	com	r24
 79a:	90 95       	com	r25
 79c:	8e 0f       	add	r24, r30
 79e:	9f 1f       	adc	r25, r31
 7a0:	08 95       	ret

000007a2 <fputc>:
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	fb 01       	movw	r30, r22
 7ac:	23 81       	ldd	r18, Z+3	; 0x03
 7ae:	21 fd       	sbrc	r18, 1
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <fputc+0x16>
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	9f ef       	ldi	r25, 0xFF	; 255
 7b6:	2c c0       	rjmp	.+88     	; 0x810 <fputc+0x6e>
 7b8:	22 ff       	sbrs	r18, 2
 7ba:	16 c0       	rjmp	.+44     	; 0x7e8 <fputc+0x46>
 7bc:	46 81       	ldd	r20, Z+6	; 0x06
 7be:	57 81       	ldd	r21, Z+7	; 0x07
 7c0:	24 81       	ldd	r18, Z+4	; 0x04
 7c2:	35 81       	ldd	r19, Z+5	; 0x05
 7c4:	42 17       	cp	r20, r18
 7c6:	53 07       	cpc	r21, r19
 7c8:	44 f4       	brge	.+16     	; 0x7da <fputc+0x38>
 7ca:	a0 81       	ld	r26, Z
 7cc:	b1 81       	ldd	r27, Z+1	; 0x01
 7ce:	9d 01       	movw	r18, r26
 7d0:	2f 5f       	subi	r18, 0xFF	; 255
 7d2:	3f 4f       	sbci	r19, 0xFF	; 255
 7d4:	31 83       	std	Z+1, r19	; 0x01
 7d6:	20 83       	st	Z, r18
 7d8:	8c 93       	st	X, r24
 7da:	26 81       	ldd	r18, Z+6	; 0x06
 7dc:	37 81       	ldd	r19, Z+7	; 0x07
 7de:	2f 5f       	subi	r18, 0xFF	; 255
 7e0:	3f 4f       	sbci	r19, 0xFF	; 255
 7e2:	37 83       	std	Z+7, r19	; 0x07
 7e4:	26 83       	std	Z+6, r18	; 0x06
 7e6:	14 c0       	rjmp	.+40     	; 0x810 <fputc+0x6e>
 7e8:	8b 01       	movw	r16, r22
 7ea:	ec 01       	movw	r28, r24
 7ec:	fb 01       	movw	r30, r22
 7ee:	00 84       	ldd	r0, Z+8	; 0x08
 7f0:	f1 85       	ldd	r31, Z+9	; 0x09
 7f2:	e0 2d       	mov	r30, r0
 7f4:	09 95       	icall
 7f6:	89 2b       	or	r24, r25
 7f8:	e1 f6       	brne	.-72     	; 0x7b2 <fputc+0x10>
 7fa:	d8 01       	movw	r26, r16
 7fc:	16 96       	adiw	r26, 0x06	; 6
 7fe:	8d 91       	ld	r24, X+
 800:	9c 91       	ld	r25, X
 802:	17 97       	sbiw	r26, 0x07	; 7
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	17 96       	adiw	r26, 0x07	; 7
 808:	9c 93       	st	X, r25
 80a:	8e 93       	st	-X, r24
 80c:	16 97       	sbiw	r26, 0x06	; 6
 80e:	ce 01       	movw	r24, r28
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	08 95       	ret

0000081a <__ultoa_invert>:
 81a:	fa 01       	movw	r30, r20
 81c:	aa 27       	eor	r26, r26
 81e:	28 30       	cpi	r18, 0x08	; 8
 820:	51 f1       	breq	.+84     	; 0x876 <__ultoa_invert+0x5c>
 822:	20 31       	cpi	r18, 0x10	; 16
 824:	81 f1       	breq	.+96     	; 0x886 <__ultoa_invert+0x6c>
 826:	e8 94       	clt
 828:	6f 93       	push	r22
 82a:	6e 7f       	andi	r22, 0xFE	; 254
 82c:	6e 5f       	subi	r22, 0xFE	; 254
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	8f 4f       	sbci	r24, 0xFF	; 255
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	af 4f       	sbci	r26, 0xFF	; 255
 836:	b1 e0       	ldi	r27, 0x01	; 1
 838:	3e d0       	rcall	.+124    	; 0x8b6 <__ultoa_invert+0x9c>
 83a:	b4 e0       	ldi	r27, 0x04	; 4
 83c:	3c d0       	rcall	.+120    	; 0x8b6 <__ultoa_invert+0x9c>
 83e:	67 0f       	add	r22, r23
 840:	78 1f       	adc	r23, r24
 842:	89 1f       	adc	r24, r25
 844:	9a 1f       	adc	r25, r26
 846:	a1 1d       	adc	r26, r1
 848:	68 0f       	add	r22, r24
 84a:	79 1f       	adc	r23, r25
 84c:	8a 1f       	adc	r24, r26
 84e:	91 1d       	adc	r25, r1
 850:	a1 1d       	adc	r26, r1
 852:	6a 0f       	add	r22, r26
 854:	71 1d       	adc	r23, r1
 856:	81 1d       	adc	r24, r1
 858:	91 1d       	adc	r25, r1
 85a:	a1 1d       	adc	r26, r1
 85c:	20 d0       	rcall	.+64     	; 0x89e <__ultoa_invert+0x84>
 85e:	09 f4       	brne	.+2      	; 0x862 <__ultoa_invert+0x48>
 860:	68 94       	set
 862:	3f 91       	pop	r19
 864:	2a e0       	ldi	r18, 0x0A	; 10
 866:	26 9f       	mul	r18, r22
 868:	11 24       	eor	r1, r1
 86a:	30 19       	sub	r19, r0
 86c:	30 5d       	subi	r19, 0xD0	; 208
 86e:	31 93       	st	Z+, r19
 870:	de f6       	brtc	.-74     	; 0x828 <__ultoa_invert+0xe>
 872:	cf 01       	movw	r24, r30
 874:	08 95       	ret
 876:	46 2f       	mov	r20, r22
 878:	47 70       	andi	r20, 0x07	; 7
 87a:	40 5d       	subi	r20, 0xD0	; 208
 87c:	41 93       	st	Z+, r20
 87e:	b3 e0       	ldi	r27, 0x03	; 3
 880:	0f d0       	rcall	.+30     	; 0x8a0 <__ultoa_invert+0x86>
 882:	c9 f7       	brne	.-14     	; 0x876 <__ultoa_invert+0x5c>
 884:	f6 cf       	rjmp	.-20     	; 0x872 <__ultoa_invert+0x58>
 886:	46 2f       	mov	r20, r22
 888:	4f 70       	andi	r20, 0x0F	; 15
 88a:	40 5d       	subi	r20, 0xD0	; 208
 88c:	4a 33       	cpi	r20, 0x3A	; 58
 88e:	18 f0       	brcs	.+6      	; 0x896 <__ultoa_invert+0x7c>
 890:	49 5d       	subi	r20, 0xD9	; 217
 892:	31 fd       	sbrc	r19, 1
 894:	40 52       	subi	r20, 0x20	; 32
 896:	41 93       	st	Z+, r20
 898:	02 d0       	rcall	.+4      	; 0x89e <__ultoa_invert+0x84>
 89a:	a9 f7       	brne	.-22     	; 0x886 <__ultoa_invert+0x6c>
 89c:	ea cf       	rjmp	.-44     	; 0x872 <__ultoa_invert+0x58>
 89e:	b4 e0       	ldi	r27, 0x04	; 4
 8a0:	a6 95       	lsr	r26
 8a2:	97 95       	ror	r25
 8a4:	87 95       	ror	r24
 8a6:	77 95       	ror	r23
 8a8:	67 95       	ror	r22
 8aa:	ba 95       	dec	r27
 8ac:	c9 f7       	brne	.-14     	; 0x8a0 <__ultoa_invert+0x86>
 8ae:	00 97       	sbiw	r24, 0x00	; 0
 8b0:	61 05       	cpc	r22, r1
 8b2:	71 05       	cpc	r23, r1
 8b4:	08 95       	ret
 8b6:	9b 01       	movw	r18, r22
 8b8:	ac 01       	movw	r20, r24
 8ba:	0a 2e       	mov	r0, r26
 8bc:	06 94       	lsr	r0
 8be:	57 95       	ror	r21
 8c0:	47 95       	ror	r20
 8c2:	37 95       	ror	r19
 8c4:	27 95       	ror	r18
 8c6:	ba 95       	dec	r27
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__ultoa_invert+0xa2>
 8ca:	62 0f       	add	r22, r18
 8cc:	73 1f       	adc	r23, r19
 8ce:	84 1f       	adc	r24, r20
 8d0:	95 1f       	adc	r25, r21
 8d2:	a0 1d       	adc	r26, r0
 8d4:	08 95       	ret

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>
