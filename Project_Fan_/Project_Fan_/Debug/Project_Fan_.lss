
Project_Fan_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00000998  00000a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000998  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008001aa  008001aa  00000ad6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019cd  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dae  00000000  00000000  00002645  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0a  00000000  00000000  000033f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00004000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000662  00000000  00000000  00004204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f2  00000000  00000000  00004866  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 3a       	cpi	r26, 0xAA	; 170
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa ea       	ldi	r26, 0xAA	; 170
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 3c       	cpi	r26, 0xCB	; 203
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	23 d2       	rcall	.+1094   	; 0x50a <main>
  c4:	67 c4       	rjmp	.+2254   	; 0x994 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Button_init>:
#include <avr/io.h>
#include <util/delay.h>


void Button_init(Button *button, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
  c8:	fc 01       	movw	r30, r24
	button->ddr = ddr;
  ca:	71 83       	std	Z+1, r23	; 0x01
  cc:	60 83       	st	Z, r22
	button->pin = pin;
  ce:	53 83       	std	Z+3, r21	; 0x03
  d0:	42 83       	std	Z+2, r20	; 0x02
	button->btnPin = pinNum;
  d2:	24 83       	std	Z+4, r18	; 0x04
	button->prevState = RELEASED; // 초기화, 아무것도 안 누른 상태
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	85 83       	std	Z+5, r24	; 0x05
	*button->ddr &= ~(1 << button->btnPin); // 버튼 핀을 입력으로 설정, ->가 *보다 빠름
  d8:	fb 01       	movw	r30, r22
  da:	30 81       	ld	r19, Z
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Button_init+0x1e>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	2a 95       	dec	r18
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <Button_init+0x1a>
  ea:	80 95       	com	r24
  ec:	83 23       	and	r24, r19
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <BUTTON_getState>:
}


uint8_t BUTTON_getState(Button *button)
{
  f2:	fc 01       	movw	r30, r24
	uint8_t curState = *button->pin & (1<<button->btnPin); // 버튼 상태를 읽어옴
  f4:	a2 81       	ldd	r26, Z+2	; 0x02
  f6:	b3 81       	ldd	r27, Z+3	; 0x03
  f8:	8c 91       	ld	r24, X
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	04 80       	ldd	r0, Z+4	; 0x04
 100:	02 c0       	rjmp	.+4      	; 0x106 <BUTTON_getState+0x14>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <BUTTON_getState+0x10>
 10a:	28 23       	and	r18, r24
	
	if ((curState == PUSHED) && (button->prevState == RELEASED)) // 버튼을 안 누른 상태에서 누르면,
 10c:	59 f4       	brne	.+22     	; 0x124 <BUTTON_getState+0x32>
 10e:	85 81       	ldd	r24, Z+5	; 0x05
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	41 f4       	brne	.+16     	; 0x124 <BUTTON_getState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	a3 ed       	ldi	r26, 0xD3	; 211
 116:	b0 e3       	ldi	r27, 0x30	; 48
 118:	11 97       	sbiw	r26, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <BUTTON_getState+0x26>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <BUTTON_getState+0x2c>
 11e:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = PUSHED; // 버튼을 누른 상태로 변환
 120:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSH; // 버튼이 눌려 있음을 반환
 122:	08 95       	ret
	}
	else if((curState != PUSHED) && (button->prevState == PUSHED)) // 버튼을 누른 상태에서 떼면,
 124:	22 23       	and	r18, r18
 126:	69 f0       	breq	.+26     	; 0x142 <BUTTON_getState+0x50>
 128:	85 81       	ldd	r24, Z+5	; 0x05
 12a:	81 11       	cpse	r24, r1
 12c:	0c c0       	rjmp	.+24     	; 0x146 <BUTTON_getState+0x54>
 12e:	83 ed       	ldi	r24, 0xD3	; 211
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <BUTTON_getState+0x40>
 136:	00 c0       	rjmp	.+0      	; 0x138 <BUTTON_getState+0x46>
 138:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = RELEASED; // 버튼을 땐 상태로 변환
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED; // 버튼이 떨어진 것을 반환
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	08 95       	ret
	}
	return NO_ACT; // 아무 것도 안 했을 때
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	80 e0       	ldi	r24, 0x00	; 0
}
 148:	08 95       	ret

0000014a <BUTTON_spin_getState>:

uint8_t BUTTON_spin_getState(Button *button)
{
 14a:	fc 01       	movw	r30, r24
	uint8_t curState = *button->pin & (1<<button->btnPin); // 버튼 상태를 읽어옴
 14c:	a2 81       	ldd	r26, Z+2	; 0x02
 14e:	b3 81       	ldd	r27, Z+3	; 0x03
 150:	8c 91       	ld	r24, X
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	04 80       	ldd	r0, Z+4	; 0x04
 158:	02 c0       	rjmp	.+4      	; 0x15e <BUTTON_spin_getState+0x14>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <BUTTON_spin_getState+0x10>
 162:	28 23       	and	r18, r24
	
	if ((curState == PUSHED) && (button->prevState == RELEASED)) // 버튼을 안 누른 상태에서 누르면,
 164:	59 f4       	brne	.+22     	; 0x17c <BUTTON_spin_getState+0x32>
 166:	85 81       	ldd	r24, Z+5	; 0x05
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	41 f4       	brne	.+16     	; 0x17c <BUTTON_spin_getState+0x32>
 16c:	a3 ed       	ldi	r26, 0xD3	; 211
 16e:	b0 e3       	ldi	r27, 0x30	; 48
 170:	11 97       	sbiw	r26, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <BUTTON_spin_getState+0x26>
 174:	00 c0       	rjmp	.+0      	; 0x176 <BUTTON_spin_getState+0x2c>
 176:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = PUSHED; // 버튼을 누른 상태로 변환
 178:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSH; // 버튼이 눌려 있음을 반환
 17a:	08 95       	ret
	}
	else if((curState != PUSHED) && (button->prevState == PUSHED)) // 버튼을 누른 상태에서 떼면,
 17c:	22 23       	and	r18, r18
 17e:	a9 f0       	breq	.+42     	; 0x1aa <BUTTON_spin_getState+0x60>
 180:	85 81       	ldd	r24, Z+5	; 0x05
 182:	81 11       	cpse	r24, r1
 184:	14 c0       	rjmp	.+40     	; 0x1ae <BUTTON_spin_getState+0x64>
 186:	83 ed       	ldi	r24, 0xD3	; 211
 188:	90 e3       	ldi	r25, 0x30	; 48
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <BUTTON_spin_getState+0x40>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <BUTTON_spin_getState+0x46>
 190:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = RELEASED; // 버튼을 땐 상태로 변환
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	85 83       	std	Z+5, r24	; 0x05
		spin_cnt++;
 196:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 19a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
 1a4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
		return spin_cnt; // 버튼이 떨어진 것을 반환
 1a8:	08 95       	ret
	}
	return NO_ACT; // 아무 것도 안 했을 때
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret

000001b2 <Fan_Init>:
#include "Fan.h"

void Fan_Init()
{
	// I2C LCD 초기화
	LCD_Init();
 1b2:	81 d1       	rcall	.+770    	; 0x4b6 <LCD_Init>
	
	// Button Setting
	LED_DDR = 0xff; // PORTA 출력 설정
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	8a bb       	out	0x1a, r24	; 26
	
	Button_init(&btnStop, &BUTTON_DDR, &BUTTON_PIN, BUTTON_STOP); // PORTC 0번 핀 입력 활성화
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	43 e3       	ldi	r20, 0x33	; 51
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	64 e3       	ldi	r22, 0x34	; 52
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	8e eb       	ldi	r24, 0xBE	; 190
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	80 df       	rcall	.-256    	; 0xc8 <Button_init>
	Button_init(&btn_1stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_1stage); // PORTC 1번 핀 입력 활성화
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	43 e3       	ldi	r20, 0x33	; 51
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	64 e3       	ldi	r22, 0x34	; 52
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	84 ec       	ldi	r24, 0xC4	; 196
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	78 df       	rcall	.-272    	; 0xc8 <Button_init>
	Button_init(&btn_2stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_2stage); // PORTC 2번 핀 입력 활성화
 1d8:	22 e0       	ldi	r18, 0x02	; 2
 1da:	43 e3       	ldi	r20, 0x33	; 51
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	64 e3       	ldi	r22, 0x34	; 52
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	8c ea       	ldi	r24, 0xAC	; 172
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	70 df       	rcall	.-288    	; 0xc8 <Button_init>
	Button_init(&btn_3stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_3stage); // PORTC 3번 핀 입력 활성화
 1e8:	23 e0       	ldi	r18, 0x03	; 3
 1ea:	43 e3       	ldi	r20, 0x33	; 51
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	64 e3       	ldi	r22, 0x34	; 52
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	88 eb       	ldi	r24, 0xB8	; 184
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	68 df       	rcall	.-304    	; 0xc8 <Button_init>
	Button_init(&btn_spin, &BUTTON_DDR, &BUTTON_PIN, BUTTON_spin); // PORTC 4번 핀 입력 활성화
 1f8:	24 e0       	ldi	r18, 0x04	; 4
 1fa:	43 e3       	ldi	r20, 0x33	; 51
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	64 e3       	ldi	r22, 0x34	; 52
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	82 eb       	ldi	r24, 0xB2	; 178
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	60 df       	rcall	.-320    	; 0xc8 <Button_init>
	
	// PWM Setting
	DDRF |= (1<<PINF4) | (1<<PINF5); // PINF4, 5 출력 설정
 208:	e1 e6       	ldi	r30, 0x61	; 97
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 63       	ori	r24, 0x30	; 48
 210:	80 83       	st	Z, r24
	TCCR0 |= (1<<CS02) | (1<<CS01) | (0<<CS00); // 256분주
 212:	83 b7       	in	r24, 0x33	; 51
 214:	86 60       	ori	r24, 0x06	; 6
 216:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00); // Fast PWM mode
 218:	83 b7       	in	r24, 0x33	; 51
 21a:	88 64       	ori	r24, 0x48	; 72
 21c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01) | (0<<COM00); // 비반전 모드
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	80 62       	ori	r24, 0x20	; 32
 222:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1<<DDRB4); // MOTOR 제어
 224:	87 b3       	in	r24, 0x17	; 23
 226:	80 61       	ori	r24, 0x10	; 16
 228:	87 bb       	out	0x17, r24	; 23
 22a:	08 95       	ret

0000022c <Fan_Start_signal>:
}

void Fan_Start_signal()
{
	// Fan Start Sign
	LCD_WriteStringXY(0,0," Hello Modesty! ");
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	51 e0       	ldi	r21, 0x01	; 1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	37 d1       	rcall	.+622    	; 0x4a4 <LCD_WriteStringXY>
	LCD_WriteStringXY(1,0,"   Fan Start    ");
 236:	41 e1       	ldi	r20, 0x11	; 17
 238:	51 e0       	ldi	r21, 0x01	; 1
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	32 c1       	rjmp	.+612    	; 0x4a4 <LCD_WriteStringXY>
 240:	08 95       	ret

00000242 <Fan_Stage>:
}

void Fan_Stage()
{
	if (BUTTON_getState(&btnStop) == ACT_RELEASED)
 242:	8e eb       	ldi	r24, 0xBE	; 190
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	55 df       	rcall	.-342    	; 0xf2 <BUTTON_getState>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	81 f4       	brne	.+32     	; 0x26c <Fan_Stage+0x2a>
	{
		LED_PORT = 0x00;
 24c:	1b ba       	out	0x1b, r1	; 27
		PORTF |= (1<<PINF4) | (1<<PINF5); // MOtor Break
 24e:	e2 e6       	ldi	r30, 0x62	; 98
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	80 63       	ori	r24, 0x30	; 48
 256:	80 83       	st	Z, r24
		LCD_WriteStringXY(0,0,"   Stop mode    ");
 258:	42 e2       	ldi	r20, 0x22	; 34
 25a:	51 e0       	ldi	r21, 0x01	; 1
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	21 d1       	rcall	.+578    	; 0x4a4 <LCD_WriteStringXY>
		LCD_WriteStringXY(1,0,"  Power :   0%  ");
 262:	43 e3       	ldi	r20, 0x33	; 51
 264:	51 e0       	ldi	r21, 0x01	; 1
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	1c d1       	rcall	.+568    	; 0x4a4 <LCD_WriteStringXY>
	}
	if(BUTTON_getState(&btn_1stage) == ACT_RELEASED)
 26c:	84 ec       	ldi	r24, 0xC4	; 196
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	40 df       	rcall	.-384    	; 0xf2 <BUTTON_getState>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	e9 f4       	brne	.+58     	; 0x2b0 <Fan_Stage+0x6e>
	{
		LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	e2 d0       	rcall	.+452    	; 0x43e <LCD_WriteCommand>
 27a:	1b ba       	out	0x1b, r1	; 27
		LED_PORT = 0x00;
 27c:	8b b3       	in	r24, 0x1b	; 27
		LED_PORT |= (1<<PINA0);
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	8b bb       	out	0x1b, r24	; 27
 282:	87 b3       	in	r24, 0x17	; 23
		DDRB |= (1<<PINB4);
 284:	80 61       	ori	r24, 0x10	; 16
 286:	87 bb       	out	0x17, r24	; 23
 288:	80 e4       	ldi	r24, 0x40	; 64
		OCR0 = 64; // 25%
 28a:	81 bf       	out	0x31, r24	; 49
 28c:	e2 e6       	ldi	r30, 0x62	; 98
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	8f 7d       	andi	r24, 0xDF	; 223
 294:	80 83       	st	Z, r24
 296:	80 81       	ld	r24, Z
		PORTF |= (1<<PINF4);
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	80 83       	st	Z, r24
		LCD_WriteStringXY(0,0,"   1st Stage    ");
 29c:	44 e4       	ldi	r20, 0x44	; 68
 29e:	51 e0       	ldi	r21, 0x01	; 1
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	ff d0       	rcall	.+510    	; 0x4a4 <LCD_WriteStringXY>
		LCD_WriteStringXY(1,0,"  Power :  25%  ");
 2a6:	45 e5       	ldi	r20, 0x55	; 85
 2a8:	51 e0       	ldi	r21, 0x01	; 1
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	fa d0       	rcall	.+500    	; 0x4a4 <LCD_WriteStringXY>

	}
	if(BUTTON_getState(&btn_2stage) == ACT_RELEASED)
 2b0:	8c ea       	ldi	r24, 0xAC	; 172
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	1e df       	rcall	.-452    	; 0xf2 <BUTTON_getState>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	f9 f4       	brne	.+62     	; 0x2f8 <Fan_Stage+0xb6>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
	{
		LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 2bc:	c0 d0       	rcall	.+384    	; 0x43e <LCD_WriteCommand>
 2be:	1b ba       	out	0x1b, r1	; 27
 2c0:	8b b3       	in	r24, 0x1b	; 27
		LED_PORT = 0x00;
 2c2:	83 60       	ori	r24, 0x03	; 3
		LED_PORT |= (1<<PINA0) | (1<<PINA1);
 2c4:	8b bb       	out	0x1b, r24	; 27
 2c6:	87 b3       	in	r24, 0x17	; 23
 2c8:	80 61       	ori	r24, 0x10	; 16
		DDRB |= (1<<PINB4);
 2ca:	87 bb       	out	0x17, r24	; 23
 2cc:	8f eb       	ldi	r24, 0xBF	; 191
 2ce:	81 bf       	out	0x31, r24	; 49
		OCR0 = 191; // 75%
 2d0:	e2 e6       	ldi	r30, 0x62	; 98
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 2d4:	80 81       	ld	r24, Z
 2d6:	8f 7d       	andi	r24, 0xDF	; 223
 2d8:	80 83       	st	Z, r24
 2da:	80 81       	ld	r24, Z
		PORTF |= (1<<PINF4);
 2dc:	80 61       	ori	r24, 0x10	; 16
 2de:	80 83       	st	Z, r24
 2e0:	46 e6       	ldi	r20, 0x66	; 102
		LCD_WriteStringXY(0,0,"   2nd Stage    ");
 2e2:	51 e0       	ldi	r21, 0x01	; 1
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	dd d0       	rcall	.+442    	; 0x4a4 <LCD_WriteStringXY>
 2ea:	47 e7       	ldi	r20, 0x77	; 119
		LCD_WriteStringXY(1,0,"  Power :  50%  ");
 2ec:	51 e0       	ldi	r21, 0x01	; 1
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	d8 d0       	rcall	.+432    	; 0x4a4 <LCD_WriteStringXY>
 2f4:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
		TWDR = 0x00;
 2f8:	88 eb       	ldi	r24, 0xB8	; 184
	}
	if(BUTTON_getState(&btn_3stage) == ACT_RELEASED)
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	fa de       	rcall	.-524    	; 0xf2 <BUTTON_getState>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	e9 f4       	brne	.+58     	; 0x33c <Fan_Stage+0xfa>
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	9c d0       	rcall	.+312    	; 0x43e <LCD_WriteCommand>
	{
		LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 306:	1b ba       	out	0x1b, r1	; 27
 308:	8b b3       	in	r24, 0x1b	; 27
 30a:	87 60       	ori	r24, 0x07	; 7
		LED_PORT = 0x00;
 30c:	8b bb       	out	0x1b, r24	; 27
		LED_PORT |= (1<<PINA0) | (1<<PINA1) | (1<<PINA2);
 30e:	87 b3       	in	r24, 0x17	; 23
 310:	80 61       	ori	r24, 0x10	; 16
 312:	87 bb       	out	0x17, r24	; 23
		DDRB |= (1<<PINB4);
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	81 bf       	out	0x31, r24	; 49
 318:	e2 e6       	ldi	r30, 0x62	; 98
		OCR0 = 255; // 100%
 31a:	f0 e0       	ldi	r31, 0x00	; 0
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 31c:	80 81       	ld	r24, Z
 31e:	8f 7d       	andi	r24, 0xDF	; 223
 320:	80 83       	st	Z, r24
 322:	80 81       	ld	r24, Z
		PORTF |= (1<<PINF4);
 324:	80 61       	ori	r24, 0x10	; 16
 326:	80 83       	st	Z, r24
 328:	48 e8       	ldi	r20, 0x88	; 136
		LCD_WriteStringXY(0,0,"   3rd Stage    ");
 32a:	51 e0       	ldi	r21, 0x01	; 1
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	b9 d0       	rcall	.+370    	; 0x4a4 <LCD_WriteStringXY>
 332:	49 e9       	ldi	r20, 0x99	; 153
 334:	51 e0       	ldi	r21, 0x01	; 1
		LCD_WriteStringXY(1,0,"  Power : 100%  ");
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	b4 c0       	rjmp	.+360    	; 0x4a4 <LCD_WriteStringXY>
 33c:	08 95       	ret

0000033e <Spin_stop>:
 33e:	8f b5       	in	r24, 0x2f	; 47
 340:	8f 73       	andi	r24, 0x3F	; 63
 342:	8f bd       	out	0x2f, r24	; 47
	}
}

void Spin_stop()
{
	TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0)); // PWM 출력 안 되도록
 344:	08 95       	ret

00000346 <Spin_start>:

void Spin_start(uint8_t degree)
{
	// 0도 : 125 / 180도 : 625
	uint16_t degree_value;
	TCCR1A |= (1<<COM1A1); // PWM 다시 출력되도록
 346:	9f b5       	in	r25, 0x2f	; 47
 348:	90 68       	ori	r25, 0x80	; 128
 34a:	9f bd       	out	0x2f, r25	; 47
	if (degree_value < 0) // 제한 범위를 벗어나 고장나지 않도록 설정
	{
		degree = 0;
	}
	else if(degree > 180)
 34c:	85 3b       	cpi	r24, 0xB5	; 181
 34e:	08 f0       	brcs	.+2      	; 0x352 <Spin_start+0xc>
	{
		degree = 180;
 350:	84 eb       	ldi	r24, 0xB4	; 180
	}
	degree_value = (uint16_t)((degree/180.0)*500 + 125); // 우리가 흔히 쓰는 각도로 표현하기 위한 식
 352:	68 2f       	mov	r22, r24
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	2d d2       	rcall	.+1114   	; 0x7b6 <__floatsisf>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	44 e3       	ldi	r20, 0x34	; 52
 362:	53 e4       	ldi	r21, 0x43	; 67
 364:	92 d1       	rcall	.+804    	; 0x68a <__divsf3>
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	4a ef       	ldi	r20, 0xFA	; 250
 36c:	53 e4       	ldi	r21, 0x43	; 67
 36e:	af d2       	rcall	.+1374   	; 0x8ce <__mulsf3>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	4a ef       	ldi	r20, 0xFA	; 250
 376:	52 e4       	ldi	r21, 0x42	; 66
 378:	24 d1       	rcall	.+584    	; 0x5c2 <__addsf3>
 37a:	ef d1       	rcall	.+990    	; 0x75a <__fixunssfsi>
	OCR1A = degree_value;
 37c:	7b bd       	out	0x2b, r23	; 43
 37e:	6a bd       	out	0x2a, r22	; 42
 380:	08 95       	ret

00000382 <I2C_Init>:
#include "I2C.h"


void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL) | (1<<I2C_SDA); // 출력 설정
 382:	81 b3       	in	r24, 0x11	; 17
 384:	83 60       	ori	r24, 0x03	; 3
 386:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; // 100KHz
 388:	88 e4       	ldi	r24, 0x48	; 72
 38a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 38e:	08 95       	ret

00000390 <I2C_Start>:
	// TWBR = 12; // 400KHz
}

void I2C_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // 1을 보내는 것은, S/W적으로 플래그를 Clear해주는 것이다.
 390:	84 ea       	ldi	r24, 0xA4	; 164
 392:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	                                            // 1 Set하여 인터럽트 발생시키는 것이 아님.
	while(!(TWCR & (1<<TWINT))); // 하드웨어적으로 TWINT 시점을 결정
 396:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 39a:	88 23       	and	r24, r24
 39c:	e4 f7       	brge	.-8      	; 0x396 <I2C_Start+0x6>
	                             // 기다렸다가 조건이 만족되면 while문 수행
}
 39e:	08 95       	ret

000003a0 <I2C_Stop>:

void I2C_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Stop 비트 설정
 3a0:	84 e9       	ldi	r24, 0x94	; 148
 3a2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3a6:	08 95       	ret

000003a8 <I2C_TxData>:
}

void I2C_TxData(uint8_t data) // data 1바이트 전송
{
	TWDR = data;
 3a8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 3ac:	84 e8       	ldi	r24, 0x84	; 132
 3ae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT))); // 전송 완료 대기
 3b2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3b6:	88 23       	and	r24, r24
 3b8:	e4 f7       	brge	.-8      	; 0x3b2 <I2C_TxData+0xa>
}
 3ba:	08 95       	ret

000003bc <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	d8 2f       	mov	r29, r24
 3c2:	c6 2f       	mov	r28, r22
	I2C_Start();
 3c4:	e5 df       	rcall	.-54     	; 0x390 <I2C_Start>
	I2C_TxData(devAddrRW); // 읽을 것이냐 쓸 것이냐
 3c6:	8d 2f       	mov	r24, r29
 3c8:	ef df       	rcall	.-34     	; 0x3a8 <I2C_TxData>
	I2C_TxData(data); // 입/출력할 데이터 보냄
 3ca:	8c 2f       	mov	r24, r28
 3cc:	ed df       	rcall	.-38     	; 0x3a8 <I2C_TxData>
	I2C_Stop();
 3ce:	e8 df       	rcall	.-48     	; 0x3a0 <I2C_Stop>
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <LCD_EnablePin>:
 3d6:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <I2C_LCD_Data>
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 3da:	6b 7f       	andi	r22, 0xFB	; 251
 3dc:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 3e0:	8e e4       	ldi	r24, 0x4E	; 78
 3e2:	ec df       	rcall	.-40     	; 0x3bc <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E); // High 설정
 3e4:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <I2C_LCD_Data>
 3e8:	64 60       	ori	r22, 0x04	; 4
 3ea:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 3ee:	8e e4       	ldi	r24, 0x4E	; 78
 3f0:	e5 df       	rcall	.-54     	; 0x3bc <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 3f2:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <I2C_LCD_Data>
 3f6:	6b 7f       	andi	r22, 0xFB	; 251
 3f8:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 3fc:	8e e4       	ldi	r24, 0x4E	; 78
 3fe:	de df       	rcall	.-68     	; 0x3bc <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	98 e1       	ldi	r25, 0x18	; 24
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	08 95       	ret

0000040e <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{
 40e:	cf 93       	push	r28
 410:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0); // 상위 4bit 출력
 412:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <I2C_LCD_Data>
 416:	8f 70       	andi	r24, 0x0F	; 15
 418:	9c 2f       	mov	r25, r28
 41a:	90 7f       	andi	r25, 0xF0	; 240
 41c:	89 2b       	or	r24, r25
 41e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <I2C_LCD_Data>
	// 이전 상위 비트는 다 날라감 | data의 상위 비트는 살림 
	LCD_EnablePin();
 422:	d9 df       	rcall	.-78     	; 0x3d6 <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f)<<4); // 하위 4bit
 424:	20 e1       	ldi	r18, 0x10	; 16
 426:	c2 9f       	mul	r28, r18
 428:	c0 01       	movw	r24, r0
 42a:	11 24       	eor	r1, r1
 42c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <I2C_LCD_Data>
 430:	9f 70       	andi	r25, 0x0F	; 15
 432:	89 2b       	or	r24, r25
 434:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <I2C_LCD_Data>
	LCD_EnablePin();
 438:	ce df       	rcall	.-100    	; 0x3d6 <LCD_EnablePin>
	// 상위 4bit 받고 -> Enable해서 출력하고 -> 하위 4bit 받고 상위로 시프트하고 -> Enabla해서 출력하고
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commandData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS); // Command일 때는 control register(TWCR)을 쓰고
 43e:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <I2C_LCD_Data>
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 442:	9c 7f       	andi	r25, 0xFC	; 252
 444:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <I2C_LCD_Data>
	LCD_Data4bit(commandData);
 448:	e2 cf       	rjmp	.-60     	; 0x40e <LCD_Data4bit>
 44a:	08 95       	ret

0000044c <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)
{
	I2C_LCD_Data |= (1<<LCD_RS); // Data받을 때는 Data Register(TWDR) 쓰고
 44c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <I2C_LCD_Data>
 450:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 452:	9d 7f       	andi	r25, 0xFD	; 253
 454:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <I2C_LCD_Data>
	LCD_Data4bit(charData);
 458:	da cf       	rjmp	.-76     	; 0x40e <LCD_Data4bit>
 45a:	08 95       	ret

0000045c <LCD_BackLight>:
}


void LCD_BackLight()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);
 45c:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <I2C_LCD_Data>
 460:	68 60       	ori	r22, 0x08	; 8
 462:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 466:	8e e4       	ldi	r24, 0x4E	; 78
 468:	a9 cf       	rjmp	.-174    	; 0x3bc <I2C_TxByte>
 46a:	08 95       	ret

0000046c <LCD_gotoXY>:
}

void LCD_gotoXY(uint8_t row, uint8_t col) // LCD 화면의 커서를 지정된 행(row)과 열(col) 위치로 이동시키는 함수
{
	col %= 16; // 0~15 사이의 값 지정 가능
 46c:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2; // 0~1 사이의 값 지정 가능
 46e:	81 70       	andi	r24, 0x01	; 1
	uint8_t address = (0x40 * row) + col; // 주어진 row와 col 값을 이용하여 LCD 화면의 주소(address, 커서 위치)룰 계산한다.
 470:	90 e4       	ldi	r25, 0x40	; 64
 472:	89 9f       	mul	r24, r25
 474:	60 0d       	add	r22, r0
 476:	11 24       	eor	r1, r1
 478:	86 2f       	mov	r24, r22
	// 두 번째 행(row 1)의 주소 범위는 0x40 ~ 0x4f(64~79)
	// 예시 : row 1, col 3 -> address = 0x43
	uint8_t command = 0x80 + address; // 계산된 주소를 이용하여 이동시키는 명령어 command 생성
	// 0x80을 사용하는 이유는 특정 주소값이 아닌, 첫 번째 행의 시작을 나타내는 상징적인 값으로 사용된다,
	// 이렇게 함으로써 코드의 가독성을 높이고, 행과 열 값을 쉽게 결합하여 원하는 주소 값을 계산할 수 있다.
	LCD_WriteCommand(command);
 47a:	80 58       	subi	r24, 0x80	; 128
 47c:	e0 cf       	rjmp	.-64     	; 0x43e <LCD_WriteCommand>
 47e:	08 95       	ret

00000480 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	8c 01       	movw	r16, r24
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 48c:	df df       	rcall	.-66     	; 0x44c <LCD_WriteData>
	LCD_WriteCommand(command);
}

void LCD_WriteString(char *string)
{
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 48e:	cf 5f       	subi	r28, 0xFF	; 255
 490:	f8 01       	movw	r30, r16
 492:	ec 0f       	add	r30, r28
 494:	f1 1d       	adc	r31, r1
 496:	80 81       	ld	r24, Z
 498:	81 11       	cpse	r24, r1
 49a:	f8 cf       	rjmp	.-16     	; 0x48c <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col); // 행과 열의 위치를 받음. -> 어디서부터 쓸 것인지를 좌표를 받음
 4aa:	e0 df       	rcall	.-64     	; 0x46c <LCD_gotoXY>
	LCD_WriteString(string); // 문자열 입력을 받음
 4ac:	ce 01       	movw	r24, r28
 4ae:	e8 df       	rcall	.-48     	; 0x480 <LCD_WriteString>
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 4b6:	65 df       	rcall	.-310    	; 0x382 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	89 ef       	ldi	r24, 0xF9	; 249
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <LCD_Init+0x8>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_Init+0x12>
 4c8:	00 00       	nop
	
	_delay_ms(20);
	LCD_WriteCommand(0x03);
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	b8 df       	rcall	.-144    	; 0x43e <LCD_WriteCommand>
 4ce:	8f e3       	ldi	r24, 0x3F	; 63
 4d0:	9c e9       	ldi	r25, 0x9C	; 156
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <LCD_Init+0x1c>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 4d8:	00 00       	nop
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	b0 df       	rcall	.-160    	; 0x43e <LCD_WriteCommand>
 4de:	8f e9       	ldi	r24, 0x9F	; 159
 4e0:	9f e0       	ldi	r25, 0x0F	; 15
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LCD_Init+0x2c>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 4e8:	00 00       	nop
 4ea:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 4ec:	a8 df       	rcall	.-176    	; 0x43e <LCD_WriteCommand>
 4ee:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 4f0:	a6 df       	rcall	.-180    	; 0x43e <LCD_WriteCommand>
 4f2:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 4f4:	a4 df       	rcall	.-184    	; 0x43e <LCD_WriteCommand>
 4f6:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 4f8:	a2 df       	rcall	.-188    	; 0x43e <LCD_WriteCommand>
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	a0 df       	rcall	.-192    	; 0x43e <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	9e df       	rcall	.-196    	; 0x43e <LCD_WriteCommand>
 502:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 504:	9c df       	rcall	.-200    	; 0x43e <LCD_WriteCommand>
 506:	aa cf       	rjmp	.-172    	; 0x45c <LCD_BackLight>
 508:	08 95       	ret

0000050a <main>:
	LCD_BackLight();
 50a:	53 de       	rcall	.-858    	; 0x1b2 <Fan_Init>
 50c:	8f de       	rcall	.-738    	; 0x22c <Fan_Start_signal>
 50e:	8f b5       	in	r24, 0x2f	; 47
{
	Fan_Init();
	Fan_Start_signal();
	
	
	TCCR1A |= (1<<WGM11) | (0<<WGM10); // Fast PWM(mode 14) 세팅
 510:	82 60       	ori	r24, 0x02	; 2
 512:	8f bd       	out	0x2f, r24	; 47
 514:	8e b5       	in	r24, 0x2e	; 46
	TCCR1B |= (1<<WGM13) | (1<<WGM12);
 516:	88 61       	ori	r24, 0x18	; 24
 518:	8e bd       	out	0x2e, r24	; 46
 51a:	8f b5       	in	r24, 0x2f	; 47
	TCCR1A |= (1<<COM1A1) | (0<<COM1A0);
 51c:	80 68       	ori	r24, 0x80	; 128
 51e:	8f bd       	out	0x2f, r24	; 47
 520:	8e b5       	in	r24, 0x2e	; 46
	TCCR1B |= (0<<CS12) | (1<<CS11) | (1<<CS10);
 522:	83 60       	ori	r24, 0x03	; 3
 524:	8e bd       	out	0x2e, r24	; 46
 526:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCCR1C = 0x00; // default가 0이라 안 써줘도 됨
 52a:	87 e8       	ldi	r24, 0x87	; 135
		
	ICR1 = 4999;
 52c:	93 e1       	ldi	r25, 0x13	; 19
 52e:	97 bd       	out	0x27, r25	; 39
 530:	86 bd       	out	0x26, r24	; 38

		
	while (1)
	{
		Fan_Stage();
 532:	87 de       	rcall	.-754    	; 0x242 <Fan_Stage>
		BUTTON_spin_getState(&btn_spin);
 534:	82 eb       	ldi	r24, 0xB2	; 178
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	08 de       	rcall	.-1008   	; 0x14a <BUTTON_spin_getState>
 53a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
		
		switch (spin_cnt)
 53e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	b1 f5       	brne	.+108    	; 0x5b2 <main+0xa8>
		{
			case 1:
				DDRB = (1<<PINB5);
 546:	80 e2       	ldi	r24, 0x20	; 32
				while((spin_cnt == 1))
 548:	87 bb       	out	0x17, r24	; 23
				{
					for (int i = 0; i < 180 ; i++)
					{
						Fan_Stage();
 54a:	2c c0       	rjmp	.+88     	; 0x5a4 <main+0x9a>
 54c:	7a de       	rcall	.-780    	; 0x242 <Fan_Stage>
						Spin_start(i);
 54e:	8c 2f       	mov	r24, r28
 550:	fa de       	rcall	.-524    	; 0x346 <Spin_start>
 552:	8f e3       	ldi	r24, 0x3F	; 63
 554:	9c e9       	ldi	r25, 0x9C	; 156
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <main+0x4c>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <main+0x52>
 55c:	00 00       	nop
 55e:	21 96       	adiw	r28, 0x01	; 1
		{
			case 1:
				DDRB = (1<<PINB5);
				while((spin_cnt == 1))
				{
					for (int i = 0; i < 180 ; i++)
 560:	02 c0       	rjmp	.+4      	; 0x566 <main+0x5c>
 562:	c0 e0       	ldi	r28, 0x00	; 0
 564:	d0 e0       	ldi	r29, 0x00	; 0
 566:	c4 3b       	cpi	r28, 0xB4	; 180
 568:	d1 05       	cpc	r29, r1
 56a:	84 f3       	brlt	.-32     	; 0x54c <main+0x42>
 56c:	c0 e0       	ldi	r28, 0x00	; 0
 56e:	d0 e0       	ldi	r29, 0x00	; 0
						Spin_start(i);
						_delay_ms(10);
					}
					for (int j = 0; j < 180 ; j++)
					{
						Fan_Stage();
 570:	0b c0       	rjmp	.+22     	; 0x588 <main+0x7e>
 572:	67 de       	rcall	.-818    	; 0x242 <Fan_Stage>
						Spin_start(180-j);
 574:	84 eb       	ldi	r24, 0xB4	; 180
 576:	8c 1b       	sub	r24, r28
 578:	e6 de       	rcall	.-564    	; 0x346 <Spin_start>
 57a:	8f e3       	ldi	r24, 0x3F	; 63
 57c:	9c e9       	ldi	r25, 0x9C	; 156
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <main+0x74>
 582:	00 c0       	rjmp	.+0      	; 0x584 <main+0x7a>
 584:	00 00       	nop
 586:	21 96       	adiw	r28, 0x01	; 1
					{
						Fan_Stage();
						Spin_start(i);
						_delay_ms(10);
					}
					for (int j = 0; j < 180 ; j++)
 588:	c4 3b       	cpi	r28, 0xB4	; 180
 58a:	d1 05       	cpc	r29, r1
 58c:	94 f3       	brlt	.-28     	; 0x572 <main+0x68>
 58e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
					{
						Fan_Stage();
						Spin_start(180-j);
						_delay_ms(10);
					}
					if ((spin_cnt > 1) | (spin_cnt < 1)) 
 592:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	29 f0       	breq	.+10     	; 0x5a4 <main+0x9a>
 59a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
					{
						spin_cnt = 0;
 59e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 5a2:	c7 cf       	rjmp	.-114    	; 0x532 <main+0x28>
		
		switch (spin_cnt)
		{
			case 1:
				DDRB = (1<<PINB5);
				while((spin_cnt == 1))
 5a4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 5a8:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	c9 f2       	breq	.-78     	; 0x562 <main+0x58>
					}
				}
			break;
			
			default:
				Fan_Stage();
 5b0:	c0 cf       	rjmp	.-128    	; 0x532 <main+0x28>
 5b2:	47 de       	rcall	.-882    	; 0x242 <Fan_Stage>
				Spin_stop();
 5b4:	c4 de       	rcall	.-632    	; 0x33e <Spin_stop>
 5b6:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
				spin_cnt = 0;
 5ba:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 5be:	b9 cf       	rjmp	.-142    	; 0x532 <main+0x28>

000005c0 <__subsf3>:
			break;
 5c0:	50 58       	subi	r21, 0x80	; 128

000005c2 <__addsf3>:
 5c2:	bb 27       	eor	r27, r27
 5c4:	aa 27       	eor	r26, r26
 5c6:	0e d0       	rcall	.+28     	; 0x5e4 <__addsf3x>
 5c8:	48 c1       	rjmp	.+656    	; 0x85a <__fp_round>
 5ca:	39 d1       	rcall	.+626    	; 0x83e <__fp_pscA>
 5cc:	30 f0       	brcs	.+12     	; 0x5da <__addsf3+0x18>
 5ce:	3e d1       	rcall	.+636    	; 0x84c <__fp_pscB>
 5d0:	20 f0       	brcs	.+8      	; 0x5da <__addsf3+0x18>
 5d2:	31 f4       	brne	.+12     	; 0x5e0 <__addsf3+0x1e>
 5d4:	9f 3f       	cpi	r25, 0xFF	; 255
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__addsf3+0x1a>
 5d8:	1e f4       	brtc	.+6      	; 0x5e0 <__addsf3+0x1e>
 5da:	2e c1       	rjmp	.+604    	; 0x838 <__fp_nan>
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__addsf3+0x1e>
 5de:	e0 95       	com	r30
 5e0:	e7 fb       	bst	r30, 7
 5e2:	24 c1       	rjmp	.+584    	; 0x82c <__fp_inf>

000005e4 <__addsf3x>:
 5e4:	e9 2f       	mov	r30, r25
 5e6:	4a d1       	rcall	.+660    	; 0x87c <__fp_split3>
 5e8:	80 f3       	brcs	.-32     	; 0x5ca <__addsf3+0x8>
 5ea:	ba 17       	cp	r27, r26
 5ec:	62 07       	cpc	r22, r18
 5ee:	73 07       	cpc	r23, r19
 5f0:	84 07       	cpc	r24, r20
 5f2:	95 07       	cpc	r25, r21
 5f4:	18 f0       	brcs	.+6      	; 0x5fc <__addsf3x+0x18>
 5f6:	71 f4       	brne	.+28     	; 0x614 <__addsf3x+0x30>
 5f8:	9e f5       	brtc	.+102    	; 0x660 <__addsf3x+0x7c>
 5fa:	62 c1       	rjmp	.+708    	; 0x8c0 <__fp_zero>
 5fc:	0e f4       	brtc	.+2      	; 0x600 <__addsf3x+0x1c>
 5fe:	e0 95       	com	r30
 600:	0b 2e       	mov	r0, r27
 602:	ba 2f       	mov	r27, r26
 604:	a0 2d       	mov	r26, r0
 606:	0b 01       	movw	r0, r22
 608:	b9 01       	movw	r22, r18
 60a:	90 01       	movw	r18, r0
 60c:	0c 01       	movw	r0, r24
 60e:	ca 01       	movw	r24, r20
 610:	a0 01       	movw	r20, r0
 612:	11 24       	eor	r1, r1
 614:	ff 27       	eor	r31, r31
 616:	59 1b       	sub	r21, r25
 618:	99 f0       	breq	.+38     	; 0x640 <__addsf3x+0x5c>
 61a:	59 3f       	cpi	r21, 0xF9	; 249
 61c:	50 f4       	brcc	.+20     	; 0x632 <__addsf3x+0x4e>
 61e:	50 3e       	cpi	r21, 0xE0	; 224
 620:	68 f1       	brcs	.+90     	; 0x67c <__addsf3x+0x98>
 622:	1a 16       	cp	r1, r26
 624:	f0 40       	sbci	r31, 0x00	; 0
 626:	a2 2f       	mov	r26, r18
 628:	23 2f       	mov	r18, r19
 62a:	34 2f       	mov	r19, r20
 62c:	44 27       	eor	r20, r20
 62e:	58 5f       	subi	r21, 0xF8	; 248
 630:	f3 cf       	rjmp	.-26     	; 0x618 <__addsf3x+0x34>
 632:	46 95       	lsr	r20
 634:	37 95       	ror	r19
 636:	27 95       	ror	r18
 638:	a7 95       	ror	r26
 63a:	f0 40       	sbci	r31, 0x00	; 0
 63c:	53 95       	inc	r21
 63e:	c9 f7       	brne	.-14     	; 0x632 <__addsf3x+0x4e>
 640:	7e f4       	brtc	.+30     	; 0x660 <__addsf3x+0x7c>
 642:	1f 16       	cp	r1, r31
 644:	ba 0b       	sbc	r27, r26
 646:	62 0b       	sbc	r22, r18
 648:	73 0b       	sbc	r23, r19
 64a:	84 0b       	sbc	r24, r20
 64c:	ba f0       	brmi	.+46     	; 0x67c <__addsf3x+0x98>
 64e:	91 50       	subi	r25, 0x01	; 1
 650:	a1 f0       	breq	.+40     	; 0x67a <__addsf3x+0x96>
 652:	ff 0f       	add	r31, r31
 654:	bb 1f       	adc	r27, r27
 656:	66 1f       	adc	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	c2 f7       	brpl	.-16     	; 0x64e <__addsf3x+0x6a>
 65e:	0e c0       	rjmp	.+28     	; 0x67c <__addsf3x+0x98>
 660:	ba 0f       	add	r27, r26
 662:	62 1f       	adc	r22, r18
 664:	73 1f       	adc	r23, r19
 666:	84 1f       	adc	r24, r20
 668:	48 f4       	brcc	.+18     	; 0x67c <__addsf3x+0x98>
 66a:	87 95       	ror	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b7 95       	ror	r27
 672:	f7 95       	ror	r31
 674:	9e 3f       	cpi	r25, 0xFE	; 254
 676:	08 f0       	brcs	.+2      	; 0x67a <__addsf3x+0x96>
 678:	b3 cf       	rjmp	.-154    	; 0x5e0 <__addsf3+0x1e>
 67a:	93 95       	inc	r25
 67c:	88 0f       	add	r24, r24
 67e:	08 f0       	brcs	.+2      	; 0x682 <__addsf3x+0x9e>
 680:	99 27       	eor	r25, r25
 682:	ee 0f       	add	r30, r30
 684:	97 95       	ror	r25
 686:	87 95       	ror	r24
 688:	08 95       	ret

0000068a <__divsf3>:
 68a:	0c d0       	rcall	.+24     	; 0x6a4 <__divsf3x>
 68c:	e6 c0       	rjmp	.+460    	; 0x85a <__fp_round>
 68e:	de d0       	rcall	.+444    	; 0x84c <__fp_pscB>
 690:	40 f0       	brcs	.+16     	; 0x6a2 <__divsf3+0x18>
 692:	d5 d0       	rcall	.+426    	; 0x83e <__fp_pscA>
 694:	30 f0       	brcs	.+12     	; 0x6a2 <__divsf3+0x18>
 696:	21 f4       	brne	.+8      	; 0x6a0 <__divsf3+0x16>
 698:	5f 3f       	cpi	r21, 0xFF	; 255
 69a:	19 f0       	breq	.+6      	; 0x6a2 <__divsf3+0x18>
 69c:	c7 c0       	rjmp	.+398    	; 0x82c <__fp_inf>
 69e:	51 11       	cpse	r21, r1
 6a0:	10 c1       	rjmp	.+544    	; 0x8c2 <__fp_szero>
 6a2:	ca c0       	rjmp	.+404    	; 0x838 <__fp_nan>

000006a4 <__divsf3x>:
 6a4:	eb d0       	rcall	.+470    	; 0x87c <__fp_split3>
 6a6:	98 f3       	brcs	.-26     	; 0x68e <__divsf3+0x4>

000006a8 <__divsf3_pse>:
 6a8:	99 23       	and	r25, r25
 6aa:	c9 f3       	breq	.-14     	; 0x69e <__divsf3+0x14>
 6ac:	55 23       	and	r21, r21
 6ae:	b1 f3       	breq	.-20     	; 0x69c <__divsf3+0x12>
 6b0:	95 1b       	sub	r25, r21
 6b2:	55 0b       	sbc	r21, r21
 6b4:	bb 27       	eor	r27, r27
 6b6:	aa 27       	eor	r26, r26
 6b8:	62 17       	cp	r22, r18
 6ba:	73 07       	cpc	r23, r19
 6bc:	84 07       	cpc	r24, r20
 6be:	38 f0       	brcs	.+14     	; 0x6ce <__divsf3_pse+0x26>
 6c0:	9f 5f       	subi	r25, 0xFF	; 255
 6c2:	5f 4f       	sbci	r21, 0xFF	; 255
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	44 1f       	adc	r20, r20
 6ca:	aa 1f       	adc	r26, r26
 6cc:	a9 f3       	breq	.-22     	; 0x6b8 <__divsf3_pse+0x10>
 6ce:	33 d0       	rcall	.+102    	; 0x736 <__divsf3_pse+0x8e>
 6d0:	0e 2e       	mov	r0, r30
 6d2:	3a f0       	brmi	.+14     	; 0x6e2 <__divsf3_pse+0x3a>
 6d4:	e0 e8       	ldi	r30, 0x80	; 128
 6d6:	30 d0       	rcall	.+96     	; 0x738 <__divsf3_pse+0x90>
 6d8:	91 50       	subi	r25, 0x01	; 1
 6da:	50 40       	sbci	r21, 0x00	; 0
 6dc:	e6 95       	lsr	r30
 6de:	00 1c       	adc	r0, r0
 6e0:	ca f7       	brpl	.-14     	; 0x6d4 <__divsf3_pse+0x2c>
 6e2:	29 d0       	rcall	.+82     	; 0x736 <__divsf3_pse+0x8e>
 6e4:	fe 2f       	mov	r31, r30
 6e6:	27 d0       	rcall	.+78     	; 0x736 <__divsf3_pse+0x8e>
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	bb 1f       	adc	r27, r27
 6f0:	26 17       	cp	r18, r22
 6f2:	37 07       	cpc	r19, r23
 6f4:	48 07       	cpc	r20, r24
 6f6:	ab 07       	cpc	r26, r27
 6f8:	b0 e8       	ldi	r27, 0x80	; 128
 6fa:	09 f0       	breq	.+2      	; 0x6fe <__divsf3_pse+0x56>
 6fc:	bb 0b       	sbc	r27, r27
 6fe:	80 2d       	mov	r24, r0
 700:	bf 01       	movw	r22, r30
 702:	ff 27       	eor	r31, r31
 704:	93 58       	subi	r25, 0x83	; 131
 706:	5f 4f       	sbci	r21, 0xFF	; 255
 708:	2a f0       	brmi	.+10     	; 0x714 <__divsf3_pse+0x6c>
 70a:	9e 3f       	cpi	r25, 0xFE	; 254
 70c:	51 05       	cpc	r21, r1
 70e:	68 f0       	brcs	.+26     	; 0x72a <__divsf3_pse+0x82>
 710:	8d c0       	rjmp	.+282    	; 0x82c <__fp_inf>
 712:	d7 c0       	rjmp	.+430    	; 0x8c2 <__fp_szero>
 714:	5f 3f       	cpi	r21, 0xFF	; 255
 716:	ec f3       	brlt	.-6      	; 0x712 <__divsf3_pse+0x6a>
 718:	98 3e       	cpi	r25, 0xE8	; 232
 71a:	dc f3       	brlt	.-10     	; 0x712 <__divsf3_pse+0x6a>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f7 95       	ror	r31
 726:	9f 5f       	subi	r25, 0xFF	; 255
 728:	c9 f7       	brne	.-14     	; 0x71c <__divsf3_pse+0x74>
 72a:	88 0f       	add	r24, r24
 72c:	91 1d       	adc	r25, r1
 72e:	96 95       	lsr	r25
 730:	87 95       	ror	r24
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret
 736:	e1 e0       	ldi	r30, 0x01	; 1
 738:	66 0f       	add	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	bb 1f       	adc	r27, r27
 740:	62 17       	cp	r22, r18
 742:	73 07       	cpc	r23, r19
 744:	84 07       	cpc	r24, r20
 746:	ba 07       	cpc	r27, r26
 748:	20 f0       	brcs	.+8      	; 0x752 <__divsf3_pse+0xaa>
 74a:	62 1b       	sub	r22, r18
 74c:	73 0b       	sbc	r23, r19
 74e:	84 0b       	sbc	r24, r20
 750:	ba 0b       	sbc	r27, r26
 752:	ee 1f       	adc	r30, r30
 754:	88 f7       	brcc	.-30     	; 0x738 <__divsf3_pse+0x90>
 756:	e0 95       	com	r30
 758:	08 95       	ret

0000075a <__fixunssfsi>:
 75a:	98 d0       	rcall	.+304    	; 0x88c <__fp_splitA>
 75c:	88 f0       	brcs	.+34     	; 0x780 <__fixunssfsi+0x26>
 75e:	9f 57       	subi	r25, 0x7F	; 127
 760:	90 f0       	brcs	.+36     	; 0x786 <__fixunssfsi+0x2c>
 762:	b9 2f       	mov	r27, r25
 764:	99 27       	eor	r25, r25
 766:	b7 51       	subi	r27, 0x17	; 23
 768:	a0 f0       	brcs	.+40     	; 0x792 <__fixunssfsi+0x38>
 76a:	d1 f0       	breq	.+52     	; 0x7a0 <__fixunssfsi+0x46>
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	1a f0       	brmi	.+6      	; 0x77c <__fixunssfsi+0x22>
 776:	ba 95       	dec	r27
 778:	c9 f7       	brne	.-14     	; 0x76c <__fixunssfsi+0x12>
 77a:	12 c0       	rjmp	.+36     	; 0x7a0 <__fixunssfsi+0x46>
 77c:	b1 30       	cpi	r27, 0x01	; 1
 77e:	81 f0       	breq	.+32     	; 0x7a0 <__fixunssfsi+0x46>
 780:	9f d0       	rcall	.+318    	; 0x8c0 <__fp_zero>
 782:	b1 e0       	ldi	r27, 0x01	; 1
 784:	08 95       	ret
 786:	9c c0       	rjmp	.+312    	; 0x8c0 <__fp_zero>
 788:	67 2f       	mov	r22, r23
 78a:	78 2f       	mov	r23, r24
 78c:	88 27       	eor	r24, r24
 78e:	b8 5f       	subi	r27, 0xF8	; 248
 790:	39 f0       	breq	.+14     	; 0x7a0 <__fixunssfsi+0x46>
 792:	b9 3f       	cpi	r27, 0xF9	; 249
 794:	cc f3       	brlt	.-14     	; 0x788 <__fixunssfsi+0x2e>
 796:	86 95       	lsr	r24
 798:	77 95       	ror	r23
 79a:	67 95       	ror	r22
 79c:	b3 95       	inc	r27
 79e:	d9 f7       	brne	.-10     	; 0x796 <__fixunssfsi+0x3c>
 7a0:	3e f4       	brtc	.+14     	; 0x7b0 <__fixunssfsi+0x56>
 7a2:	90 95       	com	r25
 7a4:	80 95       	com	r24
 7a6:	70 95       	com	r23
 7a8:	61 95       	neg	r22
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	08 95       	ret

000007b2 <__floatunsisf>:
 7b2:	e8 94       	clt
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <__floatsisf+0x12>

000007b6 <__floatsisf>:
 7b6:	97 fb       	bst	r25, 7
 7b8:	3e f4       	brtc	.+14     	; 0x7c8 <__floatsisf+0x12>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	99 23       	and	r25, r25
 7ca:	a9 f0       	breq	.+42     	; 0x7f6 <__floatsisf+0x40>
 7cc:	f9 2f       	mov	r31, r25
 7ce:	96 e9       	ldi	r25, 0x96	; 150
 7d0:	bb 27       	eor	r27, r27
 7d2:	93 95       	inc	r25
 7d4:	f6 95       	lsr	r31
 7d6:	87 95       	ror	r24
 7d8:	77 95       	ror	r23
 7da:	67 95       	ror	r22
 7dc:	b7 95       	ror	r27
 7de:	f1 11       	cpse	r31, r1
 7e0:	f8 cf       	rjmp	.-16     	; 0x7d2 <__floatsisf+0x1c>
 7e2:	fa f4       	brpl	.+62     	; 0x822 <__floatsisf+0x6c>
 7e4:	bb 0f       	add	r27, r27
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__floatsisf+0x36>
 7e8:	60 ff       	sbrs	r22, 0
 7ea:	1b c0       	rjmp	.+54     	; 0x822 <__floatsisf+0x6c>
 7ec:	6f 5f       	subi	r22, 0xFF	; 255
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	16 c0       	rjmp	.+44     	; 0x822 <__floatsisf+0x6c>
 7f6:	88 23       	and	r24, r24
 7f8:	11 f0       	breq	.+4      	; 0x7fe <__floatsisf+0x48>
 7fa:	96 e9       	ldi	r25, 0x96	; 150
 7fc:	11 c0       	rjmp	.+34     	; 0x820 <__floatsisf+0x6a>
 7fe:	77 23       	and	r23, r23
 800:	21 f0       	breq	.+8      	; 0x80a <__floatsisf+0x54>
 802:	9e e8       	ldi	r25, 0x8E	; 142
 804:	87 2f       	mov	r24, r23
 806:	76 2f       	mov	r23, r22
 808:	05 c0       	rjmp	.+10     	; 0x814 <__floatsisf+0x5e>
 80a:	66 23       	and	r22, r22
 80c:	71 f0       	breq	.+28     	; 0x82a <__floatsisf+0x74>
 80e:	96 e8       	ldi	r25, 0x86	; 134
 810:	86 2f       	mov	r24, r22
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	2a f0       	brmi	.+10     	; 0x822 <__floatsisf+0x6c>
 818:	9a 95       	dec	r25
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	da f7       	brpl	.-10     	; 0x818 <__floatsisf+0x62>
 822:	88 0f       	add	r24, r24
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret

0000082c <__fp_inf>:
 82c:	97 f9       	bld	r25, 7
 82e:	9f 67       	ori	r25, 0x7F	; 127
 830:	80 e8       	ldi	r24, 0x80	; 128
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	08 95       	ret

00000838 <__fp_nan>:
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	80 ec       	ldi	r24, 0xC0	; 192
 83c:	08 95       	ret

0000083e <__fp_pscA>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	16 16       	cp	r1, r22
 844:	17 06       	cpc	r1, r23
 846:	18 06       	cpc	r1, r24
 848:	09 06       	cpc	r0, r25
 84a:	08 95       	ret

0000084c <__fp_pscB>:
 84c:	00 24       	eor	r0, r0
 84e:	0a 94       	dec	r0
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	05 06       	cpc	r0, r21
 858:	08 95       	ret

0000085a <__fp_round>:
 85a:	09 2e       	mov	r0, r25
 85c:	03 94       	inc	r0
 85e:	00 0c       	add	r0, r0
 860:	11 f4       	brne	.+4      	; 0x866 <__fp_round+0xc>
 862:	88 23       	and	r24, r24
 864:	52 f0       	brmi	.+20     	; 0x87a <__fp_round+0x20>
 866:	bb 0f       	add	r27, r27
 868:	40 f4       	brcc	.+16     	; 0x87a <__fp_round+0x20>
 86a:	bf 2b       	or	r27, r31
 86c:	11 f4       	brne	.+4      	; 0x872 <__fp_round+0x18>
 86e:	60 ff       	sbrs	r22, 0
 870:	04 c0       	rjmp	.+8      	; 0x87a <__fp_round+0x20>
 872:	6f 5f       	subi	r22, 0xFF	; 255
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	08 95       	ret

0000087c <__fp_split3>:
 87c:	57 fd       	sbrc	r21, 7
 87e:	90 58       	subi	r25, 0x80	; 128
 880:	44 0f       	add	r20, r20
 882:	55 1f       	adc	r21, r21
 884:	59 f0       	breq	.+22     	; 0x89c <__fp_splitA+0x10>
 886:	5f 3f       	cpi	r21, 0xFF	; 255
 888:	71 f0       	breq	.+28     	; 0x8a6 <__fp_splitA+0x1a>
 88a:	47 95       	ror	r20

0000088c <__fp_splitA>:
 88c:	88 0f       	add	r24, r24
 88e:	97 fb       	bst	r25, 7
 890:	99 1f       	adc	r25, r25
 892:	61 f0       	breq	.+24     	; 0x8ac <__fp_splitA+0x20>
 894:	9f 3f       	cpi	r25, 0xFF	; 255
 896:	79 f0       	breq	.+30     	; 0x8b6 <__fp_splitA+0x2a>
 898:	87 95       	ror	r24
 89a:	08 95       	ret
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	14 06       	cpc	r1, r20
 8a2:	55 1f       	adc	r21, r21
 8a4:	f2 cf       	rjmp	.-28     	; 0x88a <__fp_split3+0xe>
 8a6:	46 95       	lsr	r20
 8a8:	f1 df       	rcall	.-30     	; 0x88c <__fp_splitA>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <__fp_splitA+0x30>
 8ac:	16 16       	cp	r1, r22
 8ae:	17 06       	cpc	r1, r23
 8b0:	18 06       	cpc	r1, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	f1 cf       	rjmp	.-30     	; 0x898 <__fp_splitA+0xc>
 8b6:	86 95       	lsr	r24
 8b8:	71 05       	cpc	r23, r1
 8ba:	61 05       	cpc	r22, r1
 8bc:	08 94       	sec
 8be:	08 95       	ret

000008c0 <__fp_zero>:
 8c0:	e8 94       	clt

000008c2 <__fp_szero>:
 8c2:	bb 27       	eor	r27, r27
 8c4:	66 27       	eor	r22, r22
 8c6:	77 27       	eor	r23, r23
 8c8:	cb 01       	movw	r24, r22
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret

000008ce <__mulsf3>:
 8ce:	0b d0       	rcall	.+22     	; 0x8e6 <__mulsf3x>
 8d0:	c4 cf       	rjmp	.-120    	; 0x85a <__fp_round>
 8d2:	b5 df       	rcall	.-150    	; 0x83e <__fp_pscA>
 8d4:	28 f0       	brcs	.+10     	; 0x8e0 <__mulsf3+0x12>
 8d6:	ba df       	rcall	.-140    	; 0x84c <__fp_pscB>
 8d8:	18 f0       	brcs	.+6      	; 0x8e0 <__mulsf3+0x12>
 8da:	95 23       	and	r25, r21
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <__mulsf3+0x12>
 8de:	a6 cf       	rjmp	.-180    	; 0x82c <__fp_inf>
 8e0:	ab cf       	rjmp	.-170    	; 0x838 <__fp_nan>
 8e2:	11 24       	eor	r1, r1
 8e4:	ee cf       	rjmp	.-36     	; 0x8c2 <__fp_szero>

000008e6 <__mulsf3x>:
 8e6:	ca df       	rcall	.-108    	; 0x87c <__fp_split3>
 8e8:	a0 f3       	brcs	.-24     	; 0x8d2 <__mulsf3+0x4>

000008ea <__mulsf3_pse>:
 8ea:	95 9f       	mul	r25, r21
 8ec:	d1 f3       	breq	.-12     	; 0x8e2 <__mulsf3+0x14>
 8ee:	95 0f       	add	r25, r21
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	55 1f       	adc	r21, r21
 8f4:	62 9f       	mul	r22, r18
 8f6:	f0 01       	movw	r30, r0
 8f8:	72 9f       	mul	r23, r18
 8fa:	bb 27       	eor	r27, r27
 8fc:	f0 0d       	add	r31, r0
 8fe:	b1 1d       	adc	r27, r1
 900:	63 9f       	mul	r22, r19
 902:	aa 27       	eor	r26, r26
 904:	f0 0d       	add	r31, r0
 906:	b1 1d       	adc	r27, r1
 908:	aa 1f       	adc	r26, r26
 90a:	64 9f       	mul	r22, r20
 90c:	66 27       	eor	r22, r22
 90e:	b0 0d       	add	r27, r0
 910:	a1 1d       	adc	r26, r1
 912:	66 1f       	adc	r22, r22
 914:	82 9f       	mul	r24, r18
 916:	22 27       	eor	r18, r18
 918:	b0 0d       	add	r27, r0
 91a:	a1 1d       	adc	r26, r1
 91c:	62 1f       	adc	r22, r18
 91e:	73 9f       	mul	r23, r19
 920:	b0 0d       	add	r27, r0
 922:	a1 1d       	adc	r26, r1
 924:	62 1f       	adc	r22, r18
 926:	83 9f       	mul	r24, r19
 928:	a0 0d       	add	r26, r0
 92a:	61 1d       	adc	r22, r1
 92c:	22 1f       	adc	r18, r18
 92e:	74 9f       	mul	r23, r20
 930:	33 27       	eor	r19, r19
 932:	a0 0d       	add	r26, r0
 934:	61 1d       	adc	r22, r1
 936:	23 1f       	adc	r18, r19
 938:	84 9f       	mul	r24, r20
 93a:	60 0d       	add	r22, r0
 93c:	21 1d       	adc	r18, r1
 93e:	82 2f       	mov	r24, r18
 940:	76 2f       	mov	r23, r22
 942:	6a 2f       	mov	r22, r26
 944:	11 24       	eor	r1, r1
 946:	9f 57       	subi	r25, 0x7F	; 127
 948:	50 40       	sbci	r21, 0x00	; 0
 94a:	8a f0       	brmi	.+34     	; 0x96e <__mulsf3_pse+0x84>
 94c:	e1 f0       	breq	.+56     	; 0x986 <__mulsf3_pse+0x9c>
 94e:	88 23       	and	r24, r24
 950:	4a f0       	brmi	.+18     	; 0x964 <__mulsf3_pse+0x7a>
 952:	ee 0f       	add	r30, r30
 954:	ff 1f       	adc	r31, r31
 956:	bb 1f       	adc	r27, r27
 958:	66 1f       	adc	r22, r22
 95a:	77 1f       	adc	r23, r23
 95c:	88 1f       	adc	r24, r24
 95e:	91 50       	subi	r25, 0x01	; 1
 960:	50 40       	sbci	r21, 0x00	; 0
 962:	a9 f7       	brne	.-22     	; 0x94e <__mulsf3_pse+0x64>
 964:	9e 3f       	cpi	r25, 0xFE	; 254
 966:	51 05       	cpc	r21, r1
 968:	70 f0       	brcs	.+28     	; 0x986 <__mulsf3_pse+0x9c>
 96a:	60 cf       	rjmp	.-320    	; 0x82c <__fp_inf>
 96c:	aa cf       	rjmp	.-172    	; 0x8c2 <__fp_szero>
 96e:	5f 3f       	cpi	r21, 0xFF	; 255
 970:	ec f3       	brlt	.-6      	; 0x96c <__mulsf3_pse+0x82>
 972:	98 3e       	cpi	r25, 0xE8	; 232
 974:	dc f3       	brlt	.-10     	; 0x96c <__mulsf3_pse+0x82>
 976:	86 95       	lsr	r24
 978:	77 95       	ror	r23
 97a:	67 95       	ror	r22
 97c:	b7 95       	ror	r27
 97e:	f7 95       	ror	r31
 980:	e7 95       	ror	r30
 982:	9f 5f       	subi	r25, 0xFF	; 255
 984:	c1 f7       	brne	.-16     	; 0x976 <__mulsf3_pse+0x8c>
 986:	fe 2b       	or	r31, r30
 988:	88 0f       	add	r24, r24
 98a:	91 1d       	adc	r25, r1
 98c:	96 95       	lsr	r25
 98e:	87 95       	ror	r24
 990:	97 f9       	bld	r25, 7
 992:	08 95       	ret

00000994 <_exit>:
 994:	f8 94       	cli

00000996 <__stop_program>:
 996:	ff cf       	rjmp	.-2      	; 0x996 <__stop_program>
