
Button_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099d  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  00000bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c8  00000000  00000000  00001aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	50 c0       	rjmp	.+160    	; 0x13c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

// 버튼 누르면 시프트(1), 반대로 돌고(2), 플래그 세우고(3), 꺼지게끔(4) //

int main()
{
	DDRD = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	DDRC &= ~(1<<PINC0);
  a2:	84 b3       	in	r24, 0x14	; 20
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	84 bb       	out	0x14, r24	; 20
	
	uint8_t ledData = 0x01;
	uint8_t buttonData;
	int flag = 0;
	PORTD = 0x00; // 꺼진 상태로 출발
  a8:	12 ba       	out	0x12, r1	; 18
int main()
{
	DDRD = 0xff;
	DDRC &= ~(1<<PINC0);
	
	uint8_t ledData = 0x01;
  aa:	91 e0       	ldi	r25, 0x01	; 1
	int flag = 0;
	PORTD = 0x00; // 꺼진 상태로 출발
	
	while(1)
	{
		buttonData = PINC;
  ac:	83 b3       	in	r24, 0x13	; 19
		if((buttonData & (1<<0)) == 0) // 0번 버튼
  ae:	80 fd       	sbrc	r24, 0
  b0:	1b c0       	rjmp	.+54     	; 0xe8 <main+0x4a>
		{
			PORTD = ledData;
  b2:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	30 e7       	ldi	r19, 0x70	; 112
  b8:	42 e0       	ldi	r20, 0x02	; 2
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	40 40       	sbci	r20, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x26>
  c4:	00 00       	nop
			_delay_ms(50); // 소프트웨어적으로 만든 간단한 debouncing, Debounce code 
			ledData = (ledData >> 7) | (ledData << 1);
  c6:	29 2f       	mov	r18, r25
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	99 1f       	adc	r25, r25
  d0:	99 27       	eor	r25, r25
  d2:	99 1f       	adc	r25, r25
  d4:	92 2b       	or	r25, r18
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	31 ee       	ldi	r19, 0xE1	; 225
  da:	44 e0       	ldi	r20, 0x04	; 4
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	40 40       	sbci	r20, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x3e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x48>
  e6:	00 00       	nop
			_delay_ms(100); // 100ms로 바꾸면, 1번 눌렀는데 2칸씩 가버린다.(bouncing 발생)
		}
		if ((buttonData & (1<<1)) == 0) // 1번 버튼
  e8:	81 fd       	sbrc	r24, 1
  ea:	10 c0       	rjmp	.+32     	; 0x10c <main+0x6e>
		{
			PORTD = ledData;
  ec:	92 bb       	out	0x12, r25	; 18
			//_delay_ms(50);
			ledData = (ledData >> 1) | (ledData << 7);
  ee:	40 e8       	ldi	r20, 0x80	; 128
  f0:	94 9f       	mul	r25, r20
  f2:	90 01       	movw	r18, r0
  f4:	11 24       	eor	r1, r1
  f6:	96 95       	lsr	r25
  f8:	92 2b       	or	r25, r18
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	31 ee       	ldi	r19, 0xE1	; 225
  fe:	44 e0       	ldi	r20, 0x04	; 4
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x62>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x6c>
 10a:	00 00       	nop
		}
		if ((buttonData & (1<<2)) == 0)
		{
			flag = 1;
		}
		if((buttonData & (1<<3)) == 0)
 10c:	83 fd       	sbrc	r24, 3
 10e:	ce cf       	rjmp	.-100    	; 0xac <main+0xe>
		{
			PORTD = 0xff;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	82 bb       	out	0x12, r24	; 18
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	23 ec       	ldi	r18, 0xC3	; 195
 118:	39 e0       	ldi	r19, 0x09	; 9
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	20 40       	sbci	r18, 0x00	; 0
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x7c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x86>
 124:	00 00       	nop
			_delay_ms(200);
			PORTD = 0x00;
 126:	12 ba       	out	0x12, r1	; 18
 128:	4f ef       	ldi	r20, 0xFF	; 255
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	29 e0       	ldi	r18, 0x09	; 9
 12e:	41 50       	subi	r20, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	20 40       	sbci	r18, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x90>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x9a>
 138:	00 00       	nop
 13a:	b8 cf       	rjmp	.-144    	; 0xac <main+0xe>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
