
UltraSonic_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000c58  00000cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800132  00800132  00000d1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001304  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c74  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087f  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cd  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000590  00000000  00000000  00003e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000043e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 33       	cpi	r26, 0x39	; 57
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	11 d1       	rcall	.+546    	; 0x2e6 <main>
  c4:	c7 c5       	rjmp	.+2958   	; 0xc54 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <I2C_Init>:
#include "I2C.h"


void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL) | (1<<I2C_SDA); // 출력 설정
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; // 100KHz
  ce:	88 e4       	ldi	r24, 0x48	; 72
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d4:	08 95       	ret

000000d6 <I2C_Start>:
	// TWBR = 12; // 400KHz
}

void I2C_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // 1을 보내는 것은, S/W적으로 플래그를 Clear해주는 것이다.
  d6:	84 ea       	ldi	r24, 0xA4	; 164
  d8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	                                            // 1 Set하여 인터럽트 발생시키는 것이 아님.
	while(!(TWCR & (1<<TWINT))); // 하드웨어적으로 TWINT 시점을 결정
  dc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  e0:	88 23       	and	r24, r24
  e2:	e4 f7       	brge	.-8      	; 0xdc <I2C_Start+0x6>
	                             // 기다렸다가 조건이 만족되면 while문 수행
}
  e4:	08 95       	ret

000000e6 <I2C_Stop>:

void I2C_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Stop 비트 설정
  e6:	84 e9       	ldi	r24, 0x94	; 148
  e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  ec:	08 95       	ret

000000ee <I2C_TxData>:
}

void I2C_TxData(uint8_t data) // data 1바이트 전송
{
	TWDR = data;
  ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT))); // 전송 완료 대기
  f8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  fc:	88 23       	and	r24, r24
  fe:	e4 f7       	brge	.-8      	; 0xf8 <I2C_TxData+0xa>
}
 100:	08 95       	ret

00000102 <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	d8 2f       	mov	r29, r24
 108:	c6 2f       	mov	r28, r22
	I2C_Start();
 10a:	e5 df       	rcall	.-54     	; 0xd6 <I2C_Start>
	I2C_TxData(devAddrRW); // 읽을 것이냐 쓸 것이냐
 10c:	8d 2f       	mov	r24, r29
 10e:	ef df       	rcall	.-34     	; 0xee <I2C_TxData>
	I2C_TxData(data); // 입/출력할 데이터 보냄
 110:	8c 2f       	mov	r24, r28
 112:	ed df       	rcall	.-38     	; 0xee <I2C_TxData>
	I2C_Stop();
 114:	e8 df       	rcall	.-48     	; 0xe6 <I2C_Stop>
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <LCD_EnablePin>:
 11c:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 120:	6b 7f       	andi	r22, 0xFB	; 251
 122:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 126:	8e e4       	ldi	r24, 0x4E	; 78
 128:	ec df       	rcall	.-40     	; 0x102 <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E); // High 설정
 12a:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 12e:	64 60       	ori	r22, 0x04	; 4
 130:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 134:	8e e4       	ldi	r24, 0x4E	; 78
 136:	e5 df       	rcall	.-54     	; 0x102 <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 138:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 13c:	6b 7f       	andi	r22, 0xFB	; 251
 13e:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 142:	8e e4       	ldi	r24, 0x4E	; 78
 144:	de df       	rcall	.-68     	; 0x102 <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	98 e1       	ldi	r25, 0x18	; 24
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_EnablePin+0x2e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_EnablePin+0x34>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0); // 상위 4bit 출력
 158:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	9c 2f       	mov	r25, r28
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	89 2b       	or	r24, r25
 164:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
	// 이전 상위 비트는 다 날라감 | data의 상위 비트는 살림 
	LCD_EnablePin();
 168:	d9 df       	rcall	.-78     	; 0x11c <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f)<<4); // 하위 4bit
 16a:	20 e1       	ldi	r18, 0x10	; 16
 16c:	c2 9f       	mul	r28, r18
 16e:	c0 01       	movw	r24, r0
 170:	11 24       	eor	r1, r1
 172:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__data_end>
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	89 2b       	or	r24, r25
 17a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
	LCD_EnablePin();
 17e:	ce df       	rcall	.-100    	; 0x11c <LCD_EnablePin>
	// 상위 4bit 받고 -> Enable해서 출력하고 -> 하위 4bit 받고 상위로 시프트하고 -> Enabla해서 출력하고
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commandData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS); // Command일 때는 control register(TWCR)을 쓰고
 184:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__data_end>
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 188:	9c 7f       	andi	r25, 0xFC	; 252
 18a:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <__data_end>
	LCD_Data4bit(commandData);
 18e:	e2 cf       	rjmp	.-60     	; 0x154 <LCD_Data4bit>
 190:	08 95       	ret

00000192 <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)
{
	I2C_LCD_Data |= (1<<LCD_RS); // Data받을 때는 Data Register(TWDR) 쓰고
 192:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__data_end>
 196:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 198:	9d 7f       	andi	r25, 0xFD	; 253
 19a:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <__data_end>
	LCD_Data4bit(charData);
 19e:	da cf       	rjmp	.-76     	; 0x154 <LCD_Data4bit>
 1a0:	08 95       	ret

000001a2 <LCD_BackLight>:
}


void LCD_BackLight()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);
 1a2:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 1a6:	68 60       	ori	r22, 0x08	; 8
 1a8:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 1ac:	8e e4       	ldi	r24, 0x4E	; 78
 1ae:	a9 cf       	rjmp	.-174    	; 0x102 <I2C_TxByte>
 1b0:	08 95       	ret

000001b2 <LCD_gotoXY>:
}

void LCD_gotoXY(uint8_t row, uint8_t col) // LCD 화면의 커서를 지정된 행(row)과 열(col) 위치로 이동시키는 함수
{
	col %= 16; // 0~15 사이의 값 지정 가능
 1b2:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2; // 0~1 사이의 값 지정 가능
 1b4:	81 70       	andi	r24, 0x01	; 1
	uint8_t address = (0x40 * row) + col; // 주어진 row와 col 값을 이용하여 LCD 화면의 주소(address, 커서 위치)룰 계산한다.
 1b6:	90 e4       	ldi	r25, 0x40	; 64
 1b8:	89 9f       	mul	r24, r25
 1ba:	60 0d       	add	r22, r0
 1bc:	11 24       	eor	r1, r1
 1be:	86 2f       	mov	r24, r22
	// 두 번째 행(row 1)의 주소 범위는 0x40 ~ 0x4f(64~79)
	// 예시 : row 1, col 3 -> address = 0x43
	uint8_t command = 0x80 + address; // 계산된 주소를 이용하여 이동시키는 명령어 command 생성
	// 0x80을 사용하는 이유는 특정 주소값이 아닌, 첫 번째 행의 시작을 나타내는 상징적인 값으로 사용된다,
	// 이렇게 함으로써 코드의 가독성을 높이고, 행과 열 값을 쉽게 결합하여 원하는 주소 값을 계산할 수 있다.
	LCD_WriteCommand(command);
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	e0 cf       	rjmp	.-64     	; 0x184 <LCD_WriteCommand>
 1c4:	08 95       	ret

000001c6 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	8c 01       	movw	r16, r24
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 1d2:	df df       	rcall	.-66     	; 0x192 <LCD_WriteData>
	LCD_WriteCommand(command);
}

void LCD_WriteString(char *string)
{
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 1d4:	cf 5f       	subi	r28, 0xFF	; 255
 1d6:	f8 01       	movw	r30, r16
 1d8:	ec 0f       	add	r30, r28
 1da:	f1 1d       	adc	r31, r1
 1dc:	80 81       	ld	r24, Z
 1de:	81 11       	cpse	r24, r1
 1e0:	f8 cf       	rjmp	.-16     	; 0x1d2 <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col); // 행과 열의 위치를 받음. -> 어디서부터 쓸 것인지를 좌표를 받음
 1f0:	e0 df       	rcall	.-64     	; 0x1b2 <LCD_gotoXY>
	LCD_WriteString(string); // 문자열 입력을 받음
 1f2:	ce 01       	movw	r24, r28
 1f4:	e8 df       	rcall	.-48     	; 0x1c6 <LCD_WriteString>
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 1fc:	65 df       	rcall	.-310    	; 0xc8 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	89 ef       	ldi	r24, 0xF9	; 249
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <LCD_Init+0x8>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_Init+0x12>
 20e:	00 00       	nop
	
	_delay_ms(20);
	LCD_WriteCommand(0x03);
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	b8 df       	rcall	.-144    	; 0x184 <LCD_WriteCommand>
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	9c e9       	ldi	r25, 0x9C	; 156
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Init+0x1c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 21e:	00 00       	nop
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	b0 df       	rcall	.-160    	; 0x184 <LCD_WriteCommand>
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	9f e0       	ldi	r25, 0x0F	; 15
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x2c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 22e:	00 00       	nop
 230:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 232:	a8 df       	rcall	.-176    	; 0x184 <LCD_WriteCommand>
 234:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 236:	a6 df       	rcall	.-180    	; 0x184 <LCD_WriteCommand>
 238:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 23a:	a4 df       	rcall	.-184    	; 0x184 <LCD_WriteCommand>
 23c:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 23e:	a2 df       	rcall	.-188    	; 0x184 <LCD_WriteCommand>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	a0 df       	rcall	.-192    	; 0x184 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	9e df       	rcall	.-196    	; 0x184 <LCD_WriteCommand>
 248:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 24a:	9c df       	rcall	.-200    	; 0x184 <LCD_WriteCommand>
 24c:	aa cf       	rjmp	.-172    	; 0x1a2 <LCD_BackLight>
 24e:	08 95       	ret

00000250 <Timer_init>:

// 16 bit Timer1 초기화 함수
void Timer_init()
{
	// Timer1의 분주비 설정(1024)
	TCCR1B |= (1<<CS12) | (1<<CS10);
 250:	8e b5       	in	r24, 0x2e	; 46
 252:	85 60       	ori	r24, 0x05	; 5
 254:	8e bd       	out	0x2e, r24	; 46
 256:	08 95       	ret

00000258 <measure_distance>:

// 거리 측정 함수
uint8_t measure_distance()
{
	// 트리거 핀으로 펄스 출력(10us TTL)
	PORTB &= ~(1<<PORTB1); // Low 시작
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	8d 7f       	andi	r24, 0xFD	; 253
 25c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	25 e0       	ldi	r18, 0x05	; 5
 260:	2a 95       	dec	r18
 262:	f1 f7       	brne	.-4      	; 0x260 <measure_distance+0x8>
 264:	00 00       	nop
	_delay_us(1);
	PORTB |= (1<<PORTB1); // High 출력
 266:	88 b3       	in	r24, 0x18	; 24
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	85 e3       	ldi	r24, 0x35	; 53
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <measure_distance+0x16>
 272:	00 00       	nop
	_delay_us(10);
	PORTB &= ~(1<<PORTB1); // Low 출력
 274:	88 b3       	in	r24, 0x18	; 24
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	88 bb       	out	0x18, r24	; 24
	
	// Echo pin이 High가 될 때까지 대기
	TCNT1 = 0;
 27a:	1d bc       	out	0x2d, r1	; 45
 27c:	1c bc       	out	0x2c, r1	; 44
	while (!(PINB & (1<<PINB0))) // 0번 핀 
 27e:	05 c0       	rjmp	.+10     	; 0x28a <measure_distance+0x32>
	if (TCNT1 > 65000) return 0; // 장애물이 없는 경우(얘가 잴 수 있는 건 2~400cm)
 280:	2c b5       	in	r18, 0x2c	; 44
 282:	3d b5       	in	r19, 0x2d	; 45
 284:	29 3e       	cpi	r18, 0xE9	; 233
 286:	3d 4f       	sbci	r19, 0xFD	; 253
 288:	68 f5       	brcc	.+90     	; 0x2e4 <measure_distance+0x8c>
	_delay_us(10);
	PORTB &= ~(1<<PORTB1); // Low 출력
	
	// Echo pin이 High가 될 때까지 대기
	TCNT1 = 0;
	while (!(PINB & (1<<PINB0))) // 0번 핀 
 28a:	96 b3       	in	r25, 0x16	; 22
 28c:	89 2f       	mov	r24, r25
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	90 ff       	sbrs	r25, 0
 292:	f6 cf       	rjmp	.-20     	; 0x280 <measure_distance+0x28>
	if (TCNT1 > 65000) return 0; // 장애물이 없는 경우(얘가 잴 수 있는 건 2~400cm)
	
	// Echo pin이 Low가 될 때까지 시간 측정
	TCNT1 = 0;
 294:	1d bc       	out	0x2d, r1	; 45
 296:	1c bc       	out	0x2c, r1	; 44
	while(PINB & 1<<PINB0)
 298:	08 c0       	rjmp	.+16     	; 0x2aa <measure_distance+0x52>
	{
		if (TCNT1 > 65000)
 29a:	8c b5       	in	r24, 0x2c	; 44
 29c:	9d b5       	in	r25, 0x2d	; 45
 29e:	89 3e       	cpi	r24, 0xE9	; 233
 2a0:	9d 4f       	sbci	r25, 0xFD	; 253
 2a2:	18 f0       	brcs	.+6      	; 0x2aa <measure_distance+0x52>
		{
			TCNT1 = 0;
 2a4:	1d bc       	out	0x2d, r1	; 45
 2a6:	1c bc       	out	0x2c, r1	; 44
			break;
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <measure_distance+0x56>
	while (!(PINB & (1<<PINB0))) // 0번 핀 
	if (TCNT1 > 65000) return 0; // 장애물이 없는 경우(얘가 잴 수 있는 건 2~400cm)
	
	// Echo pin이 Low가 될 때까지 시간 측정
	TCNT1 = 0;
	while(PINB & 1<<PINB0)
 2aa:	b0 99       	sbic	0x16, 0	; 22
 2ac:	f6 cf       	rjmp	.-20     	; 0x29a <measure_distance+0x42>
			break;
		}
	}
	
	// Echo Pin의 펄스폭을 마이크로초로 계산
	double pulse_width = 1000000.0 * TCNT1 * PRESCALER / F_CPU;
 2ae:	6c b5       	in	r22, 0x2c	; 44
 2b0:	7d b5       	in	r23, 0x2d	; 45
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 d1       	rcall	.+516    	; 0x4bc <__floatunsisf>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	34 e2       	ldi	r19, 0x24	; 36
 2bc:	44 e7       	ldi	r20, 0x74	; 116
 2be:	59 e4       	ldi	r21, 0x49	; 73
 2c0:	8b d1       	rcall	.+790    	; 0x5d8 <__mulsf3>
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e8       	ldi	r20, 0x80	; 128
 2c8:	54 e4       	ldi	r21, 0x44	; 68
 2ca:	86 d1       	rcall	.+780    	; 0x5d8 <__mulsf3>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	34 e2       	ldi	r19, 0x24	; 36
 2d0:	44 e7       	ldi	r20, 0x74	; 116
 2d2:	5b e4       	ldi	r21, 0x4B	; 75
 2d4:	5f d0       	rcall	.+190    	; 0x394 <__divsf3>
	
	// 계산된 펄스의 폭을 cm로 변환한 뒤 반환
	return pulse_width / 58;
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	48 e6       	ldi	r20, 0x68	; 104
 2dc:	52 e4       	ldi	r21, 0x42	; 66
 2de:	5a d0       	rcall	.+180    	; 0x394 <__divsf3>
 2e0:	c1 d0       	rcall	.+386    	; 0x464 <__fixunssfsi>
 2e2:	86 2f       	mov	r24, r22
}
 2e4:	08 95       	ret

000002e6 <main>:


int main(void)
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	6e 97       	sbiw	r28, 0x1e	; 30
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
    uint8_t distance;
	char buff[30];
	
	// 표준 출력을 UART로 설정
	stdout = &OUTPUT;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <__iob+0x3>
 302:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__iob+0x2>
	UART0_Init();
 306:	32 d0       	rcall	.+100    	; 0x36c <UART0_Init>
	
	DDRB |= (1<<PORTB1); // 트리거 핀을 출력으로 설정 (PORTB1)
 308:	87 b3       	in	r24, 0x17	; 23
 30a:	82 60       	ori	r24, 0x02	; 2
 30c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PORTB0); // 에코 핀을 입력으로 설정 (PORTB0)
 30e:	87 b3       	in	r24, 0x17	; 23
 310:	8e 7f       	andi	r24, 0xFE	; 254
	
	Timer_init();
 312:	87 bb       	out	0x17, r24	; 23
	LCD_Init();
 314:	9d df       	rcall	.-198    	; 0x250 <Timer_init>
 316:	72 df       	rcall	.-284    	; 0x1fc <LCD_Init>
	LCD_WriteStringXY(0, 0, "UltraSonic Test");
 318:	4e e0       	ldi	r20, 0x0E	; 14
 31a:	51 e0       	ldi	r21, 0x01	; 1
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
	
    while (1) 
    {
		distance = measure_distance(); // 거리 측정
 324:	62 df       	rcall	.-316    	; 0x1ea <LCD_WriteStringXY>
 326:	98 df       	rcall	.-208    	; 0x258 <measure_distance>
		// 측정된 거리를 문자열로 변환하여 버퍼에 저장
		sprintf(buff, "Distance : %-3dcm\r\n", distance);
 328:	1f 92       	push	r1
 32a:	8f 93       	push	r24
 32c:	8e e1       	ldi	r24, 0x1E	; 30
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	9f 93       	push	r25
 332:	8f 93       	push	r24
 334:	8e 01       	movw	r16, r28
 336:	0f 5f       	subi	r16, 0xFF	; 255
 338:	1f 4f       	sbci	r17, 0xFF	; 255
 33a:	1f 93       	push	r17
 33c:	0f 93       	push	r16
 33e:	af d1       	rcall	.+862    	; 0x69e <sprintf>
		// LCD에 버퍼 내용 출력
		LCD_WriteStringXY(1, 0, buff);
 340:	a8 01       	movw	r20, r16
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	4f df       	rcall	.-354    	; 0x1ea <LCD_WriteStringXY>
 34c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	83 ed       	ldi	r24, 0xD3	; 211
 350:	90 e3       	ldi	r25, 0x30	; 48
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x6c>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x76>
 35c:	00 00       	nop
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	dd cf       	rjmp	.-70     	; 0x326 <main+0x40>

0000036c <UART0_Init>:
// 1. 프로그램 다운로드 해 -> 해당 창 close
// 2. 스위치 오른쪽으로 토글
// 3. compo 어쩌고 파일 열고
// 4. 프로그램 수정하려면, compo 어쩌고 파일 close하고 스위치 왼쪽으로 토글하고 1번
{
	UBRR0H = 0x00;
 36c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0xcf; // 9600bps, 2배속모드를 쓸 것이다.
 370:	8f ec       	ldi	r24, 0xCF	; 207
 372:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = (1<<U2X0); // 2배속 모드 셋
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	8b b9       	out	0x0b, r24	; 11
	// 비동기 모드, 8bit 데이터, 패리티비트 없음, 1비트 stop bit
	//UCSR0C |= (0<<UMSEL0); // 비동기 모드
	//UCSR0C |= (0<<UPM01) | (0<<UPM00); // 패리티 비트 없음
	//UCSR0C |= (0<<USBS0); // 1비트 stop mode
	
	UCSR0B |= (1<<RXEN0); // 수신 가능(RX PIN 허용)
 378:	8a b1       	in	r24, 0x0a	; 10
 37a:	80 61       	ori	r24, 0x10	; 16
 37c:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0); // 송신 가능(TX PIN 허용)
 37e:	8a b1       	in	r24, 0x0a	; 10
 380:	88 60       	ori	r24, 0x08	; 8
 382:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0B |= (1<<RXCIE0); // 수신 interrupt Enable
 384:	8a b1       	in	r24, 0x0a	; 10
 386:	80 68       	ori	r24, 0x80	; 128
 388:	8a b9       	out	0x0a, r24	; 10
 38a:	08 95       	ret

0000038c <UART0_Transmit>:
}


void UART0_Transmit(char data)
{
	while (!(UCSR0A & (1<<UDRE0))); // 송신 가능 대기, UDR(송신버퍼)이 비어있는지 체크
 38c:	5d 9b       	sbis	0x0b, 5	; 11
 38e:	fe cf       	rjmp	.-4      	; 0x38c <UART0_Transmit>
	// 비어있으면 UDRE0가 1로 세팅됨.
	// while 문 거짓되면, 빠져 나가서 다음 라인으로
	UDR0 = data; // 데이터 버퍼 레지스터에 데이터 전송
 390:	8c b9       	out	0x0c, r24	; 12
 392:	08 95       	ret

00000394 <__divsf3>:
 394:	0c d0       	rcall	.+24     	; 0x3ae <__divsf3x>
 396:	e6 c0       	rjmp	.+460    	; 0x564 <__fp_round>
 398:	de d0       	rcall	.+444    	; 0x556 <__fp_pscB>
 39a:	40 f0       	brcs	.+16     	; 0x3ac <__divsf3+0x18>
 39c:	d5 d0       	rcall	.+426    	; 0x548 <__fp_pscA>
 39e:	30 f0       	brcs	.+12     	; 0x3ac <__divsf3+0x18>
 3a0:	21 f4       	brne	.+8      	; 0x3aa <__divsf3+0x16>
 3a2:	5f 3f       	cpi	r21, 0xFF	; 255
 3a4:	19 f0       	breq	.+6      	; 0x3ac <__divsf3+0x18>
 3a6:	c7 c0       	rjmp	.+398    	; 0x536 <__fp_inf>
 3a8:	51 11       	cpse	r21, r1
 3aa:	10 c1       	rjmp	.+544    	; 0x5cc <__fp_szero>
 3ac:	ca c0       	rjmp	.+404    	; 0x542 <__fp_nan>

000003ae <__divsf3x>:
 3ae:	eb d0       	rcall	.+470    	; 0x586 <__fp_split3>
 3b0:	98 f3       	brcs	.-26     	; 0x398 <__divsf3+0x4>

000003b2 <__divsf3_pse>:
 3b2:	99 23       	and	r25, r25
 3b4:	c9 f3       	breq	.-14     	; 0x3a8 <__divsf3+0x14>
 3b6:	55 23       	and	r21, r21
 3b8:	b1 f3       	breq	.-20     	; 0x3a6 <__divsf3+0x12>
 3ba:	95 1b       	sub	r25, r21
 3bc:	55 0b       	sbc	r21, r21
 3be:	bb 27       	eor	r27, r27
 3c0:	aa 27       	eor	r26, r26
 3c2:	62 17       	cp	r22, r18
 3c4:	73 07       	cpc	r23, r19
 3c6:	84 07       	cpc	r24, r20
 3c8:	38 f0       	brcs	.+14     	; 0x3d8 <__divsf3_pse+0x26>
 3ca:	9f 5f       	subi	r25, 0xFF	; 255
 3cc:	5f 4f       	sbci	r21, 0xFF	; 255
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	44 1f       	adc	r20, r20
 3d4:	aa 1f       	adc	r26, r26
 3d6:	a9 f3       	breq	.-22     	; 0x3c2 <__divsf3_pse+0x10>
 3d8:	33 d0       	rcall	.+102    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3da:	0e 2e       	mov	r0, r30
 3dc:	3a f0       	brmi	.+14     	; 0x3ec <__divsf3_pse+0x3a>
 3de:	e0 e8       	ldi	r30, 0x80	; 128
 3e0:	30 d0       	rcall	.+96     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3e2:	91 50       	subi	r25, 0x01	; 1
 3e4:	50 40       	sbci	r21, 0x00	; 0
 3e6:	e6 95       	lsr	r30
 3e8:	00 1c       	adc	r0, r0
 3ea:	ca f7       	brpl	.-14     	; 0x3de <__divsf3_pse+0x2c>
 3ec:	29 d0       	rcall	.+82     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3ee:	fe 2f       	mov	r31, r30
 3f0:	27 d0       	rcall	.+78     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	88 1f       	adc	r24, r24
 3f8:	bb 1f       	adc	r27, r27
 3fa:	26 17       	cp	r18, r22
 3fc:	37 07       	cpc	r19, r23
 3fe:	48 07       	cpc	r20, r24
 400:	ab 07       	cpc	r26, r27
 402:	b0 e8       	ldi	r27, 0x80	; 128
 404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	bb 0b       	sbc	r27, r27
 408:	80 2d       	mov	r24, r0
 40a:	bf 01       	movw	r22, r30
 40c:	ff 27       	eor	r31, r31
 40e:	93 58       	subi	r25, 0x83	; 131
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	2a f0       	brmi	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 414:	9e 3f       	cpi	r25, 0xFE	; 254
 416:	51 05       	cpc	r21, r1
 418:	68 f0       	brcs	.+26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 41a:	8d c0       	rjmp	.+282    	; 0x536 <__fp_inf>
 41c:	d7 c0       	rjmp	.+430    	; 0x5cc <__fp_szero>
 41e:	5f 3f       	cpi	r21, 0xFF	; 255
 420:	ec f3       	brlt	.-6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 422:	98 3e       	cpi	r25, 0xE8	; 232
 424:	dc f3       	brlt	.-10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 426:	86 95       	lsr	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b7 95       	ror	r27
 42e:	f7 95       	ror	r31
 430:	9f 5f       	subi	r25, 0xFF	; 255
 432:	c9 f7       	brne	.-14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 434:	88 0f       	add	r24, r24
 436:	91 1d       	adc	r25, r1
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
 43c:	97 f9       	bld	r25, 7
 43e:	08 95       	ret
 440:	e1 e0       	ldi	r30, 0x01	; 1
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	bb 1f       	adc	r27, r27
 44a:	62 17       	cp	r22, r18
 44c:	73 07       	cpc	r23, r19
 44e:	84 07       	cpc	r24, r20
 450:	ba 07       	cpc	r27, r26
 452:	20 f0       	brcs	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 454:	62 1b       	sub	r22, r18
 456:	73 0b       	sbc	r23, r19
 458:	84 0b       	sbc	r24, r20
 45a:	ba 0b       	sbc	r27, r26
 45c:	ee 1f       	adc	r30, r30
 45e:	88 f7       	brcc	.-30     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 460:	e0 95       	com	r30
 462:	08 95       	ret

00000464 <__fixunssfsi>:
 464:	98 d0       	rcall	.+304    	; 0x596 <__fp_splitA>
 466:	88 f0       	brcs	.+34     	; 0x48a <__fixunssfsi+0x26>
 468:	9f 57       	subi	r25, 0x7F	; 127
 46a:	90 f0       	brcs	.+36     	; 0x490 <__fixunssfsi+0x2c>
 46c:	b9 2f       	mov	r27, r25
 46e:	99 27       	eor	r25, r25
 470:	b7 51       	subi	r27, 0x17	; 23
 472:	a0 f0       	brcs	.+40     	; 0x49c <__fixunssfsi+0x38>
 474:	d1 f0       	breq	.+52     	; 0x4aa <__fixunssfsi+0x46>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	1a f0       	brmi	.+6      	; 0x486 <__fixunssfsi+0x22>
 480:	ba 95       	dec	r27
 482:	c9 f7       	brne	.-14     	; 0x476 <__fixunssfsi+0x12>
 484:	12 c0       	rjmp	.+36     	; 0x4aa <__fixunssfsi+0x46>
 486:	b1 30       	cpi	r27, 0x01	; 1
 488:	81 f0       	breq	.+32     	; 0x4aa <__fixunssfsi+0x46>
 48a:	9f d0       	rcall	.+318    	; 0x5ca <__fp_zero>
 48c:	b1 e0       	ldi	r27, 0x01	; 1
 48e:	08 95       	ret
 490:	9c c0       	rjmp	.+312    	; 0x5ca <__fp_zero>
 492:	67 2f       	mov	r22, r23
 494:	78 2f       	mov	r23, r24
 496:	88 27       	eor	r24, r24
 498:	b8 5f       	subi	r27, 0xF8	; 248
 49a:	39 f0       	breq	.+14     	; 0x4aa <__fixunssfsi+0x46>
 49c:	b9 3f       	cpi	r27, 0xF9	; 249
 49e:	cc f3       	brlt	.-14     	; 0x492 <__fixunssfsi+0x2e>
 4a0:	86 95       	lsr	r24
 4a2:	77 95       	ror	r23
 4a4:	67 95       	ror	r22
 4a6:	b3 95       	inc	r27
 4a8:	d9 f7       	brne	.-10     	; 0x4a0 <__fixunssfsi+0x3c>
 4aa:	3e f4       	brtc	.+14     	; 0x4ba <__fixunssfsi+0x56>
 4ac:	90 95       	com	r25
 4ae:	80 95       	com	r24
 4b0:	70 95       	com	r23
 4b2:	61 95       	neg	r22
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	8f 4f       	sbci	r24, 0xFF	; 255
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	08 95       	ret

000004bc <__floatunsisf>:
 4bc:	e8 94       	clt
 4be:	09 c0       	rjmp	.+18     	; 0x4d2 <__floatsisf+0x12>

000004c0 <__floatsisf>:
 4c0:	97 fb       	bst	r25, 7
 4c2:	3e f4       	brtc	.+14     	; 0x4d2 <__floatsisf+0x12>
 4c4:	90 95       	com	r25
 4c6:	80 95       	com	r24
 4c8:	70 95       	com	r23
 4ca:	61 95       	neg	r22
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	8f 4f       	sbci	r24, 0xFF	; 255
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	99 23       	and	r25, r25
 4d4:	a9 f0       	breq	.+42     	; 0x500 <__floatsisf+0x40>
 4d6:	f9 2f       	mov	r31, r25
 4d8:	96 e9       	ldi	r25, 0x96	; 150
 4da:	bb 27       	eor	r27, r27
 4dc:	93 95       	inc	r25
 4de:	f6 95       	lsr	r31
 4e0:	87 95       	ror	r24
 4e2:	77 95       	ror	r23
 4e4:	67 95       	ror	r22
 4e6:	b7 95       	ror	r27
 4e8:	f1 11       	cpse	r31, r1
 4ea:	f8 cf       	rjmp	.-16     	; 0x4dc <__floatsisf+0x1c>
 4ec:	fa f4       	brpl	.+62     	; 0x52c <__floatsisf+0x6c>
 4ee:	bb 0f       	add	r27, r27
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__floatsisf+0x36>
 4f2:	60 ff       	sbrs	r22, 0
 4f4:	1b c0       	rjmp	.+54     	; 0x52c <__floatsisf+0x6c>
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	16 c0       	rjmp	.+44     	; 0x52c <__floatsisf+0x6c>
 500:	88 23       	and	r24, r24
 502:	11 f0       	breq	.+4      	; 0x508 <__floatsisf+0x48>
 504:	96 e9       	ldi	r25, 0x96	; 150
 506:	11 c0       	rjmp	.+34     	; 0x52a <__floatsisf+0x6a>
 508:	77 23       	and	r23, r23
 50a:	21 f0       	breq	.+8      	; 0x514 <__floatsisf+0x54>
 50c:	9e e8       	ldi	r25, 0x8E	; 142
 50e:	87 2f       	mov	r24, r23
 510:	76 2f       	mov	r23, r22
 512:	05 c0       	rjmp	.+10     	; 0x51e <__floatsisf+0x5e>
 514:	66 23       	and	r22, r22
 516:	71 f0       	breq	.+28     	; 0x534 <__floatsisf+0x74>
 518:	96 e8       	ldi	r25, 0x86	; 134
 51a:	86 2f       	mov	r24, r22
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	2a f0       	brmi	.+10     	; 0x52c <__floatsisf+0x6c>
 522:	9a 95       	dec	r25
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	88 1f       	adc	r24, r24
 52a:	da f7       	brpl	.-10     	; 0x522 <__floatsisf+0x62>
 52c:	88 0f       	add	r24, r24
 52e:	96 95       	lsr	r25
 530:	87 95       	ror	r24
 532:	97 f9       	bld	r25, 7
 534:	08 95       	ret

00000536 <__fp_inf>:
 536:	97 f9       	bld	r25, 7
 538:	9f 67       	ori	r25, 0x7F	; 127
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	08 95       	ret

00000542 <__fp_nan>:
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	80 ec       	ldi	r24, 0xC0	; 192
 546:	08 95       	ret

00000548 <__fp_pscA>:
 548:	00 24       	eor	r0, r0
 54a:	0a 94       	dec	r0
 54c:	16 16       	cp	r1, r22
 54e:	17 06       	cpc	r1, r23
 550:	18 06       	cpc	r1, r24
 552:	09 06       	cpc	r0, r25
 554:	08 95       	ret

00000556 <__fp_pscB>:
 556:	00 24       	eor	r0, r0
 558:	0a 94       	dec	r0
 55a:	12 16       	cp	r1, r18
 55c:	13 06       	cpc	r1, r19
 55e:	14 06       	cpc	r1, r20
 560:	05 06       	cpc	r0, r21
 562:	08 95       	ret

00000564 <__fp_round>:
 564:	09 2e       	mov	r0, r25
 566:	03 94       	inc	r0
 568:	00 0c       	add	r0, r0
 56a:	11 f4       	brne	.+4      	; 0x570 <__fp_round+0xc>
 56c:	88 23       	and	r24, r24
 56e:	52 f0       	brmi	.+20     	; 0x584 <__fp_round+0x20>
 570:	bb 0f       	add	r27, r27
 572:	40 f4       	brcc	.+16     	; 0x584 <__fp_round+0x20>
 574:	bf 2b       	or	r27, r31
 576:	11 f4       	brne	.+4      	; 0x57c <__fp_round+0x18>
 578:	60 ff       	sbrs	r22, 0
 57a:	04 c0       	rjmp	.+8      	; 0x584 <__fp_round+0x20>
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <__fp_split3>:
 586:	57 fd       	sbrc	r21, 7
 588:	90 58       	subi	r25, 0x80	; 128
 58a:	44 0f       	add	r20, r20
 58c:	55 1f       	adc	r21, r21
 58e:	59 f0       	breq	.+22     	; 0x5a6 <__fp_splitA+0x10>
 590:	5f 3f       	cpi	r21, 0xFF	; 255
 592:	71 f0       	breq	.+28     	; 0x5b0 <__fp_splitA+0x1a>
 594:	47 95       	ror	r20

00000596 <__fp_splitA>:
 596:	88 0f       	add	r24, r24
 598:	97 fb       	bst	r25, 7
 59a:	99 1f       	adc	r25, r25
 59c:	61 f0       	breq	.+24     	; 0x5b6 <__fp_splitA+0x20>
 59e:	9f 3f       	cpi	r25, 0xFF	; 255
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <__fp_splitA+0x2a>
 5a2:	87 95       	ror	r24
 5a4:	08 95       	ret
 5a6:	12 16       	cp	r1, r18
 5a8:	13 06       	cpc	r1, r19
 5aa:	14 06       	cpc	r1, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	f2 cf       	rjmp	.-28     	; 0x594 <__fp_split3+0xe>
 5b0:	46 95       	lsr	r20
 5b2:	f1 df       	rcall	.-30     	; 0x596 <__fp_splitA>
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <__fp_splitA+0x30>
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	f1 cf       	rjmp	.-30     	; 0x5a2 <__fp_splitA+0xc>
 5c0:	86 95       	lsr	r24
 5c2:	71 05       	cpc	r23, r1
 5c4:	61 05       	cpc	r22, r1
 5c6:	08 94       	sec
 5c8:	08 95       	ret

000005ca <__fp_zero>:
 5ca:	e8 94       	clt

000005cc <__fp_szero>:
 5cc:	bb 27       	eor	r27, r27
 5ce:	66 27       	eor	r22, r22
 5d0:	77 27       	eor	r23, r23
 5d2:	cb 01       	movw	r24, r22
 5d4:	97 f9       	bld	r25, 7
 5d6:	08 95       	ret

000005d8 <__mulsf3>:
 5d8:	0b d0       	rcall	.+22     	; 0x5f0 <__mulsf3x>
 5da:	c4 cf       	rjmp	.-120    	; 0x564 <__fp_round>
 5dc:	b5 df       	rcall	.-150    	; 0x548 <__fp_pscA>
 5de:	28 f0       	brcs	.+10     	; 0x5ea <__mulsf3+0x12>
 5e0:	ba df       	rcall	.-140    	; 0x556 <__fp_pscB>
 5e2:	18 f0       	brcs	.+6      	; 0x5ea <__mulsf3+0x12>
 5e4:	95 23       	and	r25, r21
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__mulsf3+0x12>
 5e8:	a6 cf       	rjmp	.-180    	; 0x536 <__fp_inf>
 5ea:	ab cf       	rjmp	.-170    	; 0x542 <__fp_nan>
 5ec:	11 24       	eor	r1, r1
 5ee:	ee cf       	rjmp	.-36     	; 0x5cc <__fp_szero>

000005f0 <__mulsf3x>:
 5f0:	ca df       	rcall	.-108    	; 0x586 <__fp_split3>
 5f2:	a0 f3       	brcs	.-24     	; 0x5dc <__mulsf3+0x4>

000005f4 <__mulsf3_pse>:
 5f4:	95 9f       	mul	r25, r21
 5f6:	d1 f3       	breq	.-12     	; 0x5ec <__mulsf3+0x14>
 5f8:	95 0f       	add	r25, r21
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	55 1f       	adc	r21, r21
 5fe:	62 9f       	mul	r22, r18
 600:	f0 01       	movw	r30, r0
 602:	72 9f       	mul	r23, r18
 604:	bb 27       	eor	r27, r27
 606:	f0 0d       	add	r31, r0
 608:	b1 1d       	adc	r27, r1
 60a:	63 9f       	mul	r22, r19
 60c:	aa 27       	eor	r26, r26
 60e:	f0 0d       	add	r31, r0
 610:	b1 1d       	adc	r27, r1
 612:	aa 1f       	adc	r26, r26
 614:	64 9f       	mul	r22, r20
 616:	66 27       	eor	r22, r22
 618:	b0 0d       	add	r27, r0
 61a:	a1 1d       	adc	r26, r1
 61c:	66 1f       	adc	r22, r22
 61e:	82 9f       	mul	r24, r18
 620:	22 27       	eor	r18, r18
 622:	b0 0d       	add	r27, r0
 624:	a1 1d       	adc	r26, r1
 626:	62 1f       	adc	r22, r18
 628:	73 9f       	mul	r23, r19
 62a:	b0 0d       	add	r27, r0
 62c:	a1 1d       	adc	r26, r1
 62e:	62 1f       	adc	r22, r18
 630:	83 9f       	mul	r24, r19
 632:	a0 0d       	add	r26, r0
 634:	61 1d       	adc	r22, r1
 636:	22 1f       	adc	r18, r18
 638:	74 9f       	mul	r23, r20
 63a:	33 27       	eor	r19, r19
 63c:	a0 0d       	add	r26, r0
 63e:	61 1d       	adc	r22, r1
 640:	23 1f       	adc	r18, r19
 642:	84 9f       	mul	r24, r20
 644:	60 0d       	add	r22, r0
 646:	21 1d       	adc	r18, r1
 648:	82 2f       	mov	r24, r18
 64a:	76 2f       	mov	r23, r22
 64c:	6a 2f       	mov	r22, r26
 64e:	11 24       	eor	r1, r1
 650:	9f 57       	subi	r25, 0x7F	; 127
 652:	50 40       	sbci	r21, 0x00	; 0
 654:	8a f0       	brmi	.+34     	; 0x678 <__mulsf3_pse+0x84>
 656:	e1 f0       	breq	.+56     	; 0x690 <__mulsf3_pse+0x9c>
 658:	88 23       	and	r24, r24
 65a:	4a f0       	brmi	.+18     	; 0x66e <__mulsf3_pse+0x7a>
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	bb 1f       	adc	r27, r27
 662:	66 1f       	adc	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	91 50       	subi	r25, 0x01	; 1
 66a:	50 40       	sbci	r21, 0x00	; 0
 66c:	a9 f7       	brne	.-22     	; 0x658 <__mulsf3_pse+0x64>
 66e:	9e 3f       	cpi	r25, 0xFE	; 254
 670:	51 05       	cpc	r21, r1
 672:	70 f0       	brcs	.+28     	; 0x690 <__mulsf3_pse+0x9c>
 674:	60 cf       	rjmp	.-320    	; 0x536 <__fp_inf>
 676:	aa cf       	rjmp	.-172    	; 0x5cc <__fp_szero>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	ec f3       	brlt	.-6      	; 0x676 <__mulsf3_pse+0x82>
 67c:	98 3e       	cpi	r25, 0xE8	; 232
 67e:	dc f3       	brlt	.-10     	; 0x676 <__mulsf3_pse+0x82>
 680:	86 95       	lsr	r24
 682:	77 95       	ror	r23
 684:	67 95       	ror	r22
 686:	b7 95       	ror	r27
 688:	f7 95       	ror	r31
 68a:	e7 95       	ror	r30
 68c:	9f 5f       	subi	r25, 0xFF	; 255
 68e:	c1 f7       	brne	.-16     	; 0x680 <__mulsf3_pse+0x8c>
 690:	fe 2b       	or	r31, r30
 692:	88 0f       	add	r24, r24
 694:	91 1d       	adc	r25, r1
 696:	96 95       	lsr	r25
 698:	87 95       	ror	r24
 69a:	97 f9       	bld	r25, 7
 69c:	08 95       	ret

0000069e <sprintf>:
 69e:	0f 93       	push	r16
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	2e 97       	sbiw	r28, 0x0e	; 14
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
 6b6:	0d 89       	ldd	r16, Y+21	; 0x15
 6b8:	1e 89       	ldd	r17, Y+22	; 0x16
 6ba:	86 e0       	ldi	r24, 0x06	; 6
 6bc:	8c 83       	std	Y+4, r24	; 0x04
 6be:	1a 83       	std	Y+2, r17	; 0x02
 6c0:	09 83       	std	Y+1, r16	; 0x01
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	9f e7       	ldi	r25, 0x7F	; 127
 6c6:	9e 83       	std	Y+6, r25	; 0x06
 6c8:	8d 83       	std	Y+5, r24	; 0x05
 6ca:	ae 01       	movw	r20, r28
 6cc:	47 5e       	subi	r20, 0xE7	; 231
 6ce:	5f 4f       	sbci	r21, 0xFF	; 255
 6d0:	6f 89       	ldd	r22, Y+23	; 0x17
 6d2:	78 8d       	ldd	r23, Y+24	; 0x18
 6d4:	ce 01       	movw	r24, r28
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	10 d0       	rcall	.+32     	; 0x6fa <vfprintf>
 6da:	ef 81       	ldd	r30, Y+7	; 0x07
 6dc:	f8 85       	ldd	r31, Y+8	; 0x08
 6de:	e0 0f       	add	r30, r16
 6e0:	f1 1f       	adc	r31, r17
 6e2:	10 82       	st	Z, r1
 6e4:	2e 96       	adiw	r28, 0x0e	; 14
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	de bf       	out	0x3e, r29	; 62
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	cd bf       	out	0x3d, r28	; 61
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	08 95       	ret

000006fa <vfprintf>:
 6fa:	2f 92       	push	r2
 6fc:	3f 92       	push	r3
 6fe:	4f 92       	push	r4
 700:	5f 92       	push	r5
 702:	6f 92       	push	r6
 704:	7f 92       	push	r7
 706:	8f 92       	push	r8
 708:	9f 92       	push	r9
 70a:	af 92       	push	r10
 70c:	bf 92       	push	r11
 70e:	cf 92       	push	r12
 710:	df 92       	push	r13
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
 722:	2b 97       	sbiw	r28, 0x0b	; 11
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	f8 94       	cli
 728:	de bf       	out	0x3e, r29	; 62
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	cd bf       	out	0x3d, r28	; 61
 72e:	6c 01       	movw	r12, r24
 730:	7b 01       	movw	r14, r22
 732:	8a 01       	movw	r16, r20
 734:	fc 01       	movw	r30, r24
 736:	17 82       	std	Z+7, r1	; 0x07
 738:	16 82       	std	Z+6, r1	; 0x06
 73a:	83 81       	ldd	r24, Z+3	; 0x03
 73c:	81 ff       	sbrs	r24, 1
 73e:	bf c1       	rjmp	.+894    	; 0xabe <vfprintf+0x3c4>
 740:	ce 01       	movw	r24, r28
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	3c 01       	movw	r6, r24
 746:	f6 01       	movw	r30, r12
 748:	93 81       	ldd	r25, Z+3	; 0x03
 74a:	f7 01       	movw	r30, r14
 74c:	93 fd       	sbrc	r25, 3
 74e:	85 91       	lpm	r24, Z+
 750:	93 ff       	sbrs	r25, 3
 752:	81 91       	ld	r24, Z+
 754:	7f 01       	movw	r14, r30
 756:	88 23       	and	r24, r24
 758:	09 f4       	brne	.+2      	; 0x75c <vfprintf+0x62>
 75a:	ad c1       	rjmp	.+858    	; 0xab6 <vfprintf+0x3bc>
 75c:	85 32       	cpi	r24, 0x25	; 37
 75e:	39 f4       	brne	.+14     	; 0x76e <vfprintf+0x74>
 760:	93 fd       	sbrc	r25, 3
 762:	85 91       	lpm	r24, Z+
 764:	93 ff       	sbrs	r25, 3
 766:	81 91       	ld	r24, Z+
 768:	7f 01       	movw	r14, r30
 76a:	85 32       	cpi	r24, 0x25	; 37
 76c:	21 f4       	brne	.+8      	; 0x776 <vfprintf+0x7c>
 76e:	b6 01       	movw	r22, r12
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	d6 d1       	rcall	.+940    	; 0xb20 <fputc>
 774:	e8 cf       	rjmp	.-48     	; 0x746 <vfprintf+0x4c>
 776:	91 2c       	mov	r9, r1
 778:	21 2c       	mov	r2, r1
 77a:	31 2c       	mov	r3, r1
 77c:	ff e1       	ldi	r31, 0x1F	; 31
 77e:	f3 15       	cp	r31, r3
 780:	d8 f0       	brcs	.+54     	; 0x7b8 <vfprintf+0xbe>
 782:	8b 32       	cpi	r24, 0x2B	; 43
 784:	79 f0       	breq	.+30     	; 0x7a4 <vfprintf+0xaa>
 786:	38 f4       	brcc	.+14     	; 0x796 <vfprintf+0x9c>
 788:	80 32       	cpi	r24, 0x20	; 32
 78a:	79 f0       	breq	.+30     	; 0x7aa <vfprintf+0xb0>
 78c:	83 32       	cpi	r24, 0x23	; 35
 78e:	a1 f4       	brne	.+40     	; 0x7b8 <vfprintf+0xbe>
 790:	23 2d       	mov	r18, r3
 792:	20 61       	ori	r18, 0x10	; 16
 794:	1d c0       	rjmp	.+58     	; 0x7d0 <vfprintf+0xd6>
 796:	8d 32       	cpi	r24, 0x2D	; 45
 798:	61 f0       	breq	.+24     	; 0x7b2 <vfprintf+0xb8>
 79a:	80 33       	cpi	r24, 0x30	; 48
 79c:	69 f4       	brne	.+26     	; 0x7b8 <vfprintf+0xbe>
 79e:	23 2d       	mov	r18, r3
 7a0:	21 60       	ori	r18, 0x01	; 1
 7a2:	16 c0       	rjmp	.+44     	; 0x7d0 <vfprintf+0xd6>
 7a4:	83 2d       	mov	r24, r3
 7a6:	82 60       	ori	r24, 0x02	; 2
 7a8:	38 2e       	mov	r3, r24
 7aa:	e3 2d       	mov	r30, r3
 7ac:	e4 60       	ori	r30, 0x04	; 4
 7ae:	3e 2e       	mov	r3, r30
 7b0:	2a c0       	rjmp	.+84     	; 0x806 <vfprintf+0x10c>
 7b2:	f3 2d       	mov	r31, r3
 7b4:	f8 60       	ori	r31, 0x08	; 8
 7b6:	1d c0       	rjmp	.+58     	; 0x7f2 <vfprintf+0xf8>
 7b8:	37 fc       	sbrc	r3, 7
 7ba:	2d c0       	rjmp	.+90     	; 0x816 <vfprintf+0x11c>
 7bc:	20 ed       	ldi	r18, 0xD0	; 208
 7be:	28 0f       	add	r18, r24
 7c0:	2a 30       	cpi	r18, 0x0A	; 10
 7c2:	40 f0       	brcs	.+16     	; 0x7d4 <vfprintf+0xda>
 7c4:	8e 32       	cpi	r24, 0x2E	; 46
 7c6:	b9 f4       	brne	.+46     	; 0x7f6 <vfprintf+0xfc>
 7c8:	36 fc       	sbrc	r3, 6
 7ca:	75 c1       	rjmp	.+746    	; 0xab6 <vfprintf+0x3bc>
 7cc:	23 2d       	mov	r18, r3
 7ce:	20 64       	ori	r18, 0x40	; 64
 7d0:	32 2e       	mov	r3, r18
 7d2:	19 c0       	rjmp	.+50     	; 0x806 <vfprintf+0x10c>
 7d4:	36 fe       	sbrs	r3, 6
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <vfprintf+0xea>
 7d8:	8a e0       	ldi	r24, 0x0A	; 10
 7da:	98 9e       	mul	r9, r24
 7dc:	20 0d       	add	r18, r0
 7de:	11 24       	eor	r1, r1
 7e0:	92 2e       	mov	r9, r18
 7e2:	11 c0       	rjmp	.+34     	; 0x806 <vfprintf+0x10c>
 7e4:	ea e0       	ldi	r30, 0x0A	; 10
 7e6:	2e 9e       	mul	r2, r30
 7e8:	20 0d       	add	r18, r0
 7ea:	11 24       	eor	r1, r1
 7ec:	22 2e       	mov	r2, r18
 7ee:	f3 2d       	mov	r31, r3
 7f0:	f0 62       	ori	r31, 0x20	; 32
 7f2:	3f 2e       	mov	r3, r31
 7f4:	08 c0       	rjmp	.+16     	; 0x806 <vfprintf+0x10c>
 7f6:	8c 36       	cpi	r24, 0x6C	; 108
 7f8:	21 f4       	brne	.+8      	; 0x802 <vfprintf+0x108>
 7fa:	83 2d       	mov	r24, r3
 7fc:	80 68       	ori	r24, 0x80	; 128
 7fe:	38 2e       	mov	r3, r24
 800:	02 c0       	rjmp	.+4      	; 0x806 <vfprintf+0x10c>
 802:	88 36       	cpi	r24, 0x68	; 104
 804:	41 f4       	brne	.+16     	; 0x816 <vfprintf+0x11c>
 806:	f7 01       	movw	r30, r14
 808:	93 fd       	sbrc	r25, 3
 80a:	85 91       	lpm	r24, Z+
 80c:	93 ff       	sbrs	r25, 3
 80e:	81 91       	ld	r24, Z+
 810:	7f 01       	movw	r14, r30
 812:	81 11       	cpse	r24, r1
 814:	b3 cf       	rjmp	.-154    	; 0x77c <vfprintf+0x82>
 816:	98 2f       	mov	r25, r24
 818:	9f 7d       	andi	r25, 0xDF	; 223
 81a:	95 54       	subi	r25, 0x45	; 69
 81c:	93 30       	cpi	r25, 0x03	; 3
 81e:	28 f4       	brcc	.+10     	; 0x82a <vfprintf+0x130>
 820:	0c 5f       	subi	r16, 0xFC	; 252
 822:	1f 4f       	sbci	r17, 0xFF	; 255
 824:	9f e3       	ldi	r25, 0x3F	; 63
 826:	99 83       	std	Y+1, r25	; 0x01
 828:	0d c0       	rjmp	.+26     	; 0x844 <vfprintf+0x14a>
 82a:	83 36       	cpi	r24, 0x63	; 99
 82c:	31 f0       	breq	.+12     	; 0x83a <vfprintf+0x140>
 82e:	83 37       	cpi	r24, 0x73	; 115
 830:	71 f0       	breq	.+28     	; 0x84e <vfprintf+0x154>
 832:	83 35       	cpi	r24, 0x53	; 83
 834:	09 f0       	breq	.+2      	; 0x838 <vfprintf+0x13e>
 836:	55 c0       	rjmp	.+170    	; 0x8e2 <vfprintf+0x1e8>
 838:	20 c0       	rjmp	.+64     	; 0x87a <vfprintf+0x180>
 83a:	f8 01       	movw	r30, r16
 83c:	80 81       	ld	r24, Z
 83e:	89 83       	std	Y+1, r24	; 0x01
 840:	0e 5f       	subi	r16, 0xFE	; 254
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	88 24       	eor	r8, r8
 846:	83 94       	inc	r8
 848:	91 2c       	mov	r9, r1
 84a:	53 01       	movw	r10, r6
 84c:	12 c0       	rjmp	.+36     	; 0x872 <vfprintf+0x178>
 84e:	28 01       	movw	r4, r16
 850:	f2 e0       	ldi	r31, 0x02	; 2
 852:	4f 0e       	add	r4, r31
 854:	51 1c       	adc	r5, r1
 856:	f8 01       	movw	r30, r16
 858:	a0 80       	ld	r10, Z
 85a:	b1 80       	ldd	r11, Z+1	; 0x01
 85c:	36 fe       	sbrs	r3, 6
 85e:	03 c0       	rjmp	.+6      	; 0x866 <vfprintf+0x16c>
 860:	69 2d       	mov	r22, r9
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x170>
 866:	6f ef       	ldi	r22, 0xFF	; 255
 868:	7f ef       	ldi	r23, 0xFF	; 255
 86a:	c5 01       	movw	r24, r10
 86c:	4e d1       	rcall	.+668    	; 0xb0a <strnlen>
 86e:	4c 01       	movw	r8, r24
 870:	82 01       	movw	r16, r4
 872:	f3 2d       	mov	r31, r3
 874:	ff 77       	andi	r31, 0x7F	; 127
 876:	3f 2e       	mov	r3, r31
 878:	15 c0       	rjmp	.+42     	; 0x8a4 <vfprintf+0x1aa>
 87a:	28 01       	movw	r4, r16
 87c:	22 e0       	ldi	r18, 0x02	; 2
 87e:	42 0e       	add	r4, r18
 880:	51 1c       	adc	r5, r1
 882:	f8 01       	movw	r30, r16
 884:	a0 80       	ld	r10, Z
 886:	b1 80       	ldd	r11, Z+1	; 0x01
 888:	36 fe       	sbrs	r3, 6
 88a:	03 c0       	rjmp	.+6      	; 0x892 <vfprintf+0x198>
 88c:	69 2d       	mov	r22, r9
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <vfprintf+0x19c>
 892:	6f ef       	ldi	r22, 0xFF	; 255
 894:	7f ef       	ldi	r23, 0xFF	; 255
 896:	c5 01       	movw	r24, r10
 898:	2d d1       	rcall	.+602    	; 0xaf4 <strnlen_P>
 89a:	4c 01       	movw	r8, r24
 89c:	f3 2d       	mov	r31, r3
 89e:	f0 68       	ori	r31, 0x80	; 128
 8a0:	3f 2e       	mov	r3, r31
 8a2:	82 01       	movw	r16, r4
 8a4:	33 fc       	sbrc	r3, 3
 8a6:	19 c0       	rjmp	.+50     	; 0x8da <vfprintf+0x1e0>
 8a8:	82 2d       	mov	r24, r2
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	88 16       	cp	r8, r24
 8ae:	99 06       	cpc	r9, r25
 8b0:	a0 f4       	brcc	.+40     	; 0x8da <vfprintf+0x1e0>
 8b2:	b6 01       	movw	r22, r12
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	33 d1       	rcall	.+614    	; 0xb20 <fputc>
 8ba:	2a 94       	dec	r2
 8bc:	f5 cf       	rjmp	.-22     	; 0x8a8 <vfprintf+0x1ae>
 8be:	f5 01       	movw	r30, r10
 8c0:	37 fc       	sbrc	r3, 7
 8c2:	85 91       	lpm	r24, Z+
 8c4:	37 fe       	sbrs	r3, 7
 8c6:	81 91       	ld	r24, Z+
 8c8:	5f 01       	movw	r10, r30
 8ca:	b6 01       	movw	r22, r12
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	28 d1       	rcall	.+592    	; 0xb20 <fputc>
 8d0:	21 10       	cpse	r2, r1
 8d2:	2a 94       	dec	r2
 8d4:	21 e0       	ldi	r18, 0x01	; 1
 8d6:	82 1a       	sub	r8, r18
 8d8:	91 08       	sbc	r9, r1
 8da:	81 14       	cp	r8, r1
 8dc:	91 04       	cpc	r9, r1
 8de:	79 f7       	brne	.-34     	; 0x8be <vfprintf+0x1c4>
 8e0:	e1 c0       	rjmp	.+450    	; 0xaa4 <vfprintf+0x3aa>
 8e2:	84 36       	cpi	r24, 0x64	; 100
 8e4:	11 f0       	breq	.+4      	; 0x8ea <vfprintf+0x1f0>
 8e6:	89 36       	cpi	r24, 0x69	; 105
 8e8:	39 f5       	brne	.+78     	; 0x938 <vfprintf+0x23e>
 8ea:	f8 01       	movw	r30, r16
 8ec:	37 fe       	sbrs	r3, 7
 8ee:	07 c0       	rjmp	.+14     	; 0x8fe <vfprintf+0x204>
 8f0:	60 81       	ld	r22, Z
 8f2:	71 81       	ldd	r23, Z+1	; 0x01
 8f4:	82 81       	ldd	r24, Z+2	; 0x02
 8f6:	93 81       	ldd	r25, Z+3	; 0x03
 8f8:	0c 5f       	subi	r16, 0xFC	; 252
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <vfprintf+0x214>
 8fe:	60 81       	ld	r22, Z
 900:	71 81       	ldd	r23, Z+1	; 0x01
 902:	07 2e       	mov	r0, r23
 904:	00 0c       	add	r0, r0
 906:	88 0b       	sbc	r24, r24
 908:	99 0b       	sbc	r25, r25
 90a:	0e 5f       	subi	r16, 0xFE	; 254
 90c:	1f 4f       	sbci	r17, 0xFF	; 255
 90e:	f3 2d       	mov	r31, r3
 910:	ff 76       	andi	r31, 0x6F	; 111
 912:	3f 2e       	mov	r3, r31
 914:	97 ff       	sbrs	r25, 7
 916:	09 c0       	rjmp	.+18     	; 0x92a <vfprintf+0x230>
 918:	90 95       	com	r25
 91a:	80 95       	com	r24
 91c:	70 95       	com	r23
 91e:	61 95       	neg	r22
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	f0 68       	ori	r31, 0x80	; 128
 928:	3f 2e       	mov	r3, r31
 92a:	2a e0       	ldi	r18, 0x0A	; 10
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	a3 01       	movw	r20, r6
 930:	33 d1       	rcall	.+614    	; 0xb98 <__ultoa_invert>
 932:	88 2e       	mov	r8, r24
 934:	86 18       	sub	r8, r6
 936:	44 c0       	rjmp	.+136    	; 0x9c0 <vfprintf+0x2c6>
 938:	85 37       	cpi	r24, 0x75	; 117
 93a:	31 f4       	brne	.+12     	; 0x948 <vfprintf+0x24e>
 93c:	23 2d       	mov	r18, r3
 93e:	2f 7e       	andi	r18, 0xEF	; 239
 940:	b2 2e       	mov	r11, r18
 942:	2a e0       	ldi	r18, 0x0A	; 10
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	25 c0       	rjmp	.+74     	; 0x992 <vfprintf+0x298>
 948:	93 2d       	mov	r25, r3
 94a:	99 7f       	andi	r25, 0xF9	; 249
 94c:	b9 2e       	mov	r11, r25
 94e:	8f 36       	cpi	r24, 0x6F	; 111
 950:	c1 f0       	breq	.+48     	; 0x982 <vfprintf+0x288>
 952:	18 f4       	brcc	.+6      	; 0x95a <vfprintf+0x260>
 954:	88 35       	cpi	r24, 0x58	; 88
 956:	79 f0       	breq	.+30     	; 0x976 <vfprintf+0x27c>
 958:	ae c0       	rjmp	.+348    	; 0xab6 <vfprintf+0x3bc>
 95a:	80 37       	cpi	r24, 0x70	; 112
 95c:	19 f0       	breq	.+6      	; 0x964 <vfprintf+0x26a>
 95e:	88 37       	cpi	r24, 0x78	; 120
 960:	21 f0       	breq	.+8      	; 0x96a <vfprintf+0x270>
 962:	a9 c0       	rjmp	.+338    	; 0xab6 <vfprintf+0x3bc>
 964:	e9 2f       	mov	r30, r25
 966:	e0 61       	ori	r30, 0x10	; 16
 968:	be 2e       	mov	r11, r30
 96a:	b4 fe       	sbrs	r11, 4
 96c:	0d c0       	rjmp	.+26     	; 0x988 <vfprintf+0x28e>
 96e:	fb 2d       	mov	r31, r11
 970:	f4 60       	ori	r31, 0x04	; 4
 972:	bf 2e       	mov	r11, r31
 974:	09 c0       	rjmp	.+18     	; 0x988 <vfprintf+0x28e>
 976:	34 fe       	sbrs	r3, 4
 978:	0a c0       	rjmp	.+20     	; 0x98e <vfprintf+0x294>
 97a:	29 2f       	mov	r18, r25
 97c:	26 60       	ori	r18, 0x06	; 6
 97e:	b2 2e       	mov	r11, r18
 980:	06 c0       	rjmp	.+12     	; 0x98e <vfprintf+0x294>
 982:	28 e0       	ldi	r18, 0x08	; 8
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	05 c0       	rjmp	.+10     	; 0x992 <vfprintf+0x298>
 988:	20 e1       	ldi	r18, 0x10	; 16
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	02 c0       	rjmp	.+4      	; 0x992 <vfprintf+0x298>
 98e:	20 e1       	ldi	r18, 0x10	; 16
 990:	32 e0       	ldi	r19, 0x02	; 2
 992:	f8 01       	movw	r30, r16
 994:	b7 fe       	sbrs	r11, 7
 996:	07 c0       	rjmp	.+14     	; 0x9a6 <vfprintf+0x2ac>
 998:	60 81       	ld	r22, Z
 99a:	71 81       	ldd	r23, Z+1	; 0x01
 99c:	82 81       	ldd	r24, Z+2	; 0x02
 99e:	93 81       	ldd	r25, Z+3	; 0x03
 9a0:	0c 5f       	subi	r16, 0xFC	; 252
 9a2:	1f 4f       	sbci	r17, 0xFF	; 255
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <vfprintf+0x2b8>
 9a6:	60 81       	ld	r22, Z
 9a8:	71 81       	ldd	r23, Z+1	; 0x01
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	0e 5f       	subi	r16, 0xFE	; 254
 9b0:	1f 4f       	sbci	r17, 0xFF	; 255
 9b2:	a3 01       	movw	r20, r6
 9b4:	f1 d0       	rcall	.+482    	; 0xb98 <__ultoa_invert>
 9b6:	88 2e       	mov	r8, r24
 9b8:	86 18       	sub	r8, r6
 9ba:	fb 2d       	mov	r31, r11
 9bc:	ff 77       	andi	r31, 0x7F	; 127
 9be:	3f 2e       	mov	r3, r31
 9c0:	36 fe       	sbrs	r3, 6
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <vfprintf+0x2e4>
 9c4:	23 2d       	mov	r18, r3
 9c6:	2e 7f       	andi	r18, 0xFE	; 254
 9c8:	a2 2e       	mov	r10, r18
 9ca:	89 14       	cp	r8, r9
 9cc:	58 f4       	brcc	.+22     	; 0x9e4 <vfprintf+0x2ea>
 9ce:	34 fe       	sbrs	r3, 4
 9d0:	0b c0       	rjmp	.+22     	; 0x9e8 <vfprintf+0x2ee>
 9d2:	32 fc       	sbrc	r3, 2
 9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <vfprintf+0x2ee>
 9d6:	83 2d       	mov	r24, r3
 9d8:	8e 7e       	andi	r24, 0xEE	; 238
 9da:	a8 2e       	mov	r10, r24
 9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <vfprintf+0x2ee>
 9de:	b8 2c       	mov	r11, r8
 9e0:	a3 2c       	mov	r10, r3
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <vfprintf+0x2f0>
 9e4:	b8 2c       	mov	r11, r8
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <vfprintf+0x2f0>
 9e8:	b9 2c       	mov	r11, r9
 9ea:	a4 fe       	sbrs	r10, 4
 9ec:	0f c0       	rjmp	.+30     	; 0xa0c <vfprintf+0x312>
 9ee:	fe 01       	movw	r30, r28
 9f0:	e8 0d       	add	r30, r8
 9f2:	f1 1d       	adc	r31, r1
 9f4:	80 81       	ld	r24, Z
 9f6:	80 33       	cpi	r24, 0x30	; 48
 9f8:	21 f4       	brne	.+8      	; 0xa02 <vfprintf+0x308>
 9fa:	9a 2d       	mov	r25, r10
 9fc:	99 7e       	andi	r25, 0xE9	; 233
 9fe:	a9 2e       	mov	r10, r25
 a00:	09 c0       	rjmp	.+18     	; 0xa14 <vfprintf+0x31a>
 a02:	a2 fe       	sbrs	r10, 2
 a04:	06 c0       	rjmp	.+12     	; 0xa12 <vfprintf+0x318>
 a06:	b3 94       	inc	r11
 a08:	b3 94       	inc	r11
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <vfprintf+0x31a>
 a0c:	8a 2d       	mov	r24, r10
 a0e:	86 78       	andi	r24, 0x86	; 134
 a10:	09 f0       	breq	.+2      	; 0xa14 <vfprintf+0x31a>
 a12:	b3 94       	inc	r11
 a14:	a3 fc       	sbrc	r10, 3
 a16:	10 c0       	rjmp	.+32     	; 0xa38 <vfprintf+0x33e>
 a18:	a0 fe       	sbrs	r10, 0
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <vfprintf+0x32e>
 a1c:	b2 14       	cp	r11, r2
 a1e:	80 f4       	brcc	.+32     	; 0xa40 <vfprintf+0x346>
 a20:	28 0c       	add	r2, r8
 a22:	92 2c       	mov	r9, r2
 a24:	9b 18       	sub	r9, r11
 a26:	0d c0       	rjmp	.+26     	; 0xa42 <vfprintf+0x348>
 a28:	b2 14       	cp	r11, r2
 a2a:	58 f4       	brcc	.+22     	; 0xa42 <vfprintf+0x348>
 a2c:	b6 01       	movw	r22, r12
 a2e:	80 e2       	ldi	r24, 0x20	; 32
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	76 d0       	rcall	.+236    	; 0xb20 <fputc>
 a34:	b3 94       	inc	r11
 a36:	f8 cf       	rjmp	.-16     	; 0xa28 <vfprintf+0x32e>
 a38:	b2 14       	cp	r11, r2
 a3a:	18 f4       	brcc	.+6      	; 0xa42 <vfprintf+0x348>
 a3c:	2b 18       	sub	r2, r11
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <vfprintf+0x34a>
 a40:	98 2c       	mov	r9, r8
 a42:	21 2c       	mov	r2, r1
 a44:	a4 fe       	sbrs	r10, 4
 a46:	0f c0       	rjmp	.+30     	; 0xa66 <vfprintf+0x36c>
 a48:	b6 01       	movw	r22, r12
 a4a:	80 e3       	ldi	r24, 0x30	; 48
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	68 d0       	rcall	.+208    	; 0xb20 <fputc>
 a50:	a2 fe       	sbrs	r10, 2
 a52:	16 c0       	rjmp	.+44     	; 0xa80 <vfprintf+0x386>
 a54:	a1 fc       	sbrc	r10, 1
 a56:	03 c0       	rjmp	.+6      	; 0xa5e <vfprintf+0x364>
 a58:	88 e7       	ldi	r24, 0x78	; 120
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <vfprintf+0x368>
 a5e:	88 e5       	ldi	r24, 0x58	; 88
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	b6 01       	movw	r22, r12
 a64:	0c c0       	rjmp	.+24     	; 0xa7e <vfprintf+0x384>
 a66:	8a 2d       	mov	r24, r10
 a68:	86 78       	andi	r24, 0x86	; 134
 a6a:	51 f0       	breq	.+20     	; 0xa80 <vfprintf+0x386>
 a6c:	a1 fe       	sbrs	r10, 1
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <vfprintf+0x37a>
 a70:	8b e2       	ldi	r24, 0x2B	; 43
 a72:	01 c0       	rjmp	.+2      	; 0xa76 <vfprintf+0x37c>
 a74:	80 e2       	ldi	r24, 0x20	; 32
 a76:	a7 fc       	sbrc	r10, 7
 a78:	8d e2       	ldi	r24, 0x2D	; 45
 a7a:	b6 01       	movw	r22, r12
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	50 d0       	rcall	.+160    	; 0xb20 <fputc>
 a80:	89 14       	cp	r8, r9
 a82:	30 f4       	brcc	.+12     	; 0xa90 <vfprintf+0x396>
 a84:	b6 01       	movw	r22, r12
 a86:	80 e3       	ldi	r24, 0x30	; 48
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	4a d0       	rcall	.+148    	; 0xb20 <fputc>
 a8c:	9a 94       	dec	r9
 a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <vfprintf+0x386>
 a90:	8a 94       	dec	r8
 a92:	f3 01       	movw	r30, r6
 a94:	e8 0d       	add	r30, r8
 a96:	f1 1d       	adc	r31, r1
 a98:	80 81       	ld	r24, Z
 a9a:	b6 01       	movw	r22, r12
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	40 d0       	rcall	.+128    	; 0xb20 <fputc>
 aa0:	81 10       	cpse	r8, r1
 aa2:	f6 cf       	rjmp	.-20     	; 0xa90 <vfprintf+0x396>
 aa4:	22 20       	and	r2, r2
 aa6:	09 f4       	brne	.+2      	; 0xaaa <vfprintf+0x3b0>
 aa8:	4e ce       	rjmp	.-868    	; 0x746 <vfprintf+0x4c>
 aaa:	b6 01       	movw	r22, r12
 aac:	80 e2       	ldi	r24, 0x20	; 32
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	37 d0       	rcall	.+110    	; 0xb20 <fputc>
 ab2:	2a 94       	dec	r2
 ab4:	f7 cf       	rjmp	.-18     	; 0xaa4 <vfprintf+0x3aa>
 ab6:	f6 01       	movw	r30, r12
 ab8:	86 81       	ldd	r24, Z+6	; 0x06
 aba:	97 81       	ldd	r25, Z+7	; 0x07
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <vfprintf+0x3c8>
 abe:	8f ef       	ldi	r24, 0xFF	; 255
 ac0:	9f ef       	ldi	r25, 0xFF	; 255
 ac2:	2b 96       	adiw	r28, 0x0b	; 11
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	f8 94       	cli
 ac8:	de bf       	out	0x3e, r29	; 62
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	cd bf       	out	0x3d, r28	; 61
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	1f 91       	pop	r17
 ad4:	0f 91       	pop	r16
 ad6:	ff 90       	pop	r15
 ad8:	ef 90       	pop	r14
 ada:	df 90       	pop	r13
 adc:	cf 90       	pop	r12
 ade:	bf 90       	pop	r11
 ae0:	af 90       	pop	r10
 ae2:	9f 90       	pop	r9
 ae4:	8f 90       	pop	r8
 ae6:	7f 90       	pop	r7
 ae8:	6f 90       	pop	r6
 aea:	5f 90       	pop	r5
 aec:	4f 90       	pop	r4
 aee:	3f 90       	pop	r3
 af0:	2f 90       	pop	r2
 af2:	08 95       	ret

00000af4 <strnlen_P>:
 af4:	fc 01       	movw	r30, r24
 af6:	05 90       	lpm	r0, Z+
 af8:	61 50       	subi	r22, 0x01	; 1
 afa:	70 40       	sbci	r23, 0x00	; 0
 afc:	01 10       	cpse	r0, r1
 afe:	d8 f7       	brcc	.-10     	; 0xaf6 <strnlen_P+0x2>
 b00:	80 95       	com	r24
 b02:	90 95       	com	r25
 b04:	8e 0f       	add	r24, r30
 b06:	9f 1f       	adc	r25, r31
 b08:	08 95       	ret

00000b0a <strnlen>:
 b0a:	fc 01       	movw	r30, r24
 b0c:	61 50       	subi	r22, 0x01	; 1
 b0e:	70 40       	sbci	r23, 0x00	; 0
 b10:	01 90       	ld	r0, Z+
 b12:	01 10       	cpse	r0, r1
 b14:	d8 f7       	brcc	.-10     	; 0xb0c <strnlen+0x2>
 b16:	80 95       	com	r24
 b18:	90 95       	com	r25
 b1a:	8e 0f       	add	r24, r30
 b1c:	9f 1f       	adc	r25, r31
 b1e:	08 95       	ret

00000b20 <fputc>:
 b20:	0f 93       	push	r16
 b22:	1f 93       	push	r17
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	fb 01       	movw	r30, r22
 b2a:	23 81       	ldd	r18, Z+3	; 0x03
 b2c:	21 fd       	sbrc	r18, 1
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <fputc+0x16>
 b30:	8f ef       	ldi	r24, 0xFF	; 255
 b32:	9f ef       	ldi	r25, 0xFF	; 255
 b34:	2c c0       	rjmp	.+88     	; 0xb8e <fputc+0x6e>
 b36:	22 ff       	sbrs	r18, 2
 b38:	16 c0       	rjmp	.+44     	; 0xb66 <fputc+0x46>
 b3a:	46 81       	ldd	r20, Z+6	; 0x06
 b3c:	57 81       	ldd	r21, Z+7	; 0x07
 b3e:	24 81       	ldd	r18, Z+4	; 0x04
 b40:	35 81       	ldd	r19, Z+5	; 0x05
 b42:	42 17       	cp	r20, r18
 b44:	53 07       	cpc	r21, r19
 b46:	44 f4       	brge	.+16     	; 0xb58 <fputc+0x38>
 b48:	a0 81       	ld	r26, Z
 b4a:	b1 81       	ldd	r27, Z+1	; 0x01
 b4c:	9d 01       	movw	r18, r26
 b4e:	2f 5f       	subi	r18, 0xFF	; 255
 b50:	3f 4f       	sbci	r19, 0xFF	; 255
 b52:	31 83       	std	Z+1, r19	; 0x01
 b54:	20 83       	st	Z, r18
 b56:	8c 93       	st	X, r24
 b58:	26 81       	ldd	r18, Z+6	; 0x06
 b5a:	37 81       	ldd	r19, Z+7	; 0x07
 b5c:	2f 5f       	subi	r18, 0xFF	; 255
 b5e:	3f 4f       	sbci	r19, 0xFF	; 255
 b60:	37 83       	std	Z+7, r19	; 0x07
 b62:	26 83       	std	Z+6, r18	; 0x06
 b64:	14 c0       	rjmp	.+40     	; 0xb8e <fputc+0x6e>
 b66:	8b 01       	movw	r16, r22
 b68:	ec 01       	movw	r28, r24
 b6a:	fb 01       	movw	r30, r22
 b6c:	00 84       	ldd	r0, Z+8	; 0x08
 b6e:	f1 85       	ldd	r31, Z+9	; 0x09
 b70:	e0 2d       	mov	r30, r0
 b72:	09 95       	icall
 b74:	89 2b       	or	r24, r25
 b76:	e1 f6       	brne	.-72     	; 0xb30 <fputc+0x10>
 b78:	d8 01       	movw	r26, r16
 b7a:	16 96       	adiw	r26, 0x06	; 6
 b7c:	8d 91       	ld	r24, X+
 b7e:	9c 91       	ld	r25, X
 b80:	17 97       	sbiw	r26, 0x07	; 7
 b82:	01 96       	adiw	r24, 0x01	; 1
 b84:	17 96       	adiw	r26, 0x07	; 7
 b86:	9c 93       	st	X, r25
 b88:	8e 93       	st	-X, r24
 b8a:	16 97       	sbiw	r26, 0x06	; 6
 b8c:	ce 01       	movw	r24, r28
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	1f 91       	pop	r17
 b94:	0f 91       	pop	r16
 b96:	08 95       	ret

00000b98 <__ultoa_invert>:
 b98:	fa 01       	movw	r30, r20
 b9a:	aa 27       	eor	r26, r26
 b9c:	28 30       	cpi	r18, 0x08	; 8
 b9e:	51 f1       	breq	.+84     	; 0xbf4 <__ultoa_invert+0x5c>
 ba0:	20 31       	cpi	r18, 0x10	; 16
 ba2:	81 f1       	breq	.+96     	; 0xc04 <__ultoa_invert+0x6c>
 ba4:	e8 94       	clt
 ba6:	6f 93       	push	r22
 ba8:	6e 7f       	andi	r22, 0xFE	; 254
 baa:	6e 5f       	subi	r22, 0xFE	; 254
 bac:	7f 4f       	sbci	r23, 0xFF	; 255
 bae:	8f 4f       	sbci	r24, 0xFF	; 255
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	af 4f       	sbci	r26, 0xFF	; 255
 bb4:	b1 e0       	ldi	r27, 0x01	; 1
 bb6:	3e d0       	rcall	.+124    	; 0xc34 <__ultoa_invert+0x9c>
 bb8:	b4 e0       	ldi	r27, 0x04	; 4
 bba:	3c d0       	rcall	.+120    	; 0xc34 <__ultoa_invert+0x9c>
 bbc:	67 0f       	add	r22, r23
 bbe:	78 1f       	adc	r23, r24
 bc0:	89 1f       	adc	r24, r25
 bc2:	9a 1f       	adc	r25, r26
 bc4:	a1 1d       	adc	r26, r1
 bc6:	68 0f       	add	r22, r24
 bc8:	79 1f       	adc	r23, r25
 bca:	8a 1f       	adc	r24, r26
 bcc:	91 1d       	adc	r25, r1
 bce:	a1 1d       	adc	r26, r1
 bd0:	6a 0f       	add	r22, r26
 bd2:	71 1d       	adc	r23, r1
 bd4:	81 1d       	adc	r24, r1
 bd6:	91 1d       	adc	r25, r1
 bd8:	a1 1d       	adc	r26, r1
 bda:	20 d0       	rcall	.+64     	; 0xc1c <__ultoa_invert+0x84>
 bdc:	09 f4       	brne	.+2      	; 0xbe0 <__ultoa_invert+0x48>
 bde:	68 94       	set
 be0:	3f 91       	pop	r19
 be2:	2a e0       	ldi	r18, 0x0A	; 10
 be4:	26 9f       	mul	r18, r22
 be6:	11 24       	eor	r1, r1
 be8:	30 19       	sub	r19, r0
 bea:	30 5d       	subi	r19, 0xD0	; 208
 bec:	31 93       	st	Z+, r19
 bee:	de f6       	brtc	.-74     	; 0xba6 <__ultoa_invert+0xe>
 bf0:	cf 01       	movw	r24, r30
 bf2:	08 95       	ret
 bf4:	46 2f       	mov	r20, r22
 bf6:	47 70       	andi	r20, 0x07	; 7
 bf8:	40 5d       	subi	r20, 0xD0	; 208
 bfa:	41 93       	st	Z+, r20
 bfc:	b3 e0       	ldi	r27, 0x03	; 3
 bfe:	0f d0       	rcall	.+30     	; 0xc1e <__ultoa_invert+0x86>
 c00:	c9 f7       	brne	.-14     	; 0xbf4 <__ultoa_invert+0x5c>
 c02:	f6 cf       	rjmp	.-20     	; 0xbf0 <__ultoa_invert+0x58>
 c04:	46 2f       	mov	r20, r22
 c06:	4f 70       	andi	r20, 0x0F	; 15
 c08:	40 5d       	subi	r20, 0xD0	; 208
 c0a:	4a 33       	cpi	r20, 0x3A	; 58
 c0c:	18 f0       	brcs	.+6      	; 0xc14 <__ultoa_invert+0x7c>
 c0e:	49 5d       	subi	r20, 0xD9	; 217
 c10:	31 fd       	sbrc	r19, 1
 c12:	40 52       	subi	r20, 0x20	; 32
 c14:	41 93       	st	Z+, r20
 c16:	02 d0       	rcall	.+4      	; 0xc1c <__ultoa_invert+0x84>
 c18:	a9 f7       	brne	.-22     	; 0xc04 <__ultoa_invert+0x6c>
 c1a:	ea cf       	rjmp	.-44     	; 0xbf0 <__ultoa_invert+0x58>
 c1c:	b4 e0       	ldi	r27, 0x04	; 4
 c1e:	a6 95       	lsr	r26
 c20:	97 95       	ror	r25
 c22:	87 95       	ror	r24
 c24:	77 95       	ror	r23
 c26:	67 95       	ror	r22
 c28:	ba 95       	dec	r27
 c2a:	c9 f7       	brne	.-14     	; 0xc1e <__ultoa_invert+0x86>
 c2c:	00 97       	sbiw	r24, 0x00	; 0
 c2e:	61 05       	cpc	r22, r1
 c30:	71 05       	cpc	r23, r1
 c32:	08 95       	ret
 c34:	9b 01       	movw	r18, r22
 c36:	ac 01       	movw	r20, r24
 c38:	0a 2e       	mov	r0, r26
 c3a:	06 94       	lsr	r0
 c3c:	57 95       	ror	r21
 c3e:	47 95       	ror	r20
 c40:	37 95       	ror	r19
 c42:	27 95       	ror	r18
 c44:	ba 95       	dec	r27
 c46:	c9 f7       	brne	.-14     	; 0xc3a <__ultoa_invert+0xa2>
 c48:	62 0f       	add	r22, r18
 c4a:	73 1f       	adc	r23, r19
 c4c:	84 1f       	adc	r24, r20
 c4e:	95 1f       	adc	r25, r21
 c50:	a0 1d       	adc	r26, r0
 c52:	08 95       	ret

00000c54 <_exit>:
 c54:	f8 94       	cli

00000c56 <__stop_program>:
 c56:	ff cf       	rjmp	.-2      	; 0xc56 <__stop_program>
