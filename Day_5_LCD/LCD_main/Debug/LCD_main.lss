
LCD_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000007f8  0000086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e4d  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a2b  00000000  00000000  000017fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005af  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  000027d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f4  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000047e  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	84 d0       	rcall	.+264    	; 0x1bc <main>
  b4:	9f c3       	rjmp	.+1854   	; 0x7f4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_Data>:
}


void LCD_ReadPin()
{
	LCD_RW_PORT |= (1<<LCD_RW); // RW 핀을 high로 설정하여 읽기 모드
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	08 95       	ret

000000bc <LCD_EnablePin>:
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	9c e1       	ldi	r25, 0x1C	; 28
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_EnablePin+0x16>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_EnablePin+0x1c>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <LCD_WritePin>:
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	08 95       	ret

000000e4 <LCD_WriteCommand>:
}


void LCD_WriteCommand(uint8_t commandData)
{
  e4:	cf 93       	push	r28
  e6:	c8 2f       	mov	r28, r24
	LCD_RS_PORT &= ~(1<<LCD_RS); // RS 핀을 Low로 설정하여 명령어 모드
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	88 bb       	out	0x18, r24	; 24
	LCD_WritePin(); // 데이터 쓰기 모드로 설정
  ee:	f6 df       	rcall	.-20     	; 0xdc <LCD_WritePin>
	LCD_Data(commandData); // 명령어 데이터를 데이터 핀에 출력
  f0:	8c 2f       	mov	r24, r28
	LCD_EnablePin(); // LCD 동작 신호 전송
  f2:	e2 df       	rcall	.-60     	; 0xb8 <LCD_Data>
  f4:	e3 df       	rcall	.-58     	; 0xbc <LCD_EnablePin>
}
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <LCD_WriteData>:


void LCD_WriteData(uint8_t charData)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	LCD_RS_PORT |= (1<<LCD_RS); // RS 핀을 High로 설정하여 문자 데이터 모드
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	80 62       	ori	r24, 0x20	; 32
 102:	88 bb       	out	0x18, r24	; 24
	LCD_WritePin();
 104:	eb df       	rcall	.-42     	; 0xdc <LCD_WritePin>
	LCD_Data(charData);
 106:	8c 2f       	mov	r24, r28
	LCD_EnablePin();
 108:	d7 df       	rcall	.-82     	; 0xb8 <LCD_Data>
 10a:	d8 df       	rcall	.-80     	; 0xbc <LCD_EnablePin>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_gotoXY>:


void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col %= 16; // 열 인덱스를 0부터 15로 제한
 110:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2; // 행 인덱스를 0부터 1로 제한
 112:	81 70       	andi	r24, 0x01	; 1
	
	uint8_t address = (0x40 * row) + col; // 주소 계산
 114:	90 e4       	ldi	r25, 0x40	; 64
 116:	89 9f       	mul	r24, r25
 118:	60 0d       	add	r22, r0
 11a:	11 24       	eor	r1, r1
 11c:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address; // command 값 계산
	LCD_WriteCommand(command); // 주소 설정 command를 LCD에 전달
 11e:	80 58       	subi	r24, 0x80	; 128
 120:	e1 cf       	rjmp	.-62     	; 0xe4 <LCD_WriteCommand>
 122:	08 95       	ret

00000124 <LCD_WriteString>:
}


void LCD_WriteString(char *string)
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	8c 01       	movw	r16, r24
	for (uint8_t i = 0 ; string[i]; i++)
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]); // 문자열의 각 문자를 LCD에 출력
 130:	e4 df       	rcall	.-56     	; 0xfa <LCD_WriteData>
}


void LCD_WriteString(char *string)
{
	for (uint8_t i = 0 ; string[i]; i++)
 132:	cf 5f       	subi	r28, 0xFF	; 255
 134:	f8 01       	movw	r30, r16
 136:	ec 0f       	add	r30, r28
 138:	f1 1d       	adc	r31, r1
 13a:	80 81       	ld	r24, Z
 13c:	81 11       	cpse	r24, r1
 13e:	f8 cf       	rjmp	.-16     	; 0x130 <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]); // 문자열의 각 문자를 LCD에 출력
	}
}
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <LCD_WritestringXY>:

void LCD_WritestringXY(uint8_t row, uint8_t col, char *string)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ea 01       	movw	r28, r20
	LCD_gotoXY(row, col); // 지정된 위치로 커서 이동
 14e:	e0 df       	rcall	.-64     	; 0x110 <LCD_gotoXY>
	LCD_WriteString(string); // 문자열을 해당 위치로부터 출력
 150:	ce 01       	movw	r24, r28
 152:	e8 df       	rcall	.-48     	; 0x124 <LCD_WriteString>
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <LCD_Init>:


void LCD_Init()
{
	LCD_DATA_DDR = 0xff;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	84 bb       	out	0x14, r24	; 20
	LCD_RS_DDR |= (1<<LCD_RS);
 15e:	87 b3       	in	r24, 0x17	; 23
 160:	80 62       	ori	r24, 0x20	; 32
 162:	87 bb       	out	0x17, r24	; 23
	LCD_RW_DDR |= (1<<LCD_RW);
 164:	87 b3       	in	r24, 0x17	; 23
 166:	80 64       	ori	r24, 0x40	; 64
 168:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR |= (1<<LCD_E);
 16a:	87 b3       	in	r24, 0x17	; 23
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	89 ef       	ldi	r24, 0xF9	; 249
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <LCD_Init+0x1c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_Init+0x26>
 180:	00 00       	nop
	_delay_ms(20); // 초기화하고 15ms 이상 딜레이
	
	LCD_WriteCommand(COMMAND_8_BIT_MODE);
 182:	88 e3       	ldi	r24, 0x38	; 56
 184:	af df       	rcall	.-162    	; 0xe4 <LCD_WriteCommand>
 186:	8f e1       	ldi	r24, 0x1F	; 31
 188:	9e e4       	ldi	r25, 0x4E	; 78
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Init+0x30>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Init+0x36>
 190:	00 00       	nop
	_delay_ms(5); // 4.3ms 이상 딜레이
	LCD_WriteCommand(COMMAND_8_BIT_MODE);
 192:	88 e3       	ldi	r24, 0x38	; 56
 194:	a7 df       	rcall	.-178    	; 0xe4 <LCD_WriteCommand>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_Init+0x40>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_Init+0x46>
	_delay_ms(5); // 좀 더 여유롭게 줘도 된다.
	LCD_WriteCommand(COMMAND_8_BIT_MODE);
 1a0:	00 00       	nop
 1a2:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(COMMAND_8_BIT_MODE); // 플로우 차트 따라간 것일 뿐
 1a4:	9f df       	rcall	.-194    	; 0xe4 <LCD_WriteCommand>
 1a6:	88 e3       	ldi	r24, 0x38	; 56
	
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 1a8:	9d df       	rcall	.-198    	; 0xe4 <LCD_WriteCommand>
 1aa:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 1ac:	9b df       	rcall	.-202    	; 0xe4 <LCD_WriteCommand>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 1b0:	99 df       	rcall	.-206    	; 0xe4 <LCD_WriteCommand>
 1b2:	8c e0       	ldi	r24, 0x0C	; 12
 1b4:	97 df       	rcall	.-210    	; 0xe4 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE); // 입력 모드 설정
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	95 cf       	rjmp	.-214    	; 0xe4 <LCD_WriteCommand>
 1ba:	08 95       	ret

000001bc <main>:
 1bc:	cf 93       	push	r28
	//}
//}


int main()
{
 1be:	df 93       	push	r29
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	6e 97       	sbiw	r28, 0x1e	; 30
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
	char buff[30];
	LCD_Init();
 1d0:	c4 df       	rcall	.-120    	; 0x15a <LCD_Init>
	sprintf(buff, "Hello AVR"); // stdio.h 헤더파일 추가해줄 것
 1d2:	8a e0       	ldi	r24, 0x0A	; 10
 1d4:	e0 e0       	ldi	r30, 0x00	; 0
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	de 01       	movw	r26, r28
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	01 90       	ld	r0, Z+
 1de:	0d 92       	st	X+, r0
 1e0:	8a 95       	dec	r24
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x20>
	LCD_WritestringXY(0, 0, buff);
 1e4:	ae 01       	movw	r20, r28
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	ac df       	rcall	.-168    	; 0x148 <LCD_WritestringXY>
	int count = 0;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
	while (1)
	{
		sprintf(buff, "count : %d", count++);
 1f4:	7c 01       	movw	r14, r24
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	e2 1a       	sub	r14, r18
 1fa:	f2 0a       	sbc	r15, r18
 1fc:	9f 93       	push	r25
 1fe:	8f 93       	push	r24
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	9f 93       	push	r25
 206:	8f 93       	push	r24
 208:	8e 01       	movw	r16, r28
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	1f 93       	push	r17
 210:	0f 93       	push	r16
 212:	15 d0       	rcall	.+42     	; 0x23e <sprintf>
		LCD_WritestringXY(1, 0, buff);
 214:	a8 01       	movw	r20, r16
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	96 df       	rcall	.-212    	; 0x148 <LCD_WritestringXY>
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	96 e7       	ldi	r25, 0x76	; 118
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	81 50       	subi	r24, 0x01	; 1
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x66>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x70>
 22c:	00 00       	nop
	sprintf(buff, "Hello AVR"); // stdio.h 헤더파일 추가해줄 것
	LCD_WritestringXY(0, 0, buff);
	int count = 0;
	while (1)
	{
		sprintf(buff, "count : %d", count++);
 22e:	c7 01       	movw	r24, r14
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	db cf       	rjmp	.-74     	; 0x1f4 <main+0x38>

0000023e <sprintf>:
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	2e 97       	sbiw	r28, 0x0e	; 14
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	0d 89       	ldd	r16, Y+21	; 0x15
 258:	1e 89       	ldd	r17, Y+22	; 0x16
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	8c 83       	std	Y+4, r24	; 0x04
 25e:	1a 83       	std	Y+2, r17	; 0x02
 260:	09 83       	std	Y+1, r16	; 0x01
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	9f e7       	ldi	r25, 0x7F	; 127
 266:	9e 83       	std	Y+6, r25	; 0x06
 268:	8d 83       	std	Y+5, r24	; 0x05
 26a:	ae 01       	movw	r20, r28
 26c:	47 5e       	subi	r20, 0xE7	; 231
 26e:	5f 4f       	sbci	r21, 0xFF	; 255
 270:	6f 89       	ldd	r22, Y+23	; 0x17
 272:	78 8d       	ldd	r23, Y+24	; 0x18
 274:	ce 01       	movw	r24, r28
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	10 d0       	rcall	.+32     	; 0x29a <vfprintf>
 27a:	ef 81       	ldd	r30, Y+7	; 0x07
 27c:	f8 85       	ldd	r31, Y+8	; 0x08
 27e:	e0 0f       	add	r30, r16
 280:	f1 1f       	adc	r31, r17
 282:	10 82       	st	Z, r1
 284:	2e 96       	adiw	r28, 0x0e	; 14
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <vfprintf>:
 29a:	2f 92       	push	r2
 29c:	3f 92       	push	r3
 29e:	4f 92       	push	r4
 2a0:	5f 92       	push	r5
 2a2:	6f 92       	push	r6
 2a4:	7f 92       	push	r7
 2a6:	8f 92       	push	r8
 2a8:	9f 92       	push	r9
 2aa:	af 92       	push	r10
 2ac:	bf 92       	push	r11
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	2b 97       	sbiw	r28, 0x0b	; 11
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	6c 01       	movw	r12, r24
 2d0:	7b 01       	movw	r14, r22
 2d2:	8a 01       	movw	r16, r20
 2d4:	fc 01       	movw	r30, r24
 2d6:	17 82       	std	Z+7, r1	; 0x07
 2d8:	16 82       	std	Z+6, r1	; 0x06
 2da:	83 81       	ldd	r24, Z+3	; 0x03
 2dc:	81 ff       	sbrs	r24, 1
 2de:	bf c1       	rjmp	.+894    	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 2e0:	ce 01       	movw	r24, r28
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	3c 01       	movw	r6, r24
 2e6:	f6 01       	movw	r30, r12
 2e8:	93 81       	ldd	r25, Z+3	; 0x03
 2ea:	f7 01       	movw	r30, r14
 2ec:	93 fd       	sbrc	r25, 3
 2ee:	85 91       	lpm	r24, Z+
 2f0:	93 ff       	sbrs	r25, 3
 2f2:	81 91       	ld	r24, Z+
 2f4:	7f 01       	movw	r14, r30
 2f6:	88 23       	and	r24, r24
 2f8:	09 f4       	brne	.+2      	; 0x2fc <vfprintf+0x62>
 2fa:	ad c1       	rjmp	.+858    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 2fc:	85 32       	cpi	r24, 0x25	; 37
 2fe:	39 f4       	brne	.+14     	; 0x30e <vfprintf+0x74>
 300:	93 fd       	sbrc	r25, 3
 302:	85 91       	lpm	r24, Z+
 304:	93 ff       	sbrs	r25, 3
 306:	81 91       	ld	r24, Z+
 308:	7f 01       	movw	r14, r30
 30a:	85 32       	cpi	r24, 0x25	; 37
 30c:	21 f4       	brne	.+8      	; 0x316 <vfprintf+0x7c>
 30e:	b6 01       	movw	r22, r12
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	d6 d1       	rcall	.+940    	; 0x6c0 <fputc>
 314:	e8 cf       	rjmp	.-48     	; 0x2e6 <vfprintf+0x4c>
 316:	91 2c       	mov	r9, r1
 318:	21 2c       	mov	r2, r1
 31a:	31 2c       	mov	r3, r1
 31c:	ff e1       	ldi	r31, 0x1F	; 31
 31e:	f3 15       	cp	r31, r3
 320:	d8 f0       	brcs	.+54     	; 0x358 <vfprintf+0xbe>
 322:	8b 32       	cpi	r24, 0x2B	; 43
 324:	79 f0       	breq	.+30     	; 0x344 <vfprintf+0xaa>
 326:	38 f4       	brcc	.+14     	; 0x336 <vfprintf+0x9c>
 328:	80 32       	cpi	r24, 0x20	; 32
 32a:	79 f0       	breq	.+30     	; 0x34a <vfprintf+0xb0>
 32c:	83 32       	cpi	r24, 0x23	; 35
 32e:	a1 f4       	brne	.+40     	; 0x358 <vfprintf+0xbe>
 330:	23 2d       	mov	r18, r3
 332:	20 61       	ori	r18, 0x10	; 16
 334:	1d c0       	rjmp	.+58     	; 0x370 <vfprintf+0xd6>
 336:	8d 32       	cpi	r24, 0x2D	; 45
 338:	61 f0       	breq	.+24     	; 0x352 <vfprintf+0xb8>
 33a:	80 33       	cpi	r24, 0x30	; 48
 33c:	69 f4       	brne	.+26     	; 0x358 <vfprintf+0xbe>
 33e:	23 2d       	mov	r18, r3
 340:	21 60       	ori	r18, 0x01	; 1
 342:	16 c0       	rjmp	.+44     	; 0x370 <vfprintf+0xd6>
 344:	83 2d       	mov	r24, r3
 346:	82 60       	ori	r24, 0x02	; 2
 348:	38 2e       	mov	r3, r24
 34a:	e3 2d       	mov	r30, r3
 34c:	e4 60       	ori	r30, 0x04	; 4
 34e:	3e 2e       	mov	r3, r30
 350:	2a c0       	rjmp	.+84     	; 0x3a6 <vfprintf+0x10c>
 352:	f3 2d       	mov	r31, r3
 354:	f8 60       	ori	r31, 0x08	; 8
 356:	1d c0       	rjmp	.+58     	; 0x392 <vfprintf+0xf8>
 358:	37 fc       	sbrc	r3, 7
 35a:	2d c0       	rjmp	.+90     	; 0x3b6 <vfprintf+0x11c>
 35c:	20 ed       	ldi	r18, 0xD0	; 208
 35e:	28 0f       	add	r18, r24
 360:	2a 30       	cpi	r18, 0x0A	; 10
 362:	40 f0       	brcs	.+16     	; 0x374 <vfprintf+0xda>
 364:	8e 32       	cpi	r24, 0x2E	; 46
 366:	b9 f4       	brne	.+46     	; 0x396 <vfprintf+0xfc>
 368:	36 fc       	sbrc	r3, 6
 36a:	75 c1       	rjmp	.+746    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 36c:	23 2d       	mov	r18, r3
 36e:	20 64       	ori	r18, 0x40	; 64
 370:	32 2e       	mov	r3, r18
 372:	19 c0       	rjmp	.+50     	; 0x3a6 <vfprintf+0x10c>
 374:	36 fe       	sbrs	r3, 6
 376:	06 c0       	rjmp	.+12     	; 0x384 <vfprintf+0xea>
 378:	8a e0       	ldi	r24, 0x0A	; 10
 37a:	98 9e       	mul	r9, r24
 37c:	20 0d       	add	r18, r0
 37e:	11 24       	eor	r1, r1
 380:	92 2e       	mov	r9, r18
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <vfprintf+0x10c>
 384:	ea e0       	ldi	r30, 0x0A	; 10
 386:	2e 9e       	mul	r2, r30
 388:	20 0d       	add	r18, r0
 38a:	11 24       	eor	r1, r1
 38c:	22 2e       	mov	r2, r18
 38e:	f3 2d       	mov	r31, r3
 390:	f0 62       	ori	r31, 0x20	; 32
 392:	3f 2e       	mov	r3, r31
 394:	08 c0       	rjmp	.+16     	; 0x3a6 <vfprintf+0x10c>
 396:	8c 36       	cpi	r24, 0x6C	; 108
 398:	21 f4       	brne	.+8      	; 0x3a2 <vfprintf+0x108>
 39a:	83 2d       	mov	r24, r3
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	38 2e       	mov	r3, r24
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <vfprintf+0x10c>
 3a2:	88 36       	cpi	r24, 0x68	; 104
 3a4:	41 f4       	brne	.+16     	; 0x3b6 <vfprintf+0x11c>
 3a6:	f7 01       	movw	r30, r14
 3a8:	93 fd       	sbrc	r25, 3
 3aa:	85 91       	lpm	r24, Z+
 3ac:	93 ff       	sbrs	r25, 3
 3ae:	81 91       	ld	r24, Z+
 3b0:	7f 01       	movw	r14, r30
 3b2:	81 11       	cpse	r24, r1
 3b4:	b3 cf       	rjmp	.-154    	; 0x31c <vfprintf+0x82>
 3b6:	98 2f       	mov	r25, r24
 3b8:	9f 7d       	andi	r25, 0xDF	; 223
 3ba:	95 54       	subi	r25, 0x45	; 69
 3bc:	93 30       	cpi	r25, 0x03	; 3
 3be:	28 f4       	brcc	.+10     	; 0x3ca <vfprintf+0x130>
 3c0:	0c 5f       	subi	r16, 0xFC	; 252
 3c2:	1f 4f       	sbci	r17, 0xFF	; 255
 3c4:	9f e3       	ldi	r25, 0x3F	; 63
 3c6:	99 83       	std	Y+1, r25	; 0x01
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <vfprintf+0x14a>
 3ca:	83 36       	cpi	r24, 0x63	; 99
 3cc:	31 f0       	breq	.+12     	; 0x3da <vfprintf+0x140>
 3ce:	83 37       	cpi	r24, 0x73	; 115
 3d0:	71 f0       	breq	.+28     	; 0x3ee <vfprintf+0x154>
 3d2:	83 35       	cpi	r24, 0x53	; 83
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <vfprintf+0x13e>
 3d6:	55 c0       	rjmp	.+170    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 3d8:	20 c0       	rjmp	.+64     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3da:	f8 01       	movw	r30, r16
 3dc:	80 81       	ld	r24, Z
 3de:	89 83       	std	Y+1, r24	; 0x01
 3e0:	0e 5f       	subi	r16, 0xFE	; 254
 3e2:	1f 4f       	sbci	r17, 0xFF	; 255
 3e4:	88 24       	eor	r8, r8
 3e6:	83 94       	inc	r8
 3e8:	91 2c       	mov	r9, r1
 3ea:	53 01       	movw	r10, r6
 3ec:	12 c0       	rjmp	.+36     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ee:	28 01       	movw	r4, r16
 3f0:	f2 e0       	ldi	r31, 0x02	; 2
 3f2:	4f 0e       	add	r4, r31
 3f4:	51 1c       	adc	r5, r1
 3f6:	f8 01       	movw	r30, r16
 3f8:	a0 80       	ld	r10, Z
 3fa:	b1 80       	ldd	r11, Z+1	; 0x01
 3fc:	36 fe       	sbrs	r3, 6
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	69 2d       	mov	r22, r9
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	6f ef       	ldi	r22, 0xFF	; 255
 408:	7f ef       	ldi	r23, 0xFF	; 255
 40a:	c5 01       	movw	r24, r10
 40c:	4e d1       	rcall	.+668    	; 0x6aa <strnlen>
 40e:	4c 01       	movw	r8, r24
 410:	82 01       	movw	r16, r4
 412:	f3 2d       	mov	r31, r3
 414:	ff 77       	andi	r31, 0x7F	; 127
 416:	3f 2e       	mov	r3, r31
 418:	15 c0       	rjmp	.+42     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 41a:	28 01       	movw	r4, r16
 41c:	22 e0       	ldi	r18, 0x02	; 2
 41e:	42 0e       	add	r4, r18
 420:	51 1c       	adc	r5, r1
 422:	f8 01       	movw	r30, r16
 424:	a0 80       	ld	r10, Z
 426:	b1 80       	ldd	r11, Z+1	; 0x01
 428:	36 fe       	sbrs	r3, 6
 42a:	03 c0       	rjmp	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	69 2d       	mov	r22, r9
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	6f ef       	ldi	r22, 0xFF	; 255
 434:	7f ef       	ldi	r23, 0xFF	; 255
 436:	c5 01       	movw	r24, r10
 438:	2d d1       	rcall	.+602    	; 0x694 <strnlen_P>
 43a:	4c 01       	movw	r8, r24
 43c:	f3 2d       	mov	r31, r3
 43e:	f0 68       	ori	r31, 0x80	; 128
 440:	3f 2e       	mov	r3, r31
 442:	82 01       	movw	r16, r4
 444:	33 fc       	sbrc	r3, 3
 446:	19 c0       	rjmp	.+50     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 448:	82 2d       	mov	r24, r2
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	88 16       	cp	r8, r24
 44e:	99 06       	cpc	r9, r25
 450:	a0 f4       	brcc	.+40     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 452:	b6 01       	movw	r22, r12
 454:	80 e2       	ldi	r24, 0x20	; 32
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	33 d1       	rcall	.+614    	; 0x6c0 <fputc>
 45a:	2a 94       	dec	r2
 45c:	f5 cf       	rjmp	.-22     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 45e:	f5 01       	movw	r30, r10
 460:	37 fc       	sbrc	r3, 7
 462:	85 91       	lpm	r24, Z+
 464:	37 fe       	sbrs	r3, 7
 466:	81 91       	ld	r24, Z+
 468:	5f 01       	movw	r10, r30
 46a:	b6 01       	movw	r22, r12
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	28 d1       	rcall	.+592    	; 0x6c0 <fputc>
 470:	21 10       	cpse	r2, r1
 472:	2a 94       	dec	r2
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	82 1a       	sub	r8, r18
 478:	91 08       	sbc	r9, r1
 47a:	81 14       	cp	r8, r1
 47c:	91 04       	cpc	r9, r1
 47e:	79 f7       	brne	.-34     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 480:	e1 c0       	rjmp	.+450    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 482:	84 36       	cpi	r24, 0x64	; 100
 484:	11 f0       	breq	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 486:	89 36       	cpi	r24, 0x69	; 105
 488:	39 f5       	brne	.+78     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 48a:	f8 01       	movw	r30, r16
 48c:	37 fe       	sbrs	r3, 7
 48e:	07 c0       	rjmp	.+14     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 490:	60 81       	ld	r22, Z
 492:	71 81       	ldd	r23, Z+1	; 0x01
 494:	82 81       	ldd	r24, Z+2	; 0x02
 496:	93 81       	ldd	r25, Z+3	; 0x03
 498:	0c 5f       	subi	r16, 0xFC	; 252
 49a:	1f 4f       	sbci	r17, 0xFF	; 255
 49c:	08 c0       	rjmp	.+16     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 49e:	60 81       	ld	r22, Z
 4a0:	71 81       	ldd	r23, Z+1	; 0x01
 4a2:	07 2e       	mov	r0, r23
 4a4:	00 0c       	add	r0, r0
 4a6:	88 0b       	sbc	r24, r24
 4a8:	99 0b       	sbc	r25, r25
 4aa:	0e 5f       	subi	r16, 0xFE	; 254
 4ac:	1f 4f       	sbci	r17, 0xFF	; 255
 4ae:	f3 2d       	mov	r31, r3
 4b0:	ff 76       	andi	r31, 0x6F	; 111
 4b2:	3f 2e       	mov	r3, r31
 4b4:	97 ff       	sbrs	r25, 7
 4b6:	09 c0       	rjmp	.+18     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4b8:	90 95       	com	r25
 4ba:	80 95       	com	r24
 4bc:	70 95       	com	r23
 4be:	61 95       	neg	r22
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	8f 4f       	sbci	r24, 0xFF	; 255
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	f0 68       	ori	r31, 0x80	; 128
 4c8:	3f 2e       	mov	r3, r31
 4ca:	2a e0       	ldi	r18, 0x0A	; 10
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	a3 01       	movw	r20, r6
 4d0:	33 d1       	rcall	.+614    	; 0x738 <__ultoa_invert>
 4d2:	88 2e       	mov	r8, r24
 4d4:	86 18       	sub	r8, r6
 4d6:	44 c0       	rjmp	.+136    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4d8:	85 37       	cpi	r24, 0x75	; 117
 4da:	31 f4       	brne	.+12     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4dc:	23 2d       	mov	r18, r3
 4de:	2f 7e       	andi	r18, 0xEF	; 239
 4e0:	b2 2e       	mov	r11, r18
 4e2:	2a e0       	ldi	r18, 0x0A	; 10
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	25 c0       	rjmp	.+74     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 4e8:	93 2d       	mov	r25, r3
 4ea:	99 7f       	andi	r25, 0xF9	; 249
 4ec:	b9 2e       	mov	r11, r25
 4ee:	8f 36       	cpi	r24, 0x6F	; 111
 4f0:	c1 f0       	breq	.+48     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 4f2:	18 f4       	brcc	.+6      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f4:	88 35       	cpi	r24, 0x58	; 88
 4f6:	79 f0       	breq	.+30     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 4f8:	ae c0       	rjmp	.+348    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 4fa:	80 37       	cpi	r24, 0x70	; 112
 4fc:	19 f0       	breq	.+6      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4fe:	88 37       	cpi	r24, 0x78	; 120
 500:	21 f0       	breq	.+8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 502:	a9 c0       	rjmp	.+338    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 504:	e9 2f       	mov	r30, r25
 506:	e0 61       	ori	r30, 0x10	; 16
 508:	be 2e       	mov	r11, r30
 50a:	b4 fe       	sbrs	r11, 4
 50c:	0d c0       	rjmp	.+26     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 50e:	fb 2d       	mov	r31, r11
 510:	f4 60       	ori	r31, 0x04	; 4
 512:	bf 2e       	mov	r11, r31
 514:	09 c0       	rjmp	.+18     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 516:	34 fe       	sbrs	r3, 4
 518:	0a c0       	rjmp	.+20     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 51a:	29 2f       	mov	r18, r25
 51c:	26 60       	ori	r18, 0x06	; 6
 51e:	b2 2e       	mov	r11, r18
 520:	06 c0       	rjmp	.+12     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 522:	28 e0       	ldi	r18, 0x08	; 8
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	05 c0       	rjmp	.+10     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 528:	20 e1       	ldi	r18, 0x10	; 16
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52e:	20 e1       	ldi	r18, 0x10	; 16
 530:	32 e0       	ldi	r19, 0x02	; 2
 532:	f8 01       	movw	r30, r16
 534:	b7 fe       	sbrs	r11, 7
 536:	07 c0       	rjmp	.+14     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 538:	60 81       	ld	r22, Z
 53a:	71 81       	ldd	r23, Z+1	; 0x01
 53c:	82 81       	ldd	r24, Z+2	; 0x02
 53e:	93 81       	ldd	r25, Z+3	; 0x03
 540:	0c 5f       	subi	r16, 0xFC	; 252
 542:	1f 4f       	sbci	r17, 0xFF	; 255
 544:	06 c0       	rjmp	.+12     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 546:	60 81       	ld	r22, Z
 548:	71 81       	ldd	r23, Z+1	; 0x01
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 5f       	subi	r16, 0xFE	; 254
 550:	1f 4f       	sbci	r17, 0xFF	; 255
 552:	a3 01       	movw	r20, r6
 554:	f1 d0       	rcall	.+482    	; 0x738 <__ultoa_invert>
 556:	88 2e       	mov	r8, r24
 558:	86 18       	sub	r8, r6
 55a:	fb 2d       	mov	r31, r11
 55c:	ff 77       	andi	r31, 0x7F	; 127
 55e:	3f 2e       	mov	r3, r31
 560:	36 fe       	sbrs	r3, 6
 562:	0d c0       	rjmp	.+26     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 564:	23 2d       	mov	r18, r3
 566:	2e 7f       	andi	r18, 0xFE	; 254
 568:	a2 2e       	mov	r10, r18
 56a:	89 14       	cp	r8, r9
 56c:	58 f4       	brcc	.+22     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 56e:	34 fe       	sbrs	r3, 4
 570:	0b c0       	rjmp	.+22     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 572:	32 fc       	sbrc	r3, 2
 574:	09 c0       	rjmp	.+18     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 576:	83 2d       	mov	r24, r3
 578:	8e 7e       	andi	r24, 0xEE	; 238
 57a:	a8 2e       	mov	r10, r24
 57c:	05 c0       	rjmp	.+10     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 57e:	b8 2c       	mov	r11, r8
 580:	a3 2c       	mov	r10, r3
 582:	03 c0       	rjmp	.+6      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 584:	b8 2c       	mov	r11, r8
 586:	01 c0       	rjmp	.+2      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 588:	b9 2c       	mov	r11, r9
 58a:	a4 fe       	sbrs	r10, 4
 58c:	0f c0       	rjmp	.+30     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 58e:	fe 01       	movw	r30, r28
 590:	e8 0d       	add	r30, r8
 592:	f1 1d       	adc	r31, r1
 594:	80 81       	ld	r24, Z
 596:	80 33       	cpi	r24, 0x30	; 48
 598:	21 f4       	brne	.+8      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 59a:	9a 2d       	mov	r25, r10
 59c:	99 7e       	andi	r25, 0xE9	; 233
 59e:	a9 2e       	mov	r10, r25
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5a2:	a2 fe       	sbrs	r10, 2
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5a6:	b3 94       	inc	r11
 5a8:	b3 94       	inc	r11
 5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5ac:	8a 2d       	mov	r24, r10
 5ae:	86 78       	andi	r24, 0x86	; 134
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5b2:	b3 94       	inc	r11
 5b4:	a3 fc       	sbrc	r10, 3
 5b6:	10 c0       	rjmp	.+32     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5b8:	a0 fe       	sbrs	r10, 0
 5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5bc:	b2 14       	cp	r11, r2
 5be:	80 f4       	brcc	.+32     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5c0:	28 0c       	add	r2, r8
 5c2:	92 2c       	mov	r9, r2
 5c4:	9b 18       	sub	r9, r11
 5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5c8:	b2 14       	cp	r11, r2
 5ca:	58 f4       	brcc	.+22     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5cc:	b6 01       	movw	r22, r12
 5ce:	80 e2       	ldi	r24, 0x20	; 32
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	76 d0       	rcall	.+236    	; 0x6c0 <fputc>
 5d4:	b3 94       	inc	r11
 5d6:	f8 cf       	rjmp	.-16     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5d8:	b2 14       	cp	r11, r2
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5dc:	2b 18       	sub	r2, r11
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5e0:	98 2c       	mov	r9, r8
 5e2:	21 2c       	mov	r2, r1
 5e4:	a4 fe       	sbrs	r10, 4
 5e6:	0f c0       	rjmp	.+30     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5e8:	b6 01       	movw	r22, r12
 5ea:	80 e3       	ldi	r24, 0x30	; 48
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	68 d0       	rcall	.+208    	; 0x6c0 <fputc>
 5f0:	a2 fe       	sbrs	r10, 2
 5f2:	16 c0       	rjmp	.+44     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 5f4:	a1 fc       	sbrc	r10, 1
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5f8:	88 e7       	ldi	r24, 0x78	; 120
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5fe:	88 e5       	ldi	r24, 0x58	; 88
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	b6 01       	movw	r22, r12
 604:	0c c0       	rjmp	.+24     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 606:	8a 2d       	mov	r24, r10
 608:	86 78       	andi	r24, 0x86	; 134
 60a:	51 f0       	breq	.+20     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 60c:	a1 fe       	sbrs	r10, 1
 60e:	02 c0       	rjmp	.+4      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 610:	8b e2       	ldi	r24, 0x2B	; 43
 612:	01 c0       	rjmp	.+2      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 614:	80 e2       	ldi	r24, 0x20	; 32
 616:	a7 fc       	sbrc	r10, 7
 618:	8d e2       	ldi	r24, 0x2D	; 45
 61a:	b6 01       	movw	r22, r12
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	50 d0       	rcall	.+160    	; 0x6c0 <fputc>
 620:	89 14       	cp	r8, r9
 622:	30 f4       	brcc	.+12     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 624:	b6 01       	movw	r22, r12
 626:	80 e3       	ldi	r24, 0x30	; 48
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	4a d0       	rcall	.+148    	; 0x6c0 <fputc>
 62c:	9a 94       	dec	r9
 62e:	f8 cf       	rjmp	.-16     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 630:	8a 94       	dec	r8
 632:	f3 01       	movw	r30, r6
 634:	e8 0d       	add	r30, r8
 636:	f1 1d       	adc	r31, r1
 638:	80 81       	ld	r24, Z
 63a:	b6 01       	movw	r22, r12
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	40 d0       	rcall	.+128    	; 0x6c0 <fputc>
 640:	81 10       	cpse	r8, r1
 642:	f6 cf       	rjmp	.-20     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 644:	22 20       	and	r2, r2
 646:	09 f4       	brne	.+2      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 648:	4e ce       	rjmp	.-868    	; 0x2e6 <vfprintf+0x4c>
 64a:	b6 01       	movw	r22, r12
 64c:	80 e2       	ldi	r24, 0x20	; 32
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	37 d0       	rcall	.+110    	; 0x6c0 <fputc>
 652:	2a 94       	dec	r2
 654:	f7 cf       	rjmp	.-18     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 656:	f6 01       	movw	r30, r12
 658:	86 81       	ldd	r24, Z+6	; 0x06
 65a:	97 81       	ldd	r25, Z+7	; 0x07
 65c:	02 c0       	rjmp	.+4      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	9f ef       	ldi	r25, 0xFF	; 255
 662:	2b 96       	adiw	r28, 0x0b	; 11
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	bf 90       	pop	r11
 680:	af 90       	pop	r10
 682:	9f 90       	pop	r9
 684:	8f 90       	pop	r8
 686:	7f 90       	pop	r7
 688:	6f 90       	pop	r6
 68a:	5f 90       	pop	r5
 68c:	4f 90       	pop	r4
 68e:	3f 90       	pop	r3
 690:	2f 90       	pop	r2
 692:	08 95       	ret

00000694 <strnlen_P>:
 694:	fc 01       	movw	r30, r24
 696:	05 90       	lpm	r0, Z+
 698:	61 50       	subi	r22, 0x01	; 1
 69a:	70 40       	sbci	r23, 0x00	; 0
 69c:	01 10       	cpse	r0, r1
 69e:	d8 f7       	brcc	.-10     	; 0x696 <strnlen_P+0x2>
 6a0:	80 95       	com	r24
 6a2:	90 95       	com	r25
 6a4:	8e 0f       	add	r24, r30
 6a6:	9f 1f       	adc	r25, r31
 6a8:	08 95       	ret

000006aa <strnlen>:
 6aa:	fc 01       	movw	r30, r24
 6ac:	61 50       	subi	r22, 0x01	; 1
 6ae:	70 40       	sbci	r23, 0x00	; 0
 6b0:	01 90       	ld	r0, Z+
 6b2:	01 10       	cpse	r0, r1
 6b4:	d8 f7       	brcc	.-10     	; 0x6ac <strnlen+0x2>
 6b6:	80 95       	com	r24
 6b8:	90 95       	com	r25
 6ba:	8e 0f       	add	r24, r30
 6bc:	9f 1f       	adc	r25, r31
 6be:	08 95       	ret

000006c0 <fputc>:
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	fb 01       	movw	r30, r22
 6ca:	23 81       	ldd	r18, Z+3	; 0x03
 6cc:	21 fd       	sbrc	r18, 1
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <fputc+0x16>
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	9f ef       	ldi	r25, 0xFF	; 255
 6d4:	2c c0       	rjmp	.+88     	; 0x72e <fputc+0x6e>
 6d6:	22 ff       	sbrs	r18, 2
 6d8:	16 c0       	rjmp	.+44     	; 0x706 <fputc+0x46>
 6da:	46 81       	ldd	r20, Z+6	; 0x06
 6dc:	57 81       	ldd	r21, Z+7	; 0x07
 6de:	24 81       	ldd	r18, Z+4	; 0x04
 6e0:	35 81       	ldd	r19, Z+5	; 0x05
 6e2:	42 17       	cp	r20, r18
 6e4:	53 07       	cpc	r21, r19
 6e6:	44 f4       	brge	.+16     	; 0x6f8 <fputc+0x38>
 6e8:	a0 81       	ld	r26, Z
 6ea:	b1 81       	ldd	r27, Z+1	; 0x01
 6ec:	9d 01       	movw	r18, r26
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	31 83       	std	Z+1, r19	; 0x01
 6f4:	20 83       	st	Z, r18
 6f6:	8c 93       	st	X, r24
 6f8:	26 81       	ldd	r18, Z+6	; 0x06
 6fa:	37 81       	ldd	r19, Z+7	; 0x07
 6fc:	2f 5f       	subi	r18, 0xFF	; 255
 6fe:	3f 4f       	sbci	r19, 0xFF	; 255
 700:	37 83       	std	Z+7, r19	; 0x07
 702:	26 83       	std	Z+6, r18	; 0x06
 704:	14 c0       	rjmp	.+40     	; 0x72e <fputc+0x6e>
 706:	8b 01       	movw	r16, r22
 708:	ec 01       	movw	r28, r24
 70a:	fb 01       	movw	r30, r22
 70c:	00 84       	ldd	r0, Z+8	; 0x08
 70e:	f1 85       	ldd	r31, Z+9	; 0x09
 710:	e0 2d       	mov	r30, r0
 712:	09 95       	icall
 714:	89 2b       	or	r24, r25
 716:	e1 f6       	brne	.-72     	; 0x6d0 <fputc+0x10>
 718:	d8 01       	movw	r26, r16
 71a:	16 96       	adiw	r26, 0x06	; 6
 71c:	8d 91       	ld	r24, X+
 71e:	9c 91       	ld	r25, X
 720:	17 97       	sbiw	r26, 0x07	; 7
 722:	01 96       	adiw	r24, 0x01	; 1
 724:	17 96       	adiw	r26, 0x07	; 7
 726:	9c 93       	st	X, r25
 728:	8e 93       	st	-X, r24
 72a:	16 97       	sbiw	r26, 0x06	; 6
 72c:	ce 01       	movw	r24, r28
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	0f 91       	pop	r16
 736:	08 95       	ret

00000738 <__ultoa_invert>:
 738:	fa 01       	movw	r30, r20
 73a:	aa 27       	eor	r26, r26
 73c:	28 30       	cpi	r18, 0x08	; 8
 73e:	51 f1       	breq	.+84     	; 0x794 <__ultoa_invert+0x5c>
 740:	20 31       	cpi	r18, 0x10	; 16
 742:	81 f1       	breq	.+96     	; 0x7a4 <__ultoa_invert+0x6c>
 744:	e8 94       	clt
 746:	6f 93       	push	r22
 748:	6e 7f       	andi	r22, 0xFE	; 254
 74a:	6e 5f       	subi	r22, 0xFE	; 254
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	af 4f       	sbci	r26, 0xFF	; 255
 754:	b1 e0       	ldi	r27, 0x01	; 1
 756:	3e d0       	rcall	.+124    	; 0x7d4 <__ultoa_invert+0x9c>
 758:	b4 e0       	ldi	r27, 0x04	; 4
 75a:	3c d0       	rcall	.+120    	; 0x7d4 <__ultoa_invert+0x9c>
 75c:	67 0f       	add	r22, r23
 75e:	78 1f       	adc	r23, r24
 760:	89 1f       	adc	r24, r25
 762:	9a 1f       	adc	r25, r26
 764:	a1 1d       	adc	r26, r1
 766:	68 0f       	add	r22, r24
 768:	79 1f       	adc	r23, r25
 76a:	8a 1f       	adc	r24, r26
 76c:	91 1d       	adc	r25, r1
 76e:	a1 1d       	adc	r26, r1
 770:	6a 0f       	add	r22, r26
 772:	71 1d       	adc	r23, r1
 774:	81 1d       	adc	r24, r1
 776:	91 1d       	adc	r25, r1
 778:	a1 1d       	adc	r26, r1
 77a:	20 d0       	rcall	.+64     	; 0x7bc <__ultoa_invert+0x84>
 77c:	09 f4       	brne	.+2      	; 0x780 <__ultoa_invert+0x48>
 77e:	68 94       	set
 780:	3f 91       	pop	r19
 782:	2a e0       	ldi	r18, 0x0A	; 10
 784:	26 9f       	mul	r18, r22
 786:	11 24       	eor	r1, r1
 788:	30 19       	sub	r19, r0
 78a:	30 5d       	subi	r19, 0xD0	; 208
 78c:	31 93       	st	Z+, r19
 78e:	de f6       	brtc	.-74     	; 0x746 <__ultoa_invert+0xe>
 790:	cf 01       	movw	r24, r30
 792:	08 95       	ret
 794:	46 2f       	mov	r20, r22
 796:	47 70       	andi	r20, 0x07	; 7
 798:	40 5d       	subi	r20, 0xD0	; 208
 79a:	41 93       	st	Z+, r20
 79c:	b3 e0       	ldi	r27, 0x03	; 3
 79e:	0f d0       	rcall	.+30     	; 0x7be <__ultoa_invert+0x86>
 7a0:	c9 f7       	brne	.-14     	; 0x794 <__ultoa_invert+0x5c>
 7a2:	f6 cf       	rjmp	.-20     	; 0x790 <__ultoa_invert+0x58>
 7a4:	46 2f       	mov	r20, r22
 7a6:	4f 70       	andi	r20, 0x0F	; 15
 7a8:	40 5d       	subi	r20, 0xD0	; 208
 7aa:	4a 33       	cpi	r20, 0x3A	; 58
 7ac:	18 f0       	brcs	.+6      	; 0x7b4 <__ultoa_invert+0x7c>
 7ae:	49 5d       	subi	r20, 0xD9	; 217
 7b0:	31 fd       	sbrc	r19, 1
 7b2:	40 52       	subi	r20, 0x20	; 32
 7b4:	41 93       	st	Z+, r20
 7b6:	02 d0       	rcall	.+4      	; 0x7bc <__ultoa_invert+0x84>
 7b8:	a9 f7       	brne	.-22     	; 0x7a4 <__ultoa_invert+0x6c>
 7ba:	ea cf       	rjmp	.-44     	; 0x790 <__ultoa_invert+0x58>
 7bc:	b4 e0       	ldi	r27, 0x04	; 4
 7be:	a6 95       	lsr	r26
 7c0:	97 95       	ror	r25
 7c2:	87 95       	ror	r24
 7c4:	77 95       	ror	r23
 7c6:	67 95       	ror	r22
 7c8:	ba 95       	dec	r27
 7ca:	c9 f7       	brne	.-14     	; 0x7be <__ultoa_invert+0x86>
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	61 05       	cpc	r22, r1
 7d0:	71 05       	cpc	r23, r1
 7d2:	08 95       	ret
 7d4:	9b 01       	movw	r18, r22
 7d6:	ac 01       	movw	r20, r24
 7d8:	0a 2e       	mov	r0, r26
 7da:	06 94       	lsr	r0
 7dc:	57 95       	ror	r21
 7de:	47 95       	ror	r20
 7e0:	37 95       	ror	r19
 7e2:	27 95       	ror	r18
 7e4:	ba 95       	dec	r27
 7e6:	c9 f7       	brne	.-14     	; 0x7da <__ultoa_invert+0xa2>
 7e8:	62 0f       	add	r22, r18
 7ea:	73 1f       	adc	r23, r19
 7ec:	84 1f       	adc	r24, r20
 7ee:	95 1f       	adc	r25, r21
 7f0:	a0 1d       	adc	r26, r0
 7f2:	08 95       	ret

000007f4 <_exit>:
 7f4:	f8 94       	cli

000007f6 <__stop_program>:
 7f6:	ff cf       	rjmp	.-2      	; 0x7f6 <__stop_program>
