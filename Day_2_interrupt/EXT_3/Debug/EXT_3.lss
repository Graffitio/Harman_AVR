
EXT_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000054e  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010a  0080010a  000005ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4b  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085b  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b3  00000000  00000000  0000194a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000492  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ea  00000000  00000000  0000237a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	db c0       	rjmp	.+438    	; 0x1cc <__vector_5>
  16:	00 00       	nop
  18:	f2 c0       	rjmp	.+484    	; 0x1fe <__vector_6>
  1a:	00 00       	nop
  1c:	07 c1       	rjmp	.+526    	; 0x22c <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a5 d1       	rcall	.+842    	; 0x40e <main>
  c4:	42 c2       	rjmp	.+1156   	; 0x54a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
uint8_t up_down;



ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
	time_tick++;
  e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <time_tick>
  e8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <time_tick+0x1>
  ec:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <time_tick+0x2>
  f0:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <time_tick+0x3>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	a1 1d       	adc	r26, r1
  f8:	b1 1d       	adc	r27, r1
  fa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <time_tick>
  fe:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <time_tick+0x1>
 102:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <time_tick+0x2>
 106:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <time_tick+0x3>
	if(up_down%2)
 10a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <up_down>
 10e:	80 ff       	sbrs	r24, 0
 110:	28 c0       	rjmp	.+80     	; 0x162 <__vector_16+0x9a>
	{
		if(count > 0)
 112:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count>
 116:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <count+0x1>
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	d9 f0       	breq	.+54     	; 0x154 <__vector_16+0x8c>
		{
			if(time_tick == 250)
 11e:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <time_tick>
 122:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <time_tick+0x1>
 126:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <time_tick+0x2>
 12a:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <time_tick+0x3>
 12e:	4a 3f       	cpi	r20, 0xFA	; 250
 130:	51 05       	cpc	r21, r1
 132:	61 05       	cpc	r22, r1
 134:	71 05       	cpc	r23, r1
 136:	e1 f5       	brne	.+120    	; 0x1b0 <__vector_16+0xe8>
			{
				count--;
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <count+0x1>
 13e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <count>
				time_tick = 0;
 142:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <time_tick>
 146:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <time_tick+0x1>
 14a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <time_tick+0x2>
 14e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <time_tick+0x3>
 152:	2e c0       	rjmp	.+92     	; 0x1b0 <__vector_16+0xe8>
			}
		}
		else count = 9999;
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	97 e2       	ldi	r25, 0x27	; 39
 158:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <count+0x1>
 15c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <count>
 160:	27 c0       	rjmp	.+78     	; 0x1b0 <__vector_16+0xe8>
	}
	else
	{
		if (count<9999)
 162:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count>
 166:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <count+0x1>
 16a:	8f 30       	cpi	r24, 0x0F	; 15
 16c:	27 e2       	ldi	r18, 0x27	; 39
 16e:	92 07       	cpc	r25, r18
 170:	d8 f4       	brcc	.+54     	; 0x1a8 <__vector_16+0xe0>
		{
			if (time_tick == 250)  // 2ms마다 ISR 실행되므로 100ms마다 count++
 172:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <time_tick>
 176:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <time_tick+0x1>
 17a:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <time_tick+0x2>
 17e:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <time_tick+0x3>
 182:	4a 3f       	cpi	r20, 0xFA	; 250
 184:	51 05       	cpc	r21, r1
 186:	61 05       	cpc	r22, r1
 188:	71 05       	cpc	r23, r1
 18a:	91 f4       	brne	.+36     	; 0x1b0 <__vector_16+0xe8>
			{
				count++;
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <count+0x1>
 192:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <count>
				time_tick = 0;
 196:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <time_tick>
 19a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <time_tick+0x1>
 19e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <time_tick+0x2>
 1a2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <time_tick+0x3>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__vector_16+0xe8>
			}
		}
		else count = 0;
 1a8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count+0x1>
 1ac:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count>
	}
}
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__vector_5>:

ISR(INT4_vect) // start/stop
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
	if (start_stop%2)
 1d8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <start_stop>
 1dc:	80 ff       	sbrs	r24, 0
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <__vector_5+0x1a>
		TIMSK = (1<<TOIE0);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	87 bf       	out	0x37, r24	; 55
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__vector_5+0x1c>
	else TIMSK = (0<<TOIE0);
 1e6:	17 be       	out	0x37, r1	; 55
	start_stop++;
 1e8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <start_stop>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <start_stop>
}
 1f2:	8f 91       	pop	r24
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__vector_6>:

ISR(INT5_vect) // reset
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
	start_stop = 0;
 208:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <start_stop>
	count = 0;
 20c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count+0x1>
 210:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count>
	count_ovfl = 0;
 214:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count_ovfl+0x1>
 218:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_ovfl>
	LED_Data = 0;
 21c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <LED_Data>
	PORTD = LED_Data;
 220:	12 ba       	out	0x12, r1	; 18
}
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_7>:

ISR(INT6_vect)
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	8f 93       	push	r24
	up_down++;
 238:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <up_down>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <up_down>
	TIMSK = (1<<TOIE0);		
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	87 bf       	out	0x37, r24	; 55
}
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <FND_Display>:
	}
}


void FND_Display(uint16_t data)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	2a 97       	sbiw	r28, 0x0a	; 10
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	ac 01       	movw	r20, r24
	static uint8_t position = 0;
	uint8_t fnd_data[] = {
 268:	8a e0       	ldi	r24, 0x0A	; 10
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	de 01       	movw	r26, r28
 270:	11 96       	adiw	r26, 0x01	; 1
 272:	01 90       	ld	r0, Z+
 274:	0d 92       	st	X+, r0
 276:	8a 95       	dec	r24
 278:	e1 f7       	brne	.-8      	; 0x272 <FND_Display+0x20>
		0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67
	};
		
	switch(position)
 27a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	49 f1       	breq	.+82     	; 0x2d4 <FND_Display+0x82>
 282:	38 f0       	brcs	.+14     	; 0x292 <FND_Display+0x40>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	09 f4       	brne	.+2      	; 0x28a <FND_Display+0x38>
 288:	59 c0       	rjmp	.+178    	; 0x33c <FND_Display+0xea>
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	09 f4       	brne	.+2      	; 0x290 <FND_Display+0x3e>
 28e:	88 c0       	rjmp	.+272    	; 0x3a0 <FND_Display+0x14e>
 290:	af c0       	rjmp	.+350    	; 0x3f0 <FND_Display+0x19e>
	{
		case 0 : // 첫 번째 자리 -> 0번 pin Low, 나머지는 High  / 출력을 받아서 입력으로 넣어주면 회로 완성
		FND_SELECT_PORT &= ~(1<<PINF0);
 292:	e2 e6       	ldi	r30, 0x62	; 98
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	8e 7f       	andi	r24, 0xFE	; 254
 29a:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<PINF1) | (1<<PINF2) | (1<<PINF3);
 29c:	80 81       	ld	r24, Z
 29e:	8e 60       	ori	r24, 0x0E	; 14
 2a0:	80 83       	st	Z, r24
		FND_DATA_PORT = fnd_data[data/1000];
 2a2:	9a 01       	movw	r18, r20
 2a4:	36 95       	lsr	r19
 2a6:	27 95       	ror	r18
 2a8:	36 95       	lsr	r19
 2aa:	27 95       	ror	r18
 2ac:	36 95       	lsr	r19
 2ae:	27 95       	ror	r18
 2b0:	a5 ec       	ldi	r26, 0xC5	; 197
 2b2:	b0 e2       	ldi	r27, 0x20	; 32
 2b4:	3b d1       	rcall	.+630    	; 0x52c <__umulhisi3>
 2b6:	92 95       	swap	r25
 2b8:	82 95       	swap	r24
 2ba:	8f 70       	andi	r24, 0x0F	; 15
 2bc:	89 27       	eor	r24, r25
 2be:	9f 70       	andi	r25, 0x0F	; 15
 2c0:	89 27       	eor	r24, r25
 2c2:	e1 e0       	ldi	r30, 0x01	; 1
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ec 0f       	add	r30, r28
 2c8:	fd 1f       	adc	r31, r29
 2ca:	e8 0f       	add	r30, r24
 2cc:	f9 1f       	adc	r31, r25
 2ce:	80 81       	ld	r24, Z
 2d0:	8b bb       	out	0x1b, r24	; 27
		break;
 2d2:	8e c0       	rjmp	.+284    	; 0x3f0 <FND_Display+0x19e>
		
		case 1 :
		FND_SELECT_PORT &= ~(1<<PINF1);
 2d4:	e2 e6       	ldi	r30, 0x62	; 98
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	8d 7f       	andi	r24, 0xFD	; 253
 2dc:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<PINF0) | (1<<PINF2) | (1<<PINF3);
 2de:	80 81       	ld	r24, Z
 2e0:	8d 60       	ori	r24, 0x0D	; 13
 2e2:	80 83       	st	Z, r24
		FND_DATA_PORT = fnd_data[data/100%10];
 2e4:	9a 01       	movw	r18, r20
 2e6:	36 95       	lsr	r19
 2e8:	27 95       	ror	r18
 2ea:	36 95       	lsr	r19
 2ec:	27 95       	ror	r18
 2ee:	ab e7       	ldi	r26, 0x7B	; 123
 2f0:	b4 e1       	ldi	r27, 0x14	; 20
 2f2:	1c d1       	rcall	.+568    	; 0x52c <__umulhisi3>
 2f4:	ac 01       	movw	r20, r24
 2f6:	56 95       	lsr	r21
 2f8:	47 95       	ror	r20
 2fa:	9a 01       	movw	r18, r20
 2fc:	ad ec       	ldi	r26, 0xCD	; 205
 2fe:	bc ec       	ldi	r27, 0xCC	; 204
 300:	15 d1       	rcall	.+554    	; 0x52c <__umulhisi3>
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	9c 01       	movw	r18, r24
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	82 0f       	add	r24, r18
 322:	93 1f       	adc	r25, r19
 324:	9a 01       	movw	r18, r20
 326:	28 1b       	sub	r18, r24
 328:	39 0b       	sbc	r19, r25
 32a:	e1 e0       	ldi	r30, 0x01	; 1
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ec 0f       	add	r30, r28
 330:	fd 1f       	adc	r31, r29
 332:	e2 0f       	add	r30, r18
 334:	f3 1f       	adc	r31, r19
 336:	80 81       	ld	r24, Z
 338:	8b bb       	out	0x1b, r24	; 27
		break;
 33a:	5a c0       	rjmp	.+180    	; 0x3f0 <FND_Display+0x19e>

		case 2 :
		FND_SELECT_PORT &= ~(1<<PINF2);
 33c:	e2 e6       	ldi	r30, 0x62	; 98
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	8b 7f       	andi	r24, 0xFB	; 251
 344:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<PINF1) | (1<<PINF0) | (1<<PINF3);
 346:	80 81       	ld	r24, Z
 348:	8b 60       	ori	r24, 0x0B	; 11
 34a:	80 83       	st	Z, r24
		FND_DATA_PORT = fnd_data[data/10%10];
 34c:	9a 01       	movw	r18, r20
 34e:	ad ec       	ldi	r26, 0xCD	; 205
 350:	bc ec       	ldi	r27, 0xCC	; 204
 352:	ec d0       	rcall	.+472    	; 0x52c <__umulhisi3>
 354:	ac 01       	movw	r20, r24
 356:	56 95       	lsr	r21
 358:	47 95       	ror	r20
 35a:	56 95       	lsr	r21
 35c:	47 95       	ror	r20
 35e:	56 95       	lsr	r21
 360:	47 95       	ror	r20
 362:	9a 01       	movw	r18, r20
 364:	e3 d0       	rcall	.+454    	; 0x52c <__umulhisi3>
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	9c 01       	movw	r18, r24
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	82 0f       	add	r24, r18
 386:	93 1f       	adc	r25, r19
 388:	9a 01       	movw	r18, r20
 38a:	28 1b       	sub	r18, r24
 38c:	39 0b       	sbc	r19, r25
 38e:	e1 e0       	ldi	r30, 0x01	; 1
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	e2 0f       	add	r30, r18
 398:	f3 1f       	adc	r31, r19
 39a:	80 81       	ld	r24, Z
 39c:	8b bb       	out	0x1b, r24	; 27
		break;
 39e:	28 c0       	rjmp	.+80     	; 0x3f0 <FND_Display+0x19e>
		
		case 3 :
		FND_SELECT_PORT &= ~(1<<PINF3);
 3a0:	e2 e6       	ldi	r30, 0x62	; 98
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	87 7f       	andi	r24, 0xF7	; 247
 3a8:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<PINF1) | (1<<PINF2) | (1<<PINF0);
 3aa:	80 81       	ld	r24, Z
 3ac:	87 60       	ori	r24, 0x07	; 7
		FND_DATA_PORT = fnd_data[data%10];
 3ae:	80 83       	st	Z, r24
 3b0:	9a 01       	movw	r18, r20
 3b2:	ad ec       	ldi	r26, 0xCD	; 205
 3b4:	bc ec       	ldi	r27, 0xCC	; 204
 3b6:	ba d0       	rcall	.+372    	; 0x52c <__umulhisi3>
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	9c 01       	movw	r18, r24
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	82 0f       	add	r24, r18
 3d8:	93 1f       	adc	r25, r19
 3da:	9a 01       	movw	r18, r20
 3dc:	28 1b       	sub	r18, r24
 3de:	39 0b       	sbc	r19, r25
 3e0:	e1 e0       	ldi	r30, 0x01	; 1
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ec 0f       	add	r30, r28
 3e6:	fd 1f       	adc	r31, r29
 3e8:	e2 0f       	add	r30, r18
 3ea:	f3 1f       	adc	r31, r19
 3ec:	80 81       	ld	r24, Z
 3ee:	8b bb       	out	0x1b, r24	; 27
		break;
	}
	position++;
 3f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
	position = position % 4; // 4자리만 출력하고 다시 처음으로
 3f6:	83 70       	andi	r24, 0x03	; 3
 3f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
}
 3fc:	2a 96       	adiw	r28, 0x0a	; 10
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <main>:



int main()
{
	FND_DATA_DDR = 0xff; // 출력 모드
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	8a bb       	out	0x1a, r24	; 26
	FND_SELECT_DDR = 0xff; // 출력 모드
 412:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	FND_DATA_PORT = 0x00; // 0부터 시작
 416:	1b ba       	out	0x1b, r1	; 27
	DDRE &= ~(1<<DDRE4) | ~(1<<DDRE5) | ~(1<<DDRE6);
 418:	92 b1       	in	r25, 0x02	; 2
 41a:	92 b9       	out	0x02, r25	; 2
	DDRD = 0xff;
 41c:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 41e:	12 ba       	out	0x12, r1	; 18
	
	
	
	TCCR0 = (1<<CS02) | (1<<CS01) | (0<<CS00); // 256 분주
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 131;
 424:	83 e8       	ldi	r24, 0x83	; 131
 426:	82 bf       	out	0x32, r24	; 50
	EICRB |= (1<<ISC41) | (0<<ISC40) | (1<<ISC51) | (0<<ISC50) | (1<<ISC61) | (0<<ISC60);
 428:	8a b7       	in	r24, 0x3a	; 58
 42a:	8a 62       	ori	r24, 0x2A	; 42
 42c:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1<<INT4) | (1<<INT5) | (1<<INT6);
 42e:	89 b7       	in	r24, 0x39	; 57
 430:	80 67       	ori	r24, 0x70	; 112
 432:	89 bf       	out	0x39, r24	; 57
	TIMSK = (1<<TOIE0);
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	87 bf       	out	0x37, r24	; 55
	
	sei();
 438:	78 94       	sei

	while(1)
	{
		FND_Display(count);
 43a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count>
 43e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <count+0x1>
 442:	07 df       	rcall	.-498    	; 0x252 <FND_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 444:	8f e7       	ldi	r24, 0x7F	; 127
 446:	9e e3       	ldi	r25, 0x3E	; 62
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <main+0x3a>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <main+0x40>
 44e:	00 00       	nop
		_delay_ms(4);
		if(up_down%2)
 450:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <up_down>
 454:	80 ff       	sbrs	r24, 0
 456:	36 c0       	rjmp	.+108    	; 0x4c4 <main+0xb6>
		{
			if (count == 0)
 458:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count>
 45c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <count+0x1>
 460:	89 2b       	or	r24, r25
 462:	59 f7       	brne	.-42     	; 0x43a <main+0x2c>
 464:	8f e3       	ldi	r24, 0x3F	; 63
 466:	9c e9       	ldi	r25, 0x9C	; 156
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <main+0x5a>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <main+0x60>
 46e:	00 00       	nop
			{
				_delay_ms(10);
				if (count_ovfl>0)
 470:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <count_ovfl>
 474:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <count_ovfl+0x1>
 478:	21 15       	cp	r18, r1
 47a:	31 05       	cpc	r19, r1
 47c:	c1 f0       	breq	.+48     	; 0x4ae <main+0xa0>
				{
					LED_Data &= ~(1<<count_ovfl);
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <main+0x7a>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	2a 95       	dec	r18
 48a:	e2 f7       	brpl	.-8      	; 0x484 <main+0x76>
 48c:	80 95       	com	r24
 48e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <LED_Data>
 492:	89 23       	and	r24, r25
 494:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <LED_Data>
					PORTD = LED_Data;
 498:	82 bb       	out	0x12, r24	; 18
					count_ovfl--;
 49a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count_ovfl>
 49e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count_ovfl+0x1>
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <count_ovfl+0x1>
 4a8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count_ovfl>
 4ac:	c6 cf       	rjmp	.-116    	; 0x43a <main+0x2c>
				}
				else
				{
					count_ovfl = 8;
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <count_ovfl+0x1>
 4b6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count_ovfl>
					LED_Data = 0xff;
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <LED_Data>
					PORTD = LED_Data;
 4c0:	82 bb       	out	0x12, r24	; 18
 4c2:	bb cf       	rjmp	.-138    	; 0x43a <main+0x2c>
				}
			}
		}
		else
		{		
			if (count == 9999)
 4c4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count>
 4c8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <count+0x1>
 4cc:	8f 30       	cpi	r24, 0x0F	; 15
 4ce:	97 42       	sbci	r25, 0x27	; 39
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <main+0xc6>
 4d2:	b3 cf       	rjmp	.-154    	; 0x43a <main+0x2c>
 4d4:	8f e3       	ldi	r24, 0x3F	; 63
 4d6:	9c e9       	ldi	r25, 0x9C	; 156
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <main+0xca>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <main+0xd0>
 4de:	00 00       	nop
			{
				_delay_ms(10);
				if(count_ovfl<8)
 4e0:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <count_ovfl>
 4e4:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <count_ovfl+0x1>
 4e8:	28 30       	cpi	r18, 0x08	; 8
 4ea:	31 05       	cpc	r19, r1
 4ec:	b8 f4       	brcc	.+46     	; 0x51c <main+0x10e>
				{
					LED_Data |= (1<<count_ovfl);
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <main+0xea>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	2a 95       	dec	r18
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <main+0xe6>
 4fc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <LED_Data>
 500:	89 2b       	or	r24, r25
 502:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <LED_Data>
					PORTD = LED_Data;
 506:	82 bb       	out	0x12, r24	; 18
					count_ovfl++;
 508:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count_ovfl>
 50c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count_ovfl+0x1>
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <count_ovfl+0x1>
 516:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count_ovfl>
 51a:	8f cf       	rjmp	.-226    	; 0x43a <main+0x2c>
				}
				else
				{
					count_ovfl = 0;
 51c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count_ovfl+0x1>
 520:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_ovfl>
					LED_Data = 0;
 524:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <LED_Data>
					PORTD = LED_Data;
 528:	12 ba       	out	0x12, r1	; 18
 52a:	87 cf       	rjmp	.-242    	; 0x43a <main+0x2c>

0000052c <__umulhisi3>:
 52c:	a2 9f       	mul	r26, r18
 52e:	b0 01       	movw	r22, r0
 530:	b3 9f       	mul	r27, r19
 532:	c0 01       	movw	r24, r0
 534:	a3 9f       	mul	r26, r19
 536:	70 0d       	add	r23, r0
 538:	81 1d       	adc	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	91 1d       	adc	r25, r1
 53e:	b2 9f       	mul	r27, r18
 540:	70 0d       	add	r23, r0
 542:	81 1d       	adc	r24, r1
 544:	11 24       	eor	r1, r1
 546:	91 1d       	adc	r25, r1
 548:	08 95       	ret

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
