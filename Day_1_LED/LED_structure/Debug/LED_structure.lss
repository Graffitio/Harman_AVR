
LED_structure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002ea  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cad  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000960  00000000  00000000  000010e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000462  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000257  00000000  00000000  00002353  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000025aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	3a d0       	rcall	.+116    	; 0x128 <main>
  b4:	18 c1       	rjmp	.+560    	; 0x2e6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <ledInit>:
//0000 0000

#include "LED.h"

void ledInit(LED *led) // led의 주소를 받을 거야
{
  b8:	dc 01       	movw	r26, r24
	*(led->port -1) |=(1 << led->pin); // initial value = 0
  ba:	ed 91       	ld	r30, X+
  bc:	fc 91       	ld	r31, X
  be:	11 97       	sbiw	r26, 0x01	; 1
  c0:	42 91       	ld	r20, -Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	c9 01       	movw	r24, r18
  c8:	12 96       	adiw	r26, 0x02	; 2
  ca:	0c 90       	ld	r0, X
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <ledInit+0x1a>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <ledInit+0x16>
  d6:	84 2b       	or	r24, r20
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <ledOn>:
	// 여기서 1은 0x01
	//*(led->port-1) |= (1<< led->pin+7);
}

void ledOn(LED *led)
{
  dc:	dc 01       	movw	r26, r24
	// 해당 핀을 high로 설정
	*(led->port) |= (1<<led->pin);
  de:	ed 91       	ld	r30, X+
  e0:	fc 91       	ld	r31, X
  e2:	11 97       	sbiw	r26, 0x01	; 1
  e4:	40 81       	ld	r20, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	c9 01       	movw	r24, r18
  ec:	12 96       	adiw	r26, 0x02	; 2
  ee:	0c 90       	ld	r0, X
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <ledOn+0x1a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <ledOn+0x16>
  fa:	84 2b       	or	r24, r20
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <ledOff>:
}

void ledOff(LED *led)
{
	// 해당 핀을 low로 설정
	*(led->port) &= ~(1<<led->pin);
 100:	dc 01       	movw	r26, r24
 102:	ed 91       	ld	r30, X+
 104:	fc 91       	ld	r31, X
 106:	11 97       	sbiw	r26, 0x01	; 1
 108:	40 81       	ld	r20, Z
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	12 96       	adiw	r26, 0x02	; 2
 112:	0c 90       	ld	r0, X
 114:	02 c0       	rjmp	.+4      	; 0x11a <ledOff+0x1a>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <ledOff+0x16>
 11e:	cb 01       	movw	r24, r22
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <main>:
    //}
//}

// LED 8개 컨트롤 //
int main()
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	68 97       	sbiw	r28, 0x18	; 24
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
	LED leds[LED_COUNT] = {
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	e0 e0       	ldi	r30, 0x00	; 0
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	de 01       	movw	r26, r28
 144:	11 96       	adiw	r26, 0x01	; 1
 146:	01 90       	ld	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	8a 95       	dec	r24
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x1e>
		{&PORTD, 5},
		{&PORTD, 6},
		{&PORTD, 7},
	};
	// 초기화
	for (int i = 0 ; i < LED_COUNT ; i++)
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	0e c0       	rjmp	.+28     	; 0x170 <main+0x48>
	{
		ledInit(&leds[i]); // i번째 배열의 주소값을 넘겨 줌
 154:	c8 01       	movw	r24, r16
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	80 0f       	add	r24, r16
 15c:	91 1f       	adc	r25, r17
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	2c 0f       	add	r18, r28
 164:	3d 1f       	adc	r19, r29
 166:	82 0f       	add	r24, r18
 168:	93 1f       	adc	r25, r19
 16a:	a6 df       	rcall	.-180    	; 0xb8 <ledInit>
		{&PORTD, 5},
		{&PORTD, 6},
		{&PORTD, 7},
	};
	// 초기화
	for (int i = 0 ; i < LED_COUNT ; i++)
 16c:	0f 5f       	subi	r16, 0xFF	; 255
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	08 30       	cpi	r16, 0x08	; 8
 172:	11 05       	cpc	r17, r1
 174:	7c f3       	brlt	.-34     	; 0x154 <main+0x2c>
		ledInit(&leds[i]); // i번째 배열의 주소값을 넘겨 줌
	}
	
	while (1)
	{
		for (int i=0 ; i < 6 ; i++)
 176:	00 e0       	ldi	r16, 0x00	; 0
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	27 c0       	rjmp	.+78     	; 0x1ca <main+0xa2>
		{
			ledOn(&leds[i]);
 17c:	c8 01       	movw	r24, r16
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	80 0f       	add	r24, r16
 184:	91 1f       	adc	r25, r17
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	2c 0f       	add	r18, r28
 18c:	3d 1f       	adc	r19, r29
 18e:	82 0f       	add	r24, r18
 190:	93 1f       	adc	r25, r19
 192:	a4 df       	rcall	.-184    	; 0xdc <ledOn>
			ledOn(&leds[7-i]);
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	80 1b       	sub	r24, r16
 19a:	91 0b       	sbc	r25, r17
 19c:	9c 01       	movw	r18, r24
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	2c 0f       	add	r18, r28
 1ac:	3d 1f       	adc	r19, r29
 1ae:	82 0f       	add	r24, r18
 1b0:	93 1f       	adc	r25, r19
 1b2:	94 df       	rcall	.-216    	; 0xdc <ledOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	3f ef       	ldi	r19, 0xFF	; 255
 1b6:	81 ee       	ldi	r24, 0xE1	; 225
 1b8:	94 e0       	ldi	r25, 0x04	; 4
 1ba:	31 50       	subi	r19, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x92>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x9c>
 1c4:	00 00       	nop
		ledInit(&leds[i]); // i번째 배열의 주소값을 넘겨 줌
	}
	
	while (1)
	{
		for (int i=0 ; i < 6 ; i++)
 1c6:	0f 5f       	subi	r16, 0xFF	; 255
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ca:	06 30       	cpi	r16, 0x06	; 6
 1cc:	11 05       	cpc	r17, r1
 1ce:	b4 f2       	brlt	.-84     	; 0x17c <main+0x54>
 1d0:	07 e0       	ldi	r16, 0x07	; 7
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	27 c0       	rjmp	.+78     	; 0x224 <main+0xfc>
		for (int i=7 ; i>=0 ; i--)
		{
			//ledOn(&leds[i]);
			//ledOn(&leds[7-i]);
			//_delay_ms(100);
			ledOff(&leds[i]);
 1d6:	c8 01       	movw	r24, r16
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	80 0f       	add	r24, r16
 1de:	91 1f       	adc	r25, r17
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	2c 0f       	add	r18, r28
 1e6:	3d 1f       	adc	r19, r29
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	89 df       	rcall	.-238    	; 0x100 <ledOff>
			ledOff(&leds[7-i]);
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	80 1b       	sub	r24, r16
 1f4:	91 0b       	sbc	r25, r17
 1f6:	9c 01       	movw	r18, r24
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	82 0f       	add	r24, r18
 1fe:	93 1f       	adc	r25, r19
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	2c 0f       	add	r18, r28
 206:	3d 1f       	adc	r19, r29
 208:	82 0f       	add	r24, r18
 20a:	93 1f       	adc	r25, r19
 20c:	79 df       	rcall	.-270    	; 0x100 <ledOff>
 20e:	3f ef       	ldi	r19, 0xFF	; 255
 210:	81 ee       	ldi	r24, 0xE1	; 225
 212:	94 e0       	ldi	r25, 0x04	; 4
 214:	31 50       	subi	r19, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0xec>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0xf6>
 21e:	00 00       	nop
			_delay_ms(100);
			//ledOff(&leds[i]);
			//ledOff(&leds[7-i]);
			//_delay_ms(100);
		}
		for (int i=7 ; i>=0 ; i--)
 220:	01 50       	subi	r16, 0x01	; 1
 222:	11 09       	sbc	r17, r1
 224:	11 23       	and	r17, r17
 226:	bc f6       	brge	.-82     	; 0x1d6 <main+0xae>
 228:	00 e0       	ldi	r16, 0x00	; 0
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	29 c0       	rjmp	.+82     	; 0x280 <main+0x158>
			ledOff(&leds[7-i]);
			_delay_ms(100);
		}
		for (int i=0 ; i < 5 ; i++)
		{
			ledOn(&leds[3-i]);
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	80 1b       	sub	r24, r16
 234:	91 0b       	sbc	r25, r17
 236:	9c 01       	movw	r18, r24
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	82 0f       	add	r24, r18
 23e:	93 1f       	adc	r25, r19
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	2c 0f       	add	r18, r28
 246:	3d 1f       	adc	r19, r29
 248:	82 0f       	add	r24, r18
 24a:	93 1f       	adc	r25, r19
 24c:	47 df       	rcall	.-370    	; 0xdc <ledOn>
			ledOn(&leds[4+i]);
 24e:	c8 01       	movw	r24, r16
 250:	04 96       	adiw	r24, 0x04	; 4
 252:	9c 01       	movw	r18, r24
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	2c 0f       	add	r18, r28
 262:	3d 1f       	adc	r19, r29
 264:	82 0f       	add	r24, r18
 266:	93 1f       	adc	r25, r19
 268:	39 df       	rcall	.-398    	; 0xdc <ledOn>
 26a:	3f ef       	ldi	r19, 0xFF	; 255
 26c:	81 ee       	ldi	r24, 0xE1	; 225
 26e:	94 e0       	ldi	r25, 0x04	; 4
 270:	31 50       	subi	r19, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x148>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x152>
 27a:	00 00       	nop
			//_delay_ms(100);
			ledOff(&leds[i]);
			ledOff(&leds[7-i]);
			_delay_ms(100);
		}
		for (int i=0 ; i < 5 ; i++)
 27c:	0f 5f       	subi	r16, 0xFF	; 255
 27e:	1f 4f       	sbci	r17, 0xFF	; 255
 280:	05 30       	cpi	r16, 0x05	; 5
 282:	11 05       	cpc	r17, r1
 284:	a4 f2       	brlt	.-88     	; 0x22e <main+0x106>
 286:	00 e0       	ldi	r16, 0x00	; 0
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	29 c0       	rjmp	.+82     	; 0x2de <main+0x1b6>
		for (int i= 0; i < 5 ; i++)
		{
			//ledon(&leds[i]);
			//ledon(&leds[7-i]);
			//_delay_ms(100);
			ledOff(&leds[3-i]);
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	80 1b       	sub	r24, r16
 292:	91 0b       	sbc	r25, r17
 294:	9c 01       	movw	r18, r24
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	82 0f       	add	r24, r18
 29c:	93 1f       	adc	r25, r19
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	2c 0f       	add	r18, r28
 2a4:	3d 1f       	adc	r19, r29
 2a6:	82 0f       	add	r24, r18
 2a8:	93 1f       	adc	r25, r19
 2aa:	2a df       	rcall	.-428    	; 0x100 <ledOff>
			ledOff(&leds[4+i]);
 2ac:	c8 01       	movw	r24, r16
 2ae:	04 96       	adiw	r24, 0x04	; 4
 2b0:	9c 01       	movw	r18, r24
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	82 0f       	add	r24, r18
 2b8:	93 1f       	adc	r25, r19
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	2c 0f       	add	r18, r28
 2c0:	3d 1f       	adc	r19, r29
 2c2:	82 0f       	add	r24, r18
 2c4:	93 1f       	adc	r25, r19
 2c6:	1c df       	rcall	.-456    	; 0x100 <ledOff>
 2c8:	3f ef       	ldi	r19, 0xFF	; 255
 2ca:	81 ee       	ldi	r24, 0xE1	; 225
 2cc:	94 e0       	ldi	r25, 0x04	; 4
 2ce:	31 50       	subi	r19, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x1a6>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x1b0>
 2d8:	00 00       	nop
			_delay_ms(100);
			//ledOff(&leds[3-i]);
			//ledOff(&leds[3+i]);
			//_delay_ms(100);
		}
		for (int i= 0; i < 5 ; i++)
 2da:	0f 5f       	subi	r16, 0xFF	; 255
 2dc:	1f 4f       	sbci	r17, 0xFF	; 255
 2de:	05 30       	cpi	r16, 0x05	; 5
 2e0:	11 05       	cpc	r17, r1
 2e2:	a4 f2       	brlt	.-88     	; 0x28c <main+0x164>
 2e4:	48 cf       	rjmp	.-368    	; 0x176 <main+0x4e>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
