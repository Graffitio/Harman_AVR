
LED_shift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8b  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f7  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d3  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001feb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	21 d0       	rcall	.+66     	; 0xdc <main>
  9a:	51 c0       	rjmp	.+162    	; 0x13e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ledInit>:

#include "LED.h" // 함수의 원형이 여기 선언되어있으니, LED.h를 include해줘야 한다.

void ledInit() // led를 이니셜하는 함수
{
	LED_DDR = 0xff; // Art+G 누르면 LED_DDR가 선언된 곳으로 이동함.
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
  a2:	08 95       	ret

000000a4 <GPIO_output>:
}

void GPIO_output(uint8_t data) //
{
	LED_PORT = data; // 0x01
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	08 95       	ret

000000a8 <ledLeftShift>:
}

void ledLeftShift(uint8_t *data) // LED를 좌시프트, 얘는 포인터로 받음
							      // * : 참조연산자
{
  a8:	fc 01       	movw	r30, r24
	*data = (*data >> 7) | (*data << 1); // 비트마스킹, 어떤 값이 있는지 모르니, msb는 7칸 몰려오고, lsb 1칸 몰려간 것을 or연산
  aa:	90 81       	ld	r25, Z
  ac:	29 2f       	mov	r18, r25
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	99 1f       	adc	r25, r25
  b6:	99 27       	eor	r25, r25
  b8:	99 1f       	adc	r25, r25
  ba:	89 2f       	mov	r24, r25
  bc:	82 2b       	or	r24, r18
  be:	80 83       	st	Z, r24
	GPIO_output(*data); // (*data) : 연산자 우선순위때문에 묶음
  c0:	f1 cf       	rjmp	.-30     	; 0xa4 <GPIO_output>
  c2:	08 95       	ret

000000c4 <ledRightShift>:
}

void ledRightShift(uint8_t *data) // LED를 우시프트
{
  c4:	fc 01       	movw	r30, r24
	*data = (*data << 7) | (*data >> 1);
  c6:	90 81       	ld	r25, Z
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	98 9f       	mul	r25, r24
  cc:	90 01       	movw	r18, r0
  ce:	11 24       	eor	r1, r1
  d0:	96 95       	lsr	r25
  d2:	89 2f       	mov	r24, r25
  d4:	82 2b       	or	r24, r18
  d6:	80 83       	st	Z, r24
	GPIO_output(*data);
  d8:	e5 cf       	rjmp	.-54     	; 0xa4 <GPIO_output>
  da:	08 95       	ret

000000dc <main>:
#include <util/delay.h> // delay함수써야되니까~
#include "LED.h" // 얘를 빼먹으면 지멋대로 움직임


int main(void)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
   ledInit();
  e6:	db df       	rcall	.-74     	; 0x9e <ledInit>
   
   uint8_t ledData = 0x01;  // unsigned int 8bit 0~255까지
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	89 83       	std	Y+1, r24	; 0x01
   
    while (1) 
    {
		for(int i = 0 ; i <7 ; i++)
  ec:	00 e0       	ldi	r16, 0x00	; 0
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	0e c0       	rjmp	.+28     	; 0x10e <main+0x32>
		{
			ledLeftShift(&ledData); // 주소값으로 던져줘야 함수에서 포인터 변수로 받음
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	d8 df       	rcall	.-80     	; 0xa8 <ledLeftShift>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	83 ec       	ldi	r24, 0xC3	; 195
  fc:	99 e0       	ldi	r25, 0x09	; 9
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x2c>
 108:	00 00       	nop
   
   uint8_t ledData = 0x01;  // unsigned int 8bit 0~255까지
   
    while (1) 
    {
		for(int i = 0 ; i <7 ; i++)
 10a:	0f 5f       	subi	r16, 0xFF	; 255
 10c:	1f 4f       	sbci	r17, 0xFF	; 255
 10e:	07 30       	cpi	r16, 0x07	; 7
 110:	11 05       	cpc	r17, r1
 112:	7c f3       	brlt	.-34     	; 0xf2 <main+0x16>
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	0e c0       	rjmp	.+28     	; 0x136 <main+0x5a>
			ledLeftShift(&ledData); // 주소값으로 던져줘야 함수에서 포인터 변수로 받음
			_delay_ms(200); 
		}
		for (int i = 0 ; i < 7 ; i++)
		{
			ledRightShift(&ledData);
 11a:	ce 01       	movw	r24, r28
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	d2 df       	rcall	.-92     	; 0xc4 <ledRightShift>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x4a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x54>
 130:	00 00       	nop
		for(int i = 0 ; i <7 ; i++)
		{
			ledLeftShift(&ledData); // 주소값으로 던져줘야 함수에서 포인터 변수로 받음
			_delay_ms(200); 
		}
		for (int i = 0 ; i < 7 ; i++)
 132:	0f 5f       	subi	r16, 0xFF	; 255
 134:	1f 4f       	sbci	r17, 0xFF	; 255
 136:	07 30       	cpi	r16, 0x07	; 7
 138:	11 05       	cpc	r17, r1
 13a:	7c f3       	brlt	.-34     	; 0x11a <main+0x3e>
 13c:	d7 cf       	rjmp	.-82     	; 0xec <main+0x10>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
